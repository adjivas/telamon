var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"generics":["dense"],"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"default","","Return an empty `ArrayString`",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"new","","Create a new empty `ArrayString`.",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,{"inputs":[{"name":"a"}],"output":{"generics":["utf8error"],"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"try_push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"pop","","Removes the last character from the string and returns it.",0,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"clear","","Make the string empty.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings’s length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"new","","Create a new `CapacityError` from `element`.",1,{"inputs":[{"name":"t"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",4,null],[11,"try_push","","Push `element` to the end of the vector.",4,null],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,null],[11,"insert","","Insert `element` at position `index`.",4,null],[11,"try_insert","","Insert `element` at position `index`.",4,null],[11,"pop","","Remove the last element in the vector and return it.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,null],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,null],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Remove all elements in the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",4,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Return an empty array",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is not a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["binary_heap_plus"] = {"doc":"","items":[[3,"BinaryHeap","binary_heap_plus","A priority queue implemented with a binary heap.",null,null],[3,"MaxComparator","","For `T` that implements `Ord`, you can use this struct to quickly set up a max heap.",null,null],[3,"MinComparator","","For `T` that implements `Ord`, you can use this struct to quickly set up a min heap.",null,null],[3,"FnComparator","","The comparator defined by closure",null,null],[12,"0","","",0,null],[3,"KeyComparator","","The comparator ordered by key",null,null],[12,"0","","",1,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"maxcomparator"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compare","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"mincomparator"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compare","","",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fncomparator"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compare","","",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"keycomparator"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compare","","",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"pop","","Removes the peeked value from the heap and returns it.",4,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"default","","Creates an empty `BinaryHeap<T>`.",5,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap`.",5,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_min","","Creates an empty `BinaryHeap`. ",5,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity_min","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_by","","Creates an empty `BinaryHeap`. ",5,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_capacity_by","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",5,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"new_by_key","","Creates an empty `BinaryHeap`. ",5,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_capacity_by_key","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",5,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",5,{"inputs":[{"name":"self"}],"output":{"generics":["peekmut"],"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",5,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"into","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_iter","","",5,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",5,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[8,"Compare","","Simpler replacement for the `Ord` trait. The difference is that you can define multiple sort orders on a single type `T`. Unlike `Ord` trait, `Compare<T>` trait can be easily implemented by providing a single function.",null,null],[10,"compare","","",9,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}]],"paths":[[3,"FnComparator"],[3,"KeyComparator"],[3,"MaxComparator"],[3,"MinComparator"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[8,"Compare"]]};
searchIndex["bincode"] = {"doc":"Bincode is a crate for encoding and decoding using a tiny binary serialization strategy.  Using it, you can easily go from having an object in memory, quickly serialize it to bytes, and then deserialize it back just as fast!","items":[[3,"Config","bincode","A configuration builder whose options Bincode will use while serializing and deserializing.",null,null],[4,"ErrorKind","","The kind of error that can be produced during a serialization or deserialization.",null,null],[13,"Io","","If the error stems from the reader/writer that is being used during (de)serialization, that error will be stored and returned here.",0,null],[13,"InvalidUtf8Encoding","","Returned if the deserializer attempts to deserialize a string that is not valid utf8",0,null],[13,"InvalidBoolEncoding","","Returned if the deserializer attempts to deserialize a bool that was not encoded as either a 1 or a 0",0,null],[13,"InvalidCharEncoding","","Returned if the deserializer attempts to deserialize a char that is not in the correct format.",0,null],[13,"InvalidTagEncoding","","Returned if the deserializer attempts to deserialize the tag of an enum that is not in the expected ranges",0,null],[13,"DeserializeAnyNotSupported","","Serde has a deserialize_any method that lets the format hint to the object which route to take in deserializing.",0,null],[13,"SizeLimit","","If (de)serializing a message takes more than the provided size limit, this error is returned.",0,null],[13,"SequenceMustHaveLength","","Bincode can not encode sequences of unknown length (like iterators).",0,null],[13,"Custom","","A custom error message from Serde.",0,null],[5,"config","","Get a default configuration object.",null,{"inputs":[],"output":{"name":"config"}}],[5,"serialize_into","","Serializes an object directly into a `Writer` using the default configuration.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes using the default configuration.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"deserialize_from","","Deserializes an object directly from a `Read`er using the default configuration.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"deserialize_from_custom","","Deserializes an object from a custom `BincodeRead`er using the default configuration. It is highly recommended to use `deserialize_from` unless you need to implement `BincodeRead` for performance reasons.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"deserialize","","Deserializes a slice of bytes into an instance of `T` using the default configuration.",null,null],[5,"serialized_size","","Returns the size that an object would be if serialized using Bincode with the default configuration.",null,{"inputs":[{"name":"t"}],"output":{"generics":["u64"],"name":"result"}}],[11,"no_limit","","Sets the byte limit to be unlimited. This is the default.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"limit","","Sets the byte limit to `limit`.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"little_endian","","Sets the endianness to little-endian This is the default.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"big_endian","","Sets the endianness to big-endian",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"native_endian","","Sets the endianness to the the machine-native endianness",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"serialize","","Serializes a serializable object into a `Vec` of bytes using this configuration",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[11,"serialized_size","","Returns the size that an object would be if serialized using Bincode with this configuration",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["u64"],"name":"result"}}],[11,"serialize_into","","Serializes an object directly into a `Writer` using this configuration",1,{"inputs":[{"name":"self"},{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","Deserializes a slice of bytes into an instance of `T` using this configuration",1,null],[11,"deserialize_from","","Deserializes an object directly from a `Read`er using this configuration",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"deserialize_from_custom","","Deserializes an object from a custom `BincodeRead`er using the default configuration. It is highly recommended to use `deserialize_from` unless you need to implement `BincodeRead` for performance reasons.",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Error","","An error that can be produced during (de)serializing.",null,null],[6,"Result","","The result of a serialization or deserialization operation.",null,null],[8,"BincodeRead","","An optional Read trait for advanced Bincode usage.",null,null],[10,"forward_read_str","","Forwards reading `length` bytes of a string on to the serde reader.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"get_byte_buffer","","Return the first `length` bytes of the internal byte buffer.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec"],"name":"result"}}],[10,"forward_read_bytes","","Forwards reading `length` bytes on to the serde reader.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",3,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}]],"paths":[[4,"ErrorKind"],[3,"Config"],[8,"BincodeRead"],[6,"Error"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[17,"FLAG_A","","",null,null],[17,"FLAG_B","","",null,null],[17,"FLAG_C","","",null,null],[17,"FLAG_ABC","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["boxfnonce"] = {"doc":"See `BoxFnOnce` and `SendBoxFnOnce`.","items":[[3,"BoxFnOnce","boxfnonce","`BoxFnOnce` boxes any `FnOnce` function up to a certain number of arguments (10 as of now).",null,null],[3,"SendBoxFnOnce","","`SendBoxFnOnce` boxes any `FnOnce + Send` function up to a certain number of arguments (10 as of now).",null,null],[11,"call_tuple","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"},{"name":"args"}],"output":{"name":"result"}}],[11,"new","","`BoxFnOnce::new` is an alias for `BoxFnOnce::from`.",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"},{"name":"a1"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"},{"name":"a6"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"},{"name":"a6"},{"name":"a7"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"},{"name":"a6"},{"name":"a7"},{"name":"a8"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"},{"name":"a6"},{"name":"a7"},{"name":"a8"},{"name":"a9"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",0,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"},{"name":"a6"},{"name":"a7"},{"name":"a8"},{"name":"a9"},{"name":"a10"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call_tuple","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"},{"name":"args"}],"output":{"name":"result"}}],[11,"new","","`SendBoxFnOnce::new` is an alias for `SendBoxFnOnce::from`.",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"},{"name":"a1"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"},{"name":"a6"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"},{"name":"a6"},{"name":"a7"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"},{"name":"a6"},{"name":"a7"},{"name":"a8"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"},{"name":"a6"},{"name":"a7"},{"name":"a8"},{"name":"a9"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"call","","call inner function, consumes the box.",1,{"inputs":[{"name":"self"},{"name":"a1"},{"name":"a2"},{"name":"a3"},{"name":"a4"},{"name":"a5"},{"name":"a6"},{"name":"a7"},{"name":"a8"},{"name":"a9"},{"name":"a10"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}]],"paths":[[3,"BoxFnOnce"],[3,"SendBoxFnOnce"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"] = {"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[3,"Bytes","","A reference counted contiguous slice of memory.",null,null],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",null,null],[0,"buf","","Utilities for working with buffers.",null,null],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",null,null],[3,"Iter","","Iterator over the bytes contained by the buffer.",null,null],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",null,null],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",null,null],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",null,null],[11,"from_buf","bytes","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_buf","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","bytes::buf","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Chain` sequencing the provided values.",3,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"chain"}}],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",3,null],[11,"remaining","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",3,null],[11,"advance","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_vec","","",3,null],[11,"remaining_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes_mut","","",3,null],[11,"advance_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_vec_mut","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"read","","",5,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"limit","","Returns the maximum number of bytes that can be read.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit","","Sets the maximum number of bytes that can be read.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remaining","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","","Advance the internal cursor of the Buf",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[8,"FromBuf","","Conversion from a [`Buf`]",null,null],[10,"from_buf","","Creates a value from a buffer.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoBuf","","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"with_capacity","bytes","Creates a new `Bytes` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"new","","Creates a new empty `Bytes`.",1,{"inputs":[],"output":{"name":"bytes"}}],[11,"from_static","","Creates a new `Bytes` from a static slice.",1,null],[11,"len","","Returns the number of bytes contained in this `Bytes`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_to","","Splits the bytes into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Clears the buffer, removing all data.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bytesmut","bytes"],"name":"result"}}],[11,"extend_from_slice","","Appends given bytes to this object.",1,null],[11,"into_buf","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"as_ref","","",1,null],[11,"deref","","",1,null],[11,"from","","",1,{"inputs":[{"name":"bytesmut"}],"output":{"name":"bytes"}}],[11,"from","","",1,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"bytes"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from_iter","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"bytes"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",1,null],[11,"into_iter","","",1,null],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",2,{"inputs":[{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"new","","Creates a new `BytesMut` with default capacity.",2,{"inputs":[],"output":{"name":"bytesmut"}}],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"freeze","","Converts `self` into an immutable `Bytes`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"take","","Removes the bytes from the current view, returning them in a new `BytesMut` handle.",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesmut"}}],[11,"split_to","","Splits the buffer into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Clears the buffer, removing all data.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"resize","","Resizes the buffer so that `len` is equal to `new_len`.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"set_len","","Sets the length of the buffer.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"extend_from_slice","","Appends given bytes to this object.",2,null],[11,"unsplit","","Combine splitted BytesMut objects back as contiguous.",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":null}],[11,"remaining_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_mut","","",2,null],[11,"put_slice","","",2,null],[11,"put_u8","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"into_buf","","",2,null],[11,"as_ref","","",2,null],[11,"deref","","",2,null],[11,"as_mut","","",2,null],[11,"deref_mut","","",2,null],[11,"from","","",2,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesmut"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"bytesmut"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",2,null],[11,"borrow_mut","","",2,null],[11,"write_str","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","",2,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesmut"}}],[11,"into_iter","","",2,null],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","bytes","Advance the internal cursor of the Buf",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[8,"IntoBuf","bytes","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"read_u16","","",13,null],[11,"read_u32","","",13,null],[11,"read_u64","","",13,null],[11,"read_uint","","",13,null],[11,"write_u16","","",13,null],[11,"write_u32","","",13,null],[11,"write_u64","","",13,null],[11,"write_uint","","",13,null],[11,"read_u16_into","","",13,null],[11,"read_u32_into","","",13,null],[11,"read_u64_into","","",13,null],[11,"write_u16_into","","",13,null],[11,"write_u32_into","","",13,null],[11,"write_u64_into","","",13,null],[11,"from_slice_u16","","",13,null],[11,"from_slice_u32","","",13,null],[11,"from_slice_u64","","",13,null],[11,"from_slice_f32","","",13,null],[11,"from_slice_f64","","",13,null],[11,"read_u16","","",12,null],[11,"read_u32","","",12,null],[11,"read_u64","","",12,null],[11,"read_uint","","",12,null],[11,"write_u16","","",12,null],[11,"write_u32","","",12,null],[11,"write_u64","","",12,null],[11,"write_uint","","",12,null],[11,"read_u16_into","","",12,null],[11,"read_u32_into","","",12,null],[11,"read_u64_into","","",12,null],[11,"write_u16_into","","",12,null],[11,"write_u32_into","","",12,null],[11,"write_u64_into","","",12,null],[11,"from_slice_u16","","",12,null],[11,"from_slice_u32","","",12,null],[11,"from_slice_u64","","",12,null],[11,"from_slice_f32","","",12,null],[11,"from_slice_f64","","",12,null],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"hash","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"littleendian"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"bigendian"}}],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}]],"paths":[[8,"ByteOrder"],[3,"Bytes"],[3,"BytesMut"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["compare"] = {"doc":"Comparators.","items":[[3,"Borrowing","compare","A comparator that borrows its parameters before comparing them.",null,null],[3,"Extract","","A comparator that extracts a sort key from a value.",null,null],[3,"Then","","A comparator that [lexicographically] (https://en.wikipedia.org/wiki/Lexicographical_order) combines two others.",null,null],[3,"Natural","","A comparator that delegates to [`Ord`] (http://doc.rust-lang.org/std/cmp/trait.Ord.html).",null,null],[3,"Rev","","A comparator that reverses the ordering of another.",null,null],[3,"Swap","","A comparator that swaps another's parameters, maintaining the underlying ordering.",null,null],[5,"max","","Returns the maximum of two values according to the given comparator, or `r` if they are equal.",null,{"inputs":[{"name":"c"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Returns the minimum of two values according to the given comparator, or `l` if they are equal.",null,{"inputs":[{"name":"c"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"natural","","Returns a comparator that delegates to `Ord`.",null,{"inputs":[],"output":{"name":"natural"}}],[8,"Compare","","A comparator imposing a total order.",null,null],[10,"compare","","Compares two values, returning `Less`, `Equal`, or `Greater` if `l` is less than, equal to, or greater than `r`, respectively.",0,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"ordering"}}],[11,"compares_lt","","Checks if `l` is less than `r`.",0,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_le","","Checks if `l` is less than or equal to `r`.",0,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ge","","Checks if `l` is greater than or equal to `r`.",0,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_gt","","Checks if `l` is greater than `r`.",0,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_eq","","Checks if `l` is equal to `r`.",0,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ne","","Checks if `l` is not equal to `r`.",0,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"borrowing","","Borrows the comparator's parameters before comparing them.",0,{"inputs":[{"name":"self"}],"output":{"name":"borrowing"}}],[11,"rev","","Reverses the ordering of the comparator.",0,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"swap","","Swaps the comparator's parameters, maintaining the underlying ordering.",0,{"inputs":[{"name":"self"}],"output":{"name":"swap"}}],[11,"then","","Lexicographically combines the comparator with another.",0,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"then"}}],[11,"compare","","",1,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",1,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_le","","",1,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ge","","",1,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_gt","","",1,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_eq","","",1,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ne","","",1,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"extract"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"extract"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"extract"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"extract"}],"output":{"name":"bool"}}],[11,"new","","Returns a comparator that extracts a sort key using `ext` and compares it according to its natural ordering.",2,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"with_cmp","","Returns a comparator that extracts a sort key using `ext` and compares it using `cmp`.",2,{"inputs":[{"name":"e"},{"name":"c"}],"output":{"name":"self"}}],[11,"compare","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_le","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ge","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_gt","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_eq","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ne","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"then"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"then"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"then"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"then"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compare","","",3,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"ordering"}}],[11,"compare","","",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_le","","",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ge","","",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_gt","","",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_eq","","",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ne","","",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"rev"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"rev"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"rev"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compare","","",5,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",5,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_le","","",5,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ge","","",5,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_gt","","",5,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_eq","","",5,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ne","","",5,{"inputs":[{"name":"self"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"swap"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"swap"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"swap"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"swap"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compare","","",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"l"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}],[11,"compares_le","","",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}],[11,"compares_ge","","",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}],[11,"compares_gt","","",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}],[11,"compares_eq","","",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}],[11,"compares_ne","","",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}]],"paths":[[8,"Compare"],[3,"Borrowing"],[3,"Extract"],[3,"Then"],[3,"Natural"],[3,"Rev"],[3,"Swap"]]};
searchIndex["config"] = {"doc":"Config organizes hierarchical or layered configurations for Rust applications.","items":[[3,"Config","config","A prioritized configuration repository. It maintains a set of configuration sources, fetches values to populate those, and provides them according to the source's priority.",null,null],[12,"cache","","Root of the cached configuration.",0,null],[3,"Value","","A configuration value.",null,null],[12,"kind","","Underlying kind of the configuration value.",1,null],[3,"File","","",null,null],[3,"Environment","","",null,null],[4,"ConfigError","","Represents all possible errors that can occur when working with configuration.",null,null],[13,"Frozen","","Configuration is frozen and no further mutations can be made.",2,null],[13,"NotFound","","Configuration property was not found",2,null],[13,"PathParse","","Configuration path could not be parsed.",2,null],[13,"FileParse","","Configuration could not be parsed from file.",2,null],[12,"uri","config::ConfigError","The URI used to access the file (if not loaded from a string). Example: `/path/to/config.json`",2,null],[12,"cause","","The captured error from attempting to parse the file in its desired format. This is the actual error object from the library used for the parsing.",2,null],[13,"Type","config","Value could not be converted into the requested type.",2,null],[12,"origin","config::ConfigError","The URI that references the source that the value came from. Example: `/path/to/config.json` or `Environment` or `etcd://localhost`",2,null],[12,"unexpected","","What we found when parsing the value",2,null],[12,"expected","","What was expected when parsing the value",2,null],[12,"key","","The key in the configuration hash of this value (if available where the error is generated).",2,null],[13,"Message","config","Custom message",2,null],[13,"Foreign","","Unadorned error from a foreign origin.",2,null],[4,"FileFormat","","",null,null],[13,"Toml","","TOML (parsed with toml)",3,null],[13,"Json","","JSON (parsed with serde_json)",3,null],[13,"Yaml","","YAML (parsed with yaml_rust)",3,null],[13,"Hjson","","HJSON (parsed with serde_hjson)",3,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"value"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"new","","Create a new value instance that will remember its source uri.",1,{"inputs":[{"generics":["string"],"name":"option"},{"name":"v"}],"output":{"name":"self"}}],[11,"try_into","","Attempt to deserialize this value into the requested type.",1,{"inputs":[{"name":"self"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"into_bool","","Returns `self` as a bool, if possible.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool","configerror"],"name":"result"}}],[11,"into_int","","Returns `self` into an i64, if possible.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i64","configerror"],"name":"result"}}],[11,"into_float","","Returns `self` into a f64, if possible.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f64","configerror"],"name":"result"}}],[11,"into_str","","Returns `self` into a str, if possible.",1,{"inputs":[{"name":"self"}],"output":{"generics":["string","configerror"],"name":"result"}}],[11,"into_array","","Returns `self` into an array, if possible",1,{"inputs":[{"name":"self"}],"output":{"generics":["vec","configerror"],"name":"result"}}],[11,"into_table","","If the `Value` is a Table, returns the associated Map.",1,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_bool","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i8","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i16","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i32","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i64","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u8","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u16","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u32","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u64","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_f32","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_f64","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_str","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_string","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_option","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_char","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",1,null],[11,"deserialize_unit","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",1,null],[11,"deserialize_newtype_struct","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_identifier","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"config"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"merge","","Merge in a configuration property source.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["config","configerror"],"name":"result"}}],[11,"refresh","","Refresh the configuration cache with fresh data from added sources.",0,{"inputs":[{"name":"self"}],"output":{"generics":["config","configerror"],"name":"result"}}],[11,"set_default","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["config","configerror"],"name":"result"}}],[11,"set","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["config","configerror"],"name":"result"}}],[11,"get","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"get_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string","configerror"],"name":"result"}}],[11,"get_int","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["i64","configerror"],"name":"result"}}],[11,"get_float","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["f64","configerror"],"name":"result"}}],[11,"get_bool","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["bool","configerror"],"name":"result"}}],[11,"get_table","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[11,"get_array","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["vec","configerror"],"name":"result"}}],[11,"try_into","","Attempt to deserialize the entire configuration into the requested type.",0,{"inputs":[{"name":"self"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"clone_into_box","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["source"],"name":"box"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fileformat"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fileformat"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"},{"name":"fileformat"}],"output":{"name":"self"}}],[11,"new","","",4,{"inputs":[{"name":"str"},{"name":"fileformat"}],"output":{"name":"self"}}],[11,"with_name","","Given the basename of a file, will attempt to locate a file by setting its extension to a registered format.",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"path"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"pathbuf"}],"output":{"name":"self"}}],[11,"format","","",4,{"inputs":[{"name":"self"},{"name":"fileformat"}],"output":{"name":"self"}}],[11,"required","","",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"clone_into_box","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["source"],"name":"box"}}],[11,"collect","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"environment"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"with_prefix","","",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"prefix","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"separator","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"environment"}}],[11,"clone_into_box","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["source"],"name":"box"}}],[11,"collect","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[8,"Source","","Describes a generic source of configuration properties.",null,null],[10,"clone_into_box","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["source"],"name":"box"}}],[10,"collect","","Collect all configuration properties available from this source and return a HashMap.",6,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[11,"collect_to","","",6,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"collect_to","","",6,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["configerror"],"name":"result"}}]],"paths":[[3,"Config"],[3,"Value"],[4,"ConfigError"],[4,"FileFormat"],[3,"File"],[3,"Environment"],[8,"Source"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"CachePadded","","Pad `T` to the length of a cacheline.",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"generics":["joinhandle"],"name":"result"}}],[0,"epoch","","Epoch-based memory management",null,null],[3,"Atomic","crossbeam::epoch","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[3,"Owned","","Like `Box<T>`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&'a T`: a shared reference valid for lifetime `'a`.",null,null],[5,"pin","","Pin the current epoch.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","",0,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Create a new atomic pointer",0,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared"],"name":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["owned"],"name":"option"},{"name":"ordering"}],"output":null}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding a shared reference to the pointer that was stored.",0,{"inputs":[{"name":"self"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"name":"ordering"}],"output":null}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"generics":["owned"],"name":"option"},{"name":"ordering"}],"output":{"generics":["option"],"name":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering, immediatley acquiring a new `Shared` reference to the previously-owned pointer if successful.",0,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared","owned"],"name":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"generics":["shared"],"name":"option"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["owned"],"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared"],"name":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data structure and should be collected when sufficient epochs have passed.",1,{"inputs":[{"name":"self"},{"name":"shared"}],"output":null}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Move `t` to a new heap allocation.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"into_inner","","Move data out of the owned box, deallocating the box.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_raw","","",3,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber's lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",null,null],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",4,{"inputs":[],"output":{"name":"atomicoption"}}],[11,"swap_box","","",4,{"inputs":[{"name":"self"},{"name":"box"},{"name":"ordering"}],"output":{"generics":["box"],"name":"option"}}],[11,"swap","","",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",5,{"inputs":[],"output":{"name":"msqueue"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_empty","","Check if this queue is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty stack.",6,{"inputs":[],"output":{"name":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to pop the top element of the stack. Deprecated method, use try_pop",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_pop","","Attempt to pop the top element of the stack.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","Check if this queue is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",7,{"inputs":[],"output":{"name":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_empty","","Judge if the queue is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[0,"chase_lev","","A lock-free concurrent work-stealing deque",null,null],[3,"Worker","crossbeam::sync::chase_lev","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `try_pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",8,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",8,null],[13,"Data","","The stealer has successfully stolen some data.",8,null],[5,"deque","","Creates a new empty deque",null,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"push","","Pushes data onto the front of this work queue.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",10,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","crossbeam::sync","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `ArcCell`.",11,{"inputs":[{"name":"arc"}],"output":{"name":"arccell"}}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",11,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",11,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"fmt","crossbeam","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",12,{"inputs":[{"name":"self"}],"output":{"name":"scopedthreadbuilder"}}],[11,"join","","Join the scoped thread, returning the result it produced.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",13,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zeroed","","A const fn equivalent to mem::zeroed().",14,{"inputs":[],"output":{"name":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",14,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null]],"paths":[[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"ArcCell"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"CachePadded"]]};
searchIndex["crossbeam_deque"] = {"doc":"A concurrent work-stealing deque.","items":[[3,"Deque","crossbeam_deque","A concurrent work-stealing deque.",null,null],[3,"Stealer","","A stealer that steals elements from the top of a deque.",null,null],[4,"Steal","","Possible outcomes of a steal operation.",null,null],[13,"Empty","","The deque was empty at the time of stealing.",0,null],[13,"Data","","Some data has been successfully stolen.",0,null],[13,"Retry","","Lost the race for stealing data to another concurrent operation. Try again.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"new","","Returns a new deque.",1,{"inputs":[],"output":{"name":"deque"}}],[11,"with_min_capacity","","Returns a new deque with the specified minimum capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","Pushes an element into the bottom of the deque.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops an element from the bottom of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals an element from the top of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"stealer","","Creates a stealer that can be shared with other threads.",1,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"steal","","Steals an element from the top of the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","Creates another stealer.",2,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Steal"],[3,"Deque"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"] = {"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",null,null],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",null,null],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,null],[12,"new","","The new value, which the operation failed to store.",0,null],[3,"Owned","","An owned heap-allocated object.",null,null],[3,"Shared","","A pointer to an object protected by the epoch GC.",null,null],[3,"Guard","","A guard that keeps the current thread pinned.",null,null],[3,"Collector","","An epoch-based garbage collector.",null,null],[3,"Handle","","A handle to a garbage collector.",null,null],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",null,{"inputs":[],"output":{"name":"guard"}}],[5,"default_handle","","Returns the default handle associated with the current thread.",null,{"inputs":[],"output":{"name":"handle"}}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"pin","","Pins the current thread.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","Returns a new null atomic pointer.",1,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Loads a `Shared` from the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","Returns a copy of the atomic value.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,{"inputs":[{"name":"owned"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,{"inputs":[{"name":"shared"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,null],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,null],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,{"inputs":[{"name":"self"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"into_box","","Converts the owned pointer into a `Box`.",2,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"tag","","Returns the tag stored within the pointer.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"owned"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new owned pointer pointing to `b`.",2,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"borrow","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"null","","Returns a new null pointer.",3,{"inputs":[],"output":{"name":"shared"}}],[11,"is_null","","Returns `true` if the pointer is null.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,null],[11,"deref","","Dereferences the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","Converts the pointer to a reference.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Takes ownership of the pointee.",3,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"tag","","Returns the tag stored within the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"shared"}}],[11,"from","","Returns a new pointer pointing to `raw`.",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new collector.",4,{"inputs":[],"output":{"name":"self"}}],[11,"handle","","Creates a new handle for the collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"clone","","Creates another reference to the same garbage collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pin","","Pins the handle.",5,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin","","Unpins and then immediately re-pins the thread.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",null,null],[10,"success","","The ordering of the operation when it succeeds.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[10,"failure","","The ordering of the operation when it fails.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"]]};
searchIndex["crossbeam_utils"] = {"doc":"","items":[[0,"cache_padded","crossbeam_utils","",null,null],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Pads a value to the length of a cache line.",0,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"atomic_option","crossbeam_utils","",null,null],[3,"AtomicOption","crossbeam_utils::atomic_option","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"swap_box","","",1,{"inputs":[{"name":"self"},{"name":"box"},{"name":"ordering"}],"output":{"generics":["box"],"name":"option"}}],[11,"swap","","",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",1,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[0,"scoped","crossbeam_utils","",null,null],[3,"Scope","crossbeam_utils::scoped","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",null,null],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"generics":["joinhandle"],"name":"result"}}],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",2,{"inputs":[{"name":"self"}],"output":{"name":"scopedthreadbuilder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"scopedthreadbuilder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"scopedthreadbuilder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["scopedjoinhandle"],"name":"result"}}],[11,"join","","Join the scoped thread, returning the result it produced.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",3,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"CachePadded"],[3,"AtomicOption"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"]]};
searchIndex["csv"] = {"doc":"This crate provides a streaming CSV (comma separated values) writer and reader that works with the `serialize` crate to do type based encoding and decoding. There are two primary goals of this project:","items":[[3,"Encoded","csv","A record to be encoded.",null,null],[3,"Decoded","","A record to be decoded.",null,null],[3,"Reader","","A CSV reader.",null,null],[3,"DecodedRecords","","An iterator of decoded records.",null,null],[3,"StringRecords","","An iterator of `String` records.",null,null],[3,"ByteRecords","","An iterator of `ByteString` records.",null,null],[3,"Writer","","A CSV writer.",null,null],[3,"LocatableError","","An error tagged with a location at which it occurred.",null,null],[12,"record","","The record number (starting at 1).",0,null],[12,"field","","The field number (starting at 1).",0,null],[12,"err","","The error.",0,null],[4,"NextField","","NextField is the result of parsing a single CSV field.",null,null],[13,"Data","","A single CSV field as a borrowed slice of the parser's internal buffer.",1,null],[13,"Error","","A CSV error found during parsing. When an error is found, it is first returned. All subsequent calls of `next_bytes` will return `EndOfCsv`. (EOF is exempt from this. Depending on the state of the parser, an EOF could trigger `Data`, `EndOfRecord` and `EndOfCsv`, all in succession.)",1,null],[13,"EndOfRecord","","Indicates the end of a record.",1,null],[13,"EndOfCsv","","Indicates the end of the CSV data. Once this state is entered, the parser can never leave it.",1,null],[4,"RecordTerminator","","A record terminator.",null,null],[13,"CRLF","","Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.",2,null],[13,"Any","","Parses the byte given as a record terminator.",2,null],[4,"QuoteStyle","","The quoting style to use when writing CSV data.",null,null],[13,"Always","","This puts quotes around every field. Always.",3,null],[13,"Necessary","","This puts quotes around fields only when necessary.",3,null],[13,"Never","","This never writes quotes.",3,null],[4,"Error","","An error produced by an operation on CSV data.",null,null],[13,"Encode","","An error reported by the type-based encoder.",4,null],[13,"Decode","","An error reported by the type-based decoder.",4,null],[13,"Parse","","An error reported by the CSV parser.",4,null],[13,"Io","","An error originating from reading or writing to the underlying buffer.",4,null],[13,"Index","","An error originating from using a CSV index.",4,null],[4,"ParseError","","A description of a CSV parse error.",null,null],[13,"UnequalLengths","","A record was found that has a different size than other records.",5,null],[12,"expected","csv::ParseError","Expected a record with this many fields.",5,null],[12,"got","","Got a record with this many fields.",5,null],[13,"InvalidUtf8","csv","An error occurred when trying to convert a field to a Unicode string.",5,null],[0,"index","","This sub-module provides experimental CSV record indexing.",null,null],[3,"Indexed","csv::index","A type for representing CSV data with a basic record index.",null,null],[5,"create_index","","Creates a new index for the given CSV reader.",null,{"inputs":[{"name":"reader"},{"name":"w"}],"output":{"name":"result"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"open","","Opens a new index corresponding to the CSV reader given.",6,{"inputs":[{"name":"reader"},{"name":"i"}],"output":{"generics":["indexed"],"name":"result"}}],[11,"seek","","Seeks to `i`th record.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"count","","Returns the number of CSV records in the index in `O(1)` time.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","csv","Creates a new encodable record. The value returned can be passed to `Encodable::encode`.",7,{"inputs":[],"output":{"name":"encoded"}}],[11,"unwrap","","Once a record has been encoded into this value, `unwrap` can be used to access the raw CSV record.",7,{"inputs":[{"name":"self"}],"output":{"generics":["bytestring"],"name":"vec"}}],[11,"emit_nil","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_usize","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u64","","",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_u32","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u16","","",7,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u8","","",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_isize","","",7,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i64","","",7,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_i32","","",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i16","","",7,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i8","","",7,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_bool","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f64","","",7,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_f32","","",7,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_char","","",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","","Creates a new decodable record from a record of byte strings.",8,{"inputs":[{"generics":["bytestring"],"name":"vec"}],"output":{"name":"decoded"}}],[11,"error","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"error"}}],[11,"read_nil","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_usize","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_u64","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_u32","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_u16","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_u8","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_isize","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[11,"read_i64","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_i32","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_i16","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_i8","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_bool","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"read_f64","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_f32","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_char","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[11,"read_str","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"read_enum","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",8,null],[11,"read_enum_variant_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",8,null],[11,"read_enum_struct_variant_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"recordterminator"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from_reader","","Creates a new CSV reader from an arbitrary `io::Read`.",9,{"inputs":[{"name":"r"}],"output":{"name":"reader"}}],[11,"from_file","","Creates a new CSV reader for the data at the file path given.",9,{"inputs":[{"name":"p"}],"output":{"generics":["reader"],"name":"result"}}],[11,"from_string","","Creates a CSV reader for an in memory string buffer.",9,{"inputs":[{"name":"s"}],"output":{"generics":["cursor"],"name":"reader"}}],[11,"from_bytes","","Creates a CSV reader for an in memory buffer of bytes.",9,{"inputs":[{"name":"v"}],"output":{"generics":["cursor"],"name":"reader"}}],[11,"decode","","Uses type-based decoding to read a single record from CSV data.",9,{"inputs":[{"name":"self"}],"output":{"name":"decodedrecords"}}],[11,"records","","Returns an iterator of records in the CSV data where each field is a `String`.",9,{"inputs":[{"name":"self"}],"output":{"name":"stringrecords"}}],[11,"headers","","Returns a copy of the first record in the CSV data as strings.",9,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"delimiter","","The delimiter to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"has_headers","","Whether to treat the first row as a special header row.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"flexible","","Whether to allow flexible length records when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"record_terminator","","Set the record terminator to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"recordterminator"}],"output":{"name":"reader"}}],[11,"quote","","Set the quote character to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"escape","","Set the escape character to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"option"}],"output":{"name":"reader"}}],[11,"double_quote","","Enable double quote escapes.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"ascii","","A convenience method for reading ASCII delimited text.",9,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter_result","","Transform NextField into an iterator result.",1,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"is_end","","Returns true if and only if the end of CSV data has been reached.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","Returns the underlying field data.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"byte_headers","","This is just like `headers`, except fields are `ByteString`s instead of `String`s.",9,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"byte_records","","This is just like `records`, except fields are `ByteString`s instead of `String`s.",9,{"inputs":[{"name":"self"}],"output":{"name":"byterecords"}}],[11,"done","","Returns `true` if the CSV parser has reached its final state. When this method returns `true`, all iterators will always return `None`.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_bytes","","An iterator over fields in the current record.",9,{"inputs":[{"name":"self"}],"output":{"name":"nextfield"}}],[11,"next_str","","This is just like `next_bytes` except it converts each field to a Unicode string in place.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"nextfield"}}],[11,"byte_offset","","Returns the byte offset at which the current record started.",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"seek","","Seeks the underlying reader to the file cursor specified.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"quotestyle"}}],[11,"from_file","","Creates a new `Writer` that writes CSV data to the file path given.",13,{"inputs":[{"name":"p"}],"output":{"generics":["writer"],"name":"result"}}],[11,"from_writer","","Creates a new CSV writer that writes to the `io::Write` given.",13,{"inputs":[{"name":"w"}],"output":{"name":"writer"}}],[11,"from_buffer","","Creates a new CSV writer that writes to the buffer given.",13,{"inputs":[{"name":"bufwriter"}],"output":{"name":"writer"}}],[11,"from_memory","","Creates a new CSV writer that writes to an in memory buffer. At any time, `as_string` or `as_bytes` can be called to retrieve the cumulative CSV data.",13,{"inputs":[],"output":{"generics":["vec"],"name":"writer"}}],[11,"as_string","","Returns the written CSV data as a string.",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_bytes","","Returns the encoded CSV data as raw bytes.",13,null],[11,"into_string","","Convert the Writer into a string of written CSV data",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"into_bytes","","Convert the Writer into a vector of encoded CSV bytes.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"encode","","Writes a record by encoding any `Encodable` value.",13,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"write","","Writes a record of strings (Unicode or raw bytes).",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"flush","","Flushes the underlying buffer.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delimiter","","The delimiter to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"flexible","","Whether to allow flexible length records when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"writer"}}],[11,"record_terminator","","Sets the record terminator to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"recordterminator"}],"output":{"name":"writer"}}],[11,"quote_style","","Set the quoting style to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"quotestyle"}],"output":{"name":"writer"}}],[11,"quote","","Set the quote character to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"escape","","Set the escape character to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"double_quote","","Set the quoting escape mechanism.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"writer"}}],[6,"Result","","A convenience type for representing the result of most CSV reader/writer operations.",null,null],[6,"ByteString","","A convenience type for referring to a plain byte string.",null,null],[8,"BorrowBytes","","A trait that permits borrowing byte vectors.",null,null],[10,"borrow_bytes","","Borrow a byte vector.",14,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"locatableerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"borrow_bytes","","",15,null]],"paths":[[3,"LocatableError"],[4,"NextField"],[4,"RecordTerminator"],[4,"QuoteStyle"],[4,"Error"],[4,"ParseError"],[3,"Indexed"],[3,"Encoded"],[3,"Decoded"],[3,"Reader"],[3,"DecodedRecords"],[3,"StringRecords"],[3,"ByteRecords"],[3,"Writer"],[8,"BorrowBytes"],[6,"ByteString"]]};
searchIndex["diff"] = {"doc":"","items":[[4,"Result","diff","A fragment of a computed diff.",null,null],[13,"Left","","",0,null],[13,"Both","","",0,null],[13,"Right","","",0,null],[5,"slice","","Computes the diff between two slices.",null,null],[5,"lines","","Computes the diff between the lines of two strings.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["result"],"name":"vec"}}],[5,"chars","","Computes the diff between the chars of two strings.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["result"],"name":"vec"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}]],"paths":[[4,"Result"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["usize"],"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["encode_unicode"] = {"doc":"Miscellaneous UTF-8 and UTF-16 types and methods.","items":[[3,"Utf8Char","encode_unicode","An unicode codepoint stored as UTF-8.",null,null],[3,"Utf16Char","","An unicode codepoint stored as UTF-16.",null,null],[3,"Utf8Iterator","","Read or iterate over the bytes of the UTF-8 representation of a codepoint.",null,null],[3,"Utf16Iterator","","Iterate over the units of the UTF-16 representation of a codepoint.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"utf8char"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8char"}}],[11,"from_str","","The string must contain exactly one codepoint",0,{"inputs":[{"name":"str"}],"output":{"generics":["fromstrerror"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"utf16char"}],"output":{"name":"utf8char"}}],[11,"from","","",0,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"into_iter","","Iterate over the byte values.",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8iterator"}}],[11,"as_ref","","",0,null],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","","",0,null],[11,"borrow","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",0,null],[11,"is_ascii","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq_ignore_ascii_case","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",0,null],[11,"to_ascii_lowercase","","",0,null],[11,"make_ascii_uppercase","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice_start","","Validate the start of a UTF-8 slice and store it. Also returns how many bytes were needed.",0,null],[11,"from_slice_start_unchecked","","A `from_slice_start()` that doesn't validate the codepoint.",0,null],[11,"from_array","","Validate the array and store it.",0,null],[11,"from_array_unchecked","","Unused bytes must be zero",0,null],[11,"len","","Result is 1...4 and identical to `.as_ref().len()` or `.as_char().len_utf8()`. There is no .is_emty() because this type is never empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_char","","Convert from UTF-8 to UTF-32",0,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"to_slice","","Write the internal representation to a slice, and then returns the number of bytes written.",0,null],[11,"to_array","","Expose the internal array and the number of used bytes.",0,null],[11,"as_str","","Return a `str` view of the array the codepoint is stored as. Ns an unambiguous version of `.as_ref()`.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8iterator"}}],[11,"from","","",1,{"inputs":[{"name":"utf8char"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"read","","Always returns Ok",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"utf16char"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"utf16char"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"utf16char"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"utf16char"}}],[11,"from","","",2,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"utf8char"}],"output":{"name":"utf16char"}}],[11,"into_iter","","Iterate over the units.",2,{"inputs":[{"name":"self"}],"output":{"name":"utf16iterator"}}],[11,"as_ref","","",2,null],[11,"borrow","","",2,null],[11,"deref","","",2,null],[11,"is_ascii","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq_ignore_ascii_case","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_ascii_lowercase","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"make_ascii_uppercase","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from_slice_start","","Validate and store the first UTF-16 codepoint in the slice. Also return how many units were needed.",2,null],[11,"from_slice_start_unchecked","","Store the first UTF-16 codepoint of the slice.",2,null],[11,"from_tuple","","Validate and store a UTF-16 pair as returned from `char.to_utf16_tuple()`.",2,null],[11,"from_tuple_unchecked","","Create an `Utf16Char` from a tuple as returned from `char.to_utf16_tuple()`.",2,null],[11,"len","","Returns 1 or 2. There is no `.is_emty()` because it would always return false.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_char","","Convert from UTF-16 to UTF-32",2,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"to_slice","","Write the internal representation to a slice, and then returns the number of `u16`s written.",2,null],[11,"to_tuple","","The second `u16` is used for surrogate pairs.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"utf16iterator"}}],[11,"from","","",3,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"utf16char"}],"output":{"name":"self"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",3,null],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","","Errors returned by various conversion methods in this crate.",null,null],[3,"InvalidUtf16FirstUnit","encode_unicode::error","Cannot tell wether an `u16` needs an extra unit, because it's a trailing surrogate itself.",null,null],[4,"FromStrError","","Reasons why `Utf8Char::from_str()` failed.",null,null],[13,"MultipleCodepoints","","`Utf8Char` cannot store more than a single codepoint.",4,null],[13,"Empty","","`Utf8Char` cannot be empty.",4,null],[4,"InvalidCodepoint","","Reasons why an `u32` is not a valid UTF codepoint.",null,null],[13,"Utf16Reserved","","It's reserved for UTF-16 surrogate pairs.\"",5,null],[13,"TooHigh","","It's higher than the highest codepoint (which is 0x10ffff).",5,null],[4,"InvalidUtf8","","Reasons why a byte sequence is not valid UTF-8, excluding invalid codepoint. In sinking precedence.",null,null],[13,"FirstByte","","Something is wrong with the first byte.",6,null],[13,"NotAContinuationByte","","Thee byte at index 1...3 should be a continuation byte, but dosesn't fit the pattern 0b10xx_xxxx.",6,null],[13,"OverLong","","There are too many leading zeros: it could be a byte shorter.",6,null],[4,"InvalidUtf8FirstByte","","Reasons why a byte is not the start of a UTF-8 codepoint.",null,null],[13,"TooLongSeqence","","Sequences cannot be longer than 4 bytes. Is given for values >= 240.",7,null],[13,"ContinuationByte","","This byte belongs to a previous seqence. Is given for values between 128 and 192 (exclusive).",7,null],[4,"InvalidUtf8Slice","","Reasons why a byte slice is not valid UTF-8, in sinking precedence.",null,null],[13,"Utf8","","Something is certainly wrong with the first byte.",8,null],[13,"Codepoint","","The encoded codepoint is invalid:",8,null],[13,"TooShort","","The slice is too short; n bytes was required.",8,null],[4,"InvalidUtf16Slice","","Reasons why a slice of `u16`s doesn't start with valid UTF-16.",null,null],[13,"EmptySlice","","The slice is empty.",9,null],[13,"FirstLowSurrogate","","The first unit is a low surrogate.",9,null],[13,"MissingSecond","","The first and only unit requires a second unit.",9,null],[13,"SecondNotLowSurrogate","","The first unit requires a second one, but it's not a low surrogate.",9,null],[4,"InvalidUtf8Array","","Reasons why a byte array is not valid UTF-8, in sinking precedence.",null,null],[13,"Utf8","","Not a valid UTF-8 sequence.",10,null],[13,"Codepoint","","Not a valid unicode codepoint.",10,null],[4,"InvalidUtf16Tuple","","Reasons why one or two `u16`s are not valid UTF-16, in sinking precedence.",null,null],[13,"FirstIsTrailingSurrogate","","The first unit is a trailing/low surrogate, which is never valid.",11,null],[13,"SuperfluousSecond","","You provided a second unit, but the first one stands on its own.",11,null],[13,"MissingSecond","","The first and only unit requires a second unit.",11,null],[13,"InvalidSecond","","The first unit requires a second unit, but it's not a trailing/low surrogate.",11,null],[8,"CharExt","encode_unicode","Extension trait for `char` that adds methods for converting to and from UTF-8 or UTF-16.",null,null],[10,"to_utf8","","Get the UTF-8 representation of this codepoint.",12,{"inputs":[{"name":"self"}],"output":{"name":"utf8char"}}],[10,"to_utf16","","Get the UTF-16 representation of this codepoint.",12,{"inputs":[{"name":"self"}],"output":{"name":"utf16char"}}],[10,"iter_utf8_bytes","","Iterate over or read the one to four bytes in the UTF-8 representation of this codepoint.",12,{"inputs":[{"name":"self"}],"output":{"name":"utf8iterator"}}],[10,"iter_utf16_units","","Iterate over the one or two units in the UTF-16 representation of this codepoint.",12,{"inputs":[{"name":"self"}],"output":{"name":"utf16iterator"}}],[10,"to_utf8_array","","Convert this char to an UTF-8 array and lenght,",12,null],[10,"to_utf16_tuple","","Convert this char to UTF-16. The second `u16` is `Some` if a surrogate pair is required.",12,null],[10,"from_utf8_slice_start","","Create a `char` from the start of a UTF-8 slice, and also return how many bytes were used.",12,null],[10,"from_utf16_slice_start","","Create a `char` from the start of a UTF-16 slice, and also return how many units were used.",12,null],[10,"from_utf8_array","","Convert an UTF-8 sequence as returned from `.to_utf8_array()` into a `char`",12,null],[10,"from_utf16_tuple","","Convert a UTF-16 pair as returned from `.to_utf16_tuple()` into a `char`.",12,null],[10,"from_utf8_exact_slice_unchecked","","Convert an UTF-8 sequence into a char. The length of the slice is the length of the sequence, should be 1,2,3 or 4.",12,null],[10,"from_utf16_tuple_unchecked","","Convert a UTF-16 tuple as returned from `.to_utf16_tuple()` into a `char`.",12,null],[10,"from_u32_detailed","","Perform some extra validations compared to `char::from_u32_unchecked()`",12,{"inputs":[{"name":"u32"}],"output":{"generics":["invalidcodepoint"],"name":"result"}}],[8,"U8UtfExt","","Methods for working with `u8`s as UTF-8 bytes.",null,null],[10,"extra_utf8_bytes","","How many more bytes will you need to complete this codepoint?",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize","invalidutf8firstbyte"],"name":"result"}}],[10,"extra_utf8_bytes_unchecked","","How many more bytes will you need to complete this codepoint?",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"U16UtfExt","","Methods for working with `u16`s as UTF-16 units.",null,null],[10,"utf16_needs_extra_unit","","Will you need an extra unit to complete this codepoint?",14,{"inputs":[{"name":"self"}],"output":{"generics":["bool","invalidutf16firstunit"],"name":"result"}}],[10,"is_utf16_leading_surrogate","","Does this `u16` need another `u16` to complete a codepoint? Returns `(self & 0xfc00) == 0xd800`",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","encode_unicode::error","",15,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf16firstunit"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"invalidutf16firstunit"}],"output":{"name":"bool"}}],[11,"description","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"invalidcodepoint"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"invalidcodepoint"}],"output":{"name":"bool"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_range","","Get the range of values for which this error would be given.",5,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf16tuple"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"invalidutf16tuple"}],"output":{"name":"bool"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf16slice"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"invalidutf16slice"}],"output":{"name":"bool"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fromstrerror"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fromstrerror"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf8firstbyte"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"invalidutf8firstbyte"}],"output":{"name":"bool"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf8"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"invalidutf8"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"invalidutf8"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"invalidutf8firstbyte"}],"output":{"name":"invalidutf8"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","Returns `Some` if the error is a `InvalidUtf8FirstByte`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf8array"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"invalidutf8array"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"invalidutf8array"}],"output":{"name":"bool"}}],[11,"from","","",10,{"inputs":[{"name":"invalidutf8"}],"output":{"name":"invalidutf8array"}}],[11,"from","","",10,{"inputs":[{"name":"invalidcodepoint"}],"output":{"name":"invalidutf8array"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","Always returns `Some`.",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf8slice"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"invalidutf8slice"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"invalidutf8slice"}],"output":{"name":"bool"}}],[11,"from","","",8,{"inputs":[{"name":"invalidutf8"}],"output":{"name":"invalidutf8slice"}}],[11,"from","","",8,{"inputs":[{"name":"invalidcodepoint"}],"output":{"name":"invalidutf8slice"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Utf8Char"],[3,"Utf8Iterator"],[3,"Utf16Char"],[3,"Utf16Iterator"],[4,"FromStrError"],[4,"InvalidCodepoint"],[4,"InvalidUtf8"],[4,"InvalidUtf8FirstByte"],[4,"InvalidUtf8Slice"],[4,"InvalidUtf16Slice"],[4,"InvalidUtf8Array"],[4,"InvalidUtf16Tuple"],[8,"CharExt"],[8,"U8UtfExt"],[8,"U16UtfExt"],[3,"InvalidUtf16FirstUnit"]]};
searchIndex["env_logger"] = {"doc":"A simple logger configured via environment variables which writes to stdout or stderr, for use with the logging facade exposed by the [`log` crate][log-crate-url].","items":[[3,"Env","env_logger","Set of environment variables to configure from.",null,null],[3,"Logger","","The env logger.",null,null],[3,"Builder","","`Builder` acts as builder for initializing a `Logger`.",null,null],[5,"try_init","","Attempts to initialize the global logger with an env logger.",null,{"inputs":[],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":null}],[5,"try_init_from_env","","Attempts to initialize the global logger with an env logger from the given environment variables.",null,{"inputs":[{"name":"e"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"init_from_env","","Initializes the global logger with an env logger from the given environment variables.",null,{"inputs":[{"name":"e"}],"output":null}],[0,"filter","","Filtering for log records.",null,null],[3,"Filter","env_logger::filter","A log filter.",null,null],[3,"Builder","","A builder for a log filter.",null,null],[11,"filter","","Returns the maximum `LevelFilter` that this filter instance is configured to output.",0,{"inputs":[{"name":"self"}],"output":{"name":"levelfilter"}}],[11,"matches","","Checks if this record matches the configured filter.",0,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"bool"}}],[11,"enabled","","Determines if a log message with the specified metadata would be logged.",0,{"inputs":[{"name":"self"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"new","","Initializes the filter builder with defaults.",1,{"inputs":[],"output":{"name":"builder"}}],[11,"from_env","","Initializes the filter builder from an environment.",1,{"inputs":[{"name":"str"}],"output":{"name":"builder"}}],[11,"filter_module","","Adds a directive to the filter for a specific module.",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"filter_level","","Adds a directive to the filter for all modules.",1,{"inputs":[{"name":"self"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"filter","","Adds a directive to the filter.",1,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"build","","Build a log filter.",1,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fmt","env_logger","Formatting for log records.",null,null],[3,"Formatter","env_logger::fmt","A formatter to write logs into.",null,null],[3,"Style","","A set of styles to apply to the terminal output.",null,null],[3,"StyledValue","","A value that can be printed using the given styles.",null,null],[3,"Timestamp","","An [RFC3339] formatted timestamp.",null,null],[3,"ParseColorError","","An error from parsing an invalid color specification.",null,null],[4,"Target","","Log target, either `stdout` or `stderr`.",null,null],[13,"Stdout","","Logs will be sent to standard output.",2,null],[13,"Stderr","","Logs will be sent to standard error.",2,null],[4,"WriteStyle","","Whether or not to print styles to the target.",null,null],[13,"Auto","","Try to print styles, but don't force the issue.",3,null],[13,"Always","","Try very hard to print styles.",3,null],[13,"Never","","Never print styles.",3,null],[4,"Color","","The set of available colors for the terminal foreground/background.",null,null],[13,"Black","","",4,null],[13,"Blue","","",4,null],[13,"Green","","",4,null],[13,"Red","","",4,null],[13,"Cyan","","",4,null],[13,"Magenta","","",4,null],[13,"Yellow","","",4,null],[13,"White","","",4,null],[13,"Ansi256","","",4,null],[13,"Rgb","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"writestyle"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"writestyle"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"set_color","","Set the text color.",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"style"}}],[11,"set_bold","","Set the text weight.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"style"}}],[11,"set_intense","","Set the text intensity.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"style"}}],[11,"set_bg","","Set the background color.",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"style"}}],[11,"value","","Wrap a value in the style.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"styledvalue"}}],[11,"style","","Begin a new [`Style`].",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"timestamp","","Get a [`Timestamp`] for the current date and time in UTC.",6,{"inputs":[{"name":"self"}],"output":{"name":"timestamp"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"parsecolorerror"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"parsecolorerror"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"parsecolorerror"}],"output":{"name":"bool"}}],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["color","parsecolorerror"],"name":"result"}}],[11,"fmt","env_logger","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[17,"DEFAULT_FILTER_ENV","","The default name for the environment variable to read filters from.",null,null],[17,"DEFAULT_WRITE_STYLE_ENV","","The default name for the environment variable to read style preferences from.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"builder"}}],[11,"new","","Initializes the log builder with defaults.",11,{"inputs":[],"output":{"name":"builder"}}],[11,"from_env","","Initializes the log builder from the environment.",11,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"from_default_env","","Initializes the log builder from the environment using default variable names.",11,{"inputs":[],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"default_format","","Use the default format.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default_format_level","","Whether or not to write the level in the default format.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"default_format_module_path","","Whether or not to write the module path in the default format.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"default_format_timestamp","","Whether or not to write the timestamp in the default format.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"filter_module","","Adds a directive to the filter for a specific module.",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"filter_level","","Adds a directive to the filter for all modules.",11,{"inputs":[{"name":"self"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"filter","","Adds filters to the logger.",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the `RUST_LOG` environment variable.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"target","","Sets the target for the log output.",11,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"self"}}],[11,"write_style","","Sets whether or not styles will be written.",11,{"inputs":[{"name":"self"},{"name":"writestyle"}],"output":{"name":"self"}}],[11,"parse_write_style","","Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE` environment variable.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"try_init","","Initializes the global logger with the built env logger.",11,{"inputs":[{"name":"self"}],"output":{"generics":["setloggererror"],"name":"result"}}],[11,"init","","Initializes the global logger with the built env logger.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"build","","Build an env logger.",11,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"from_env","","Creates the logger from the environment.",10,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"from_default_env","","Creates the logger from the environment using default variable names.",10,{"inputs":[],"output":{"name":"self"}}],[11,"filter","","Returns the maximum `LevelFilter` that this env logger instance is configured to output.",10,{"inputs":[{"name":"self"}],"output":{"name":"levelfilter"}}],[11,"matches","","Checks if this record matches the configured filter.",10,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"bool"}}],[11,"enabled","","",10,{"inputs":[{"name":"self"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"log","","",10,{"inputs":[{"name":"self"},{"name":"record"}],"output":null}],[11,"flush","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Get a default set of environment variables.",12,{"inputs":[],"output":{"name":"self"}}],[11,"filter","","Specify an environment variable to read the filter from.",12,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"filter_or","","Specify an environment variable to read the filter from.",12,{"inputs":[{"name":"self"},{"name":"e"},{"name":"v"}],"output":{"name":"self"}}],[11,"write_style","","Specify an environment variable to read the style from.",12,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"write_style_or","","Specify an environment variable to read the style from.",12,{"inputs":[{"name":"self"},{"name":"e"},{"name":"v"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}]],"paths":[[3,"Filter"],[3,"Builder"],[4,"Target"],[4,"WriteStyle"],[4,"Color"],[3,"Style"],[3,"Formatter"],[3,"Timestamp"],[3,"StyledValue"],[3,"ParseColorError"],[3,"Logger"],[3,"Builder"],[3,"Env"]]};
searchIndex["errno"] = {"doc":"Cross-platform interface to the `errno` variable.","items":[[3,"Errno","errno","Wraps a platform-specific error code.",null,null],[12,"0","","",0,null],[5,"errno","","Returns the platform-specific value of `errno`.",null,{"inputs":[],"output":{"name":"errno"}}],[5,"set_errno","","Sets the platform-specific value of `errno`.",null,{"inputs":[{"name":"errno"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errno"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Errno"]]};
searchIndex["extprim"] = {"doc":"This crate provides some extra simple types.","items":[[0,"traits","extprim","Traits for conversion between the extra primitive types.",null,null],[3,"Wrapping","extprim::traits","Wrapper for `u128` and `i128` to turn arithmetic operators to wrapping ones.",null,null],[12,"0","","",0,null],[5,"pow","","Raise `base` to the power of `exp`, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"t"}}],[5,"parse_rust_int_lit","","Parses a Rust integer literal into an actual integral type.",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[8,"ToExtraPrimitive","","Trait for converting itself into the extra primitive types.",null,null],[10,"to_u128","","Tries to convert itself into an unsigned 128-bit integer.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[10,"to_i128","","Tries to convert itself into a signed 128-bit integer.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[0,"u128","extprim","Unsigned 128-bit integer.",null,null],[3,"u128","extprim::u128","An unsigned 128-bit number.",null,null],[5,"div_rem","","Computes the divisor and remainder simultaneously. Returns `(a/b, a%b)`.",null,null],[17,"BITS","","Number of bits an unsigned 128-bit number occupies.",null,null],[17,"BYTES","","Number of bytes an unsigned 128-bit number occupies.",null,null],[17,"MIN","","The smallest unsigned 128-bit integer (0).",null,null],[17,"MAX","","The largest unsigned 128-bit integer (`340_282_366_920_938_463_463_374_607_431_768_211_455`).",null,null],[17,"ZERO","","The constant 0.",null,null],[17,"ONE","","The constant 1.",null,null],[11,"default","","",2,{"inputs":[],"output":{"name":"u128"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new 128-bit integer from a 64-bit integer.",2,{"inputs":[{"name":"u64"}],"output":{"name":"u128"}}],[11,"from_built_in","","Constructs a new 128-bit integer from the built-in 128-bit integer.",2,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"from_parts","","Constructs a new 128-bit integer from the high-64-bit and low-64-bit parts.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"low64","","Fetches the lower-64-bit of the number.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"high64","","Fetch the higher-64-bit of the number.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_i128","","Converts this number to signed with wrapping.",2,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"as_built_in","","Converts this number to the built-in 128-bit integer type.",2,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"rand","","",2,{"inputs":[{"name":"r"}],"output":{"name":"u128"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"overflowing_add","","Calculates `self + other`.",2,null],[11,"overflowing_sub","","Calculates `self - other`.",2,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",2,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"self"}}],[11,"add","extprim::traits","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"name":"self"}}],[11,"checked_sub","extprim::u128","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"self"}}],[11,"sub","extprim::traits","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"name":"self"}}],[11,"add_assign","extprim::u128","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"neg","extprim::traits","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"checked_add","extprim::u128","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"saturating_sub","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"not","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","extprim::traits","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand_assign","extprim::u128","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << (shift % 128)`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"wrapping_shr","","Panic-free bitwsie shift-right; yields `self >> (shift % 128)`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"overflowing_shl","","Shifts `self` left by `other` bits.",2,null],[11,"overflowing_shr","","Shifts `self` right by `other` bits.",2,null],[11,"checked_shl","","Checked shift left. Computes `self << other`, returning `None` if the shift is larger than or equal to the number of bits in `self` (128).",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u128"],"name":"option"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shl","extprim::traits","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"checked_shr","extprim::u128","Checked shift right. Computes `self >> other`, returning `None` if the shift is larger than or equal to the number of bits in `self` (128).",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u128"],"name":"option"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","extprim::traits","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl_assign","extprim::u128","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"overflowing_mul","","Calculates the multiplication of `self` and `other`.",2,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_mul_64","","Wrapping (modular) multiplication with a 64-bit number. Computes `self * other`, wrapping around at the boundary of the type.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"overflowing_mul_64","","Calculates the multiplication of `self` and `other` with a 64-bit number.",2,null],[11,"saturating_mul_64","","Saturating integer multiplication with a 64-bit number. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"self"}}],[11,"mul","extprim::traits","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"name":"self"}}],[11,"checked_mul_64","extprim::u128","Checked integer multiplication with a 64-bit number. Computes `self * other`, returning `None` if underflow or overflow occurred.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u128"],"name":"option"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"mul","extprim::traits","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"name":"self"}}],[11,"mul_assign","extprim::u128","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"mul","extprim::traits","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"checked_mul","extprim::u128","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `other`.",2,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `other`.",2,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0`.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0`.",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"div","extprim::traits","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"div_assign","extprim::u128","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"to_i128","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_u128","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"generics":["u128"],"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"generics":["u128"],"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_u128","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_i128","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"min_value","","Returns the smallest unsigned 128-bit integer (0).",2,{"inputs":[],"output":{"name":"u128"}}],[11,"max_value","","Returns the largest unsigned 128-bit integer (`340_282_366_920_938_463_463_374_607_431_768_211_455`).",2,{"inputs":[],"output":{"name":"u128"}}],[11,"zero","","Returns the constant 0.",2,{"inputs":[],"output":{"name":"u128"}}],[11,"one","","Returns the constant 1.",2,{"inputs":[],"output":{"name":"u128"}}],[11,"min_value","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self` (including leading zeros).",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `shift`, wrapping the truncated bits to the end of the resulting integer.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `shift`, wrapping the truncated bits to the beginning of the resulting integer.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_le","","Converts self to little endian from the target's endianness.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pow","","Raises `self` to the power of `exp`, using exponentiation by squaring.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2**k` for some `k`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`. Unspecified behavior on overflow.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `self`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count_ones","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"rotate_right","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"swap_bytes","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_be","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_le","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_be","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_le","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pow","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"signed_shl","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"signed_shr","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"unsigned_shl","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"unsigned_shr","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["u128","parseinterror"],"name":"result"}}],[11,"from_str_radix","","",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["parseinterror"],"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["parseinterror"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sum","","",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"product","","",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"sum","","",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"product","","",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[0,"i128","extprim","Signed 128-bit integer.",null,null],[3,"i128","extprim::i128","An signed 128-bit number.",null,null],[5,"div_rem","","Computes the divisor and remainder simultaneously. Returns `(a/b, a%b)`.",null,null],[17,"BITS","","Number of bits a signed 128-bit number occupies.",null,null],[17,"BYTES","","Number of bytes a signed 128-bit number occupies.",null,null],[17,"MIN","","The smallest signed 128-bit integer (`-170_141_183_460_469_231_731_687_303_715_884_105_728`).",null,null],[17,"MAX","","The largest signed 128-bit integer (`170_141_183_460_469_231_731_687_303_715_884_105_727`).",null,null],[17,"ZERO","","The constant 0.",null,null],[17,"ONE","","The constant 1.",null,null],[11,"default","","",3,{"inputs":[],"output":{"name":"i128"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new 128-bit integer from a 64-bit integer.",3,{"inputs":[{"name":"i64"}],"output":{"name":"i128"}}],[11,"from_built_in","","Constructs a new 128-bit integer from the built-in 128-bit integer.",3,{"inputs":[{"name":"i128"}],"output":{"name":"i128"}}],[11,"from_parts","","Constructs a new 128-bit integer from the high-64-bit and low-64-bit parts.",3,{"inputs":[{"name":"i64"},{"name":"u64"}],"output":{"name":"i128"}}],[11,"low64","","Fetch the lower-64-bit of the number.",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"high64","","Fetch the higher-64-bit of the number.",3,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"as_u128","","Convert this number to unsigned with wrapping.",3,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"as_built_in","","Converts this number to the built-in 128-bit integer type.",3,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"i128"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",3,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"overflowing_add","","Calculates `self + other`.",3,null],[11,"overflowing_sub","","Calculates `self - other`.",3,null],[11,"overflowing_neg","","Negates `self`, overflowing if this is equal to the minimum value.",3,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",3,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_neg","","Saturating integer negation. Computes `-self`, saturating at numeric bounds instead of overflowing.",3,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["i128"],"name":"option"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"self"}}],[11,"add","extprim::traits","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"name":"self"}}],[11,"checked_sub","extprim::i128","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["i128"],"name":"option"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"self"}}],[11,"sub","extprim::traits","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"name":"self"}}],[11,"add_assign","extprim::i128","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"sub_assign","","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"neg","extprim::traits","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"checked_add","extprim::i128","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"saturating_sub","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"ordering"}}],[11,"not","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","extprim::traits","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand_assign","extprim::i128","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"bitor_assign","","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"bitxor_assign","","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << (shift % 128)`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> (shift % 128).",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"overflowing_shl","","Shifts `self` left by `other` bits.",3,null],[11,"overflowing_shr","","Shifts `self` right by `other` bits.",3,null],[11,"checked_shl","","Checked shift left. Computes `self << other`, returning `None` if rhs is larger than or equal to the number of bits in `self` (128).",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i128"],"name":"option"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shl","extprim::traits","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"checked_shr","extprim::i128","Checked shift right. Computes `self >> other`, returning `None` if the shift is larger than or equal to the number of bits in `self` (128).",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i128"],"name":"option"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","extprim::traits","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl_assign","extprim::i128","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"overflowing_mul","","Calculates the multiplication of `self` and `other`.",3,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["i128"],"name":"option"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"self"}}],[11,"mul","extprim::traits","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"name":"self"}}],[11,"mul_assign","extprim::i128","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `other`.",3,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `other`.",3,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["i128"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["i128"],"name":"option"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"div","extprim::traits","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"div_assign","extprim::i128","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"rem_assign","","",3,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"to_i128","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_u128","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"generics":["i128"],"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"generics":["i128"],"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_u128","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_i128","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"min_value","","Returns the smallest signed 128-bit integer (`-170_141_183_460_469_231_731_687_303_715_884_105_728`).",3,{"inputs":[],"output":{"name":"i128"}}],[11,"max_value","","Returns the largest signed 128-bit integer (`170_141_183_460_469_231_731_687_303_715_884_105_727`).",3,{"inputs":[],"output":{"name":"i128"}}],[11,"zero","","Returns the constant 0.",3,{"inputs":[],"output":{"name":"i128"}}],[11,"one","","Returns the constant 1.",3,{"inputs":[],"output":{"name":"i128"}}],[11,"min_value","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `shift`, wrapping the truncated bits to the end of the resulting integer.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `shift`, wrapping the truncated bits to the end of the resulting integer.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",3,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_le","","Converts self to little endian from the target's endianness.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pow","","Raises `self` to the power of `exp`, using exponentiation by squaring.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"count_ones","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"rotate_right","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"swap_bytes","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_be","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_le","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_be","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_le","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pow","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"signed_shl","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"signed_shr","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"unsigned_shl","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"unsigned_shr","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"abs","","Computes the absolute value of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"signum","","Returns a number representing sign of `self`.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative. # Examples",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive. # Examples",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["i128","parseinterror"],"name":"result"}}],[11,"from_str_radix","","",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["parseinterror"],"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["i128","parseinterror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sum","","",3,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"product","","",3,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"sum","","",3,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"product","","",3,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from","extprim::u128","",2,{"inputs":[{"name":"t"}],"output":{"generics":["u128"],"name":"option"}}],[11,"from","extprim::i128","",3,{"inputs":[{"name":"t"}],"output":{"generics":["i128"],"name":"option"}}]],"paths":[[3,"Wrapping"],[8,"ToExtraPrimitive"],[3,"u128"],[3,"i128"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["futures"] = {"doc":"Abstractions for asynchronous programming.","items":[[8,"Future","futures","A future represents an asychronous computation that may fail.",null,null],[16,"Item","","A successful value",0,null],[16,"Error","","An error",0,null],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[8,"IntoFuture","","Types that can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",1,null],[16,"Item","","The item that the future may resolve with.",1,null],[16,"Error","","The error that the future may resolve with.",1,null],[10,"into_future","","Consumes this object and produces a future.",1,null],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",null,null],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",2,{"inputs":[{"name":"self"}],"output":{"name":"errinto"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two differently-typed futures to complete.",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"into_stream","","Convert this future into a single element stream.",2,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",2,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",2,{"inputs":[{"name":"self"}],"output":{"name":"flattensink"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",2,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",2,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of a future, passing it on.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",2,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",2,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"recover"}}],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",2,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"withexecutor"}}],[8,"Stream","","A stream of values produced asynchronously.",null,null],[16,"Item","","Values yielded by the stream.",3,null],[16,"Error","","Errors yielded by the stream.",3,null],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",null,null],[11,"next","","Converts this stream into a `Future`.",4,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",4,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",4,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreachconcurrent"}}],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",4,{"inputs":[{"name":"self"}],"output":{"name":"errinto"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",4,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",4,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",4,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"zip","","An adapter for zipping two streams together.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",4,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",4,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"recover"}}],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",5,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",5,null],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be proceeded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",5,null],[10,"poll_flush","","Flush any remaining output from this sink.",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",null,null],[11,"with","","Composes a function in front of the sink.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",6,{"inputs":[{"name":"self"}],"output":{"name":"sinkerrinto"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"close","","Close the sink.",6,{"inputs":[{"name":"self"}],"output":{"name":"close"}}],[11,"fanout","","Fanout items to multiple sinks.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","Flush the sync, processing all pending items.",6,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",6,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",6,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",6,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[4,"Async","","Indicates whether a value is available, or if the current task has been scheduled for later wake-up instead.",null,null],[13,"Ready","","Represents that a value is immediately ready.",7,null],[13,"Pending","","Represents that a value is not ready yet.",7,null],[6,"Poll","","A convenience wrapper for `Result<Async<T>, E>`.",null,null],[4,"Never","","A type with no possible values.",null,null],[0,"channel","","Cross-task communication.",null,null],[0,"oneshot","futures::channel","A channel for sending a single message between asynchronous tasks.",null,null],[3,"Receiver","futures::channel::oneshot","A future for a value that will be provided by another asynchronous task.",null,null],[3,"Sender","","A means of transmitting a single value to another task.",null,null],[5,"channel","","Creates a new one-shot channel for sending values across asynchronous tasks.",null,null],[3,"Canceled","","Error returned from a `Receiver` when the corresponding `Sender` is dropped.",null,null],[0,"mpsc","futures::channel","A multi-producer, single-consumer queue for sending values across asynchronous tasks.",null,null],[3,"Sender","futures::channel::mpsc","The transmission end of a bounded mpsc channel.",null,null],[3,"UnboundedSender","","The transmission end of an unbounded mpsc channel.",null,null],[3,"Receiver","","The receiving end of a bounded mpsc channel.",null,null],[3,"UnboundedReceiver","","The receiving end of an unbounded mpsc channel.",null,null],[3,"SendError","","The error type for `Sender`s used as `Sink`s.",null,null],[3,"TrySendError","","The error type returned from `try_send`.",null,null],[3,"TryRecvError","","The error type returned from `try_next`.",null,null],[5,"channel","","Creates a bounded mpsc channel for communicating between asynchronous tasks.",null,null],[5,"unbounded","","Creates an unbounded mpsc channel for communicating between asynchronous tasks.",null,null],[0,"executor","futures","Task execution.",null,null],[3,"BlockingStream","futures::executor","An iterator which blocks on values from a stream until they become available.",null,null],[3,"Enter","","Represents an executor context.",null,null],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",null,null],[3,"LocalExecutor","","A handle to a `LocalPool` that implements `Executor`.",null,null],[3,"LocalPool","","A single-threaded task pool.",null,null],[3,"Spawn","","A future representing the completion of task spawning.",null,null],[3,"SpawnWithHandle","","A future representing the completion of task spawning, yielding a `JoinHandle` to the spawned task.",null,null],[3,"ThreadPool","","A general-purpose thread pool for scheduling asynchronous tasks.",null,null],[3,"ThreadPoolBuilder","","Thread pool configuration object.",null,null],[3,"JoinHandle","","The type of future returned from the `ThreadPool::spawn` function, which proxies the futures running on the thread pool.",null,null],[5,"block_on","","Run a future to completion on the current thread.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"block_on_stream","","Turn a stream into a blocking iterator.",null,{"inputs":[{"name":"s"}],"output":{"name":"blockingstream"}}],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",null,{"inputs":[],"output":{"generics":["enter","entererror"],"name":"result"}}],[5,"spawn","","Spawn a task onto the default executor.",null,{"inputs":[{"name":"f"}],"output":{"name":"spawn"}}],[5,"spawn_with_handle","","Spawn a task onto the default executor, yielding a `JoinHandle` to the spawned task.",null,{"inputs":[{"name":"f"}],"output":{"name":"spawnwithhandle"}}],[3,"SpawnError","","Provides the reason that an executor was unable to spawn.",null,null],[8,"Executor","","A task executor.",null,null],[10,"spawn","","Spawn the given task, polling it until completion.",8,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Determine whether the executor is able to spawn new tasks.",8,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[0,"future","futures","Asynchronous values.",null,null],[3,"FutureOption","futures::future","A future representing a value which may or may not be present.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[8,"Future","","A future represents an asychronous computation that may fail.",null,null],[16,"Item","","A successful value",0,null],[16,"Error","","An error",0,null],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[8,"IntoFuture","","Types that can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",1,null],[16,"Item","","The item that the future may resolve with.",1,null],[16,"Error","","The error that the future may resolve with.",1,null],[10,"into_future","","Consumes this object and produces a future.",1,null],[5,"err","","Creates a new future that will immediately fail with the given error.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[5,"ok","","Creates a new future that will immediately resolve successfully to the given value.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"result","","Creates a new future that will immediate resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Empty","","A future which is never resolved.",null,null],[3,"Flatten","","Future for the `flatten` combinator.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"ErrInto","","Future for the `err_into` combinator, changing the error type of a future.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"IntoStream","","A type which converts a `Future` into a `Stream` containing a single element.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Lazy","","A future which defers creation of the actual future until the future is `poll`ed.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[4,"Either","","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",9,null],[13,"Right","","A value of type `R`.",9,null],[4,"Loop","","An enum describing whether to `break` or `continue` a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",10,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",10,null],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",null,null],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",2,{"inputs":[{"name":"self"}],"output":{"name":"errinto"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two differently-typed futures to complete.",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"into_stream","","Convert this future into a single element stream.",2,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",2,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",2,{"inputs":[{"name":"self"}],"output":{"name":"flattensink"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",2,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",2,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of a future, passing it on.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",2,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",2,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"recover"}}],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",2,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"withexecutor"}}],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[0,"io","futures","Asynchronous I/O.",null,null],[3,"Error","futures::io","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[3,"Initializer","","A type used to conditionally initialize buffers passed to `AsyncRead` methods, modeled after `std`.",null,null],[3,"IoVec","","A specialized byte slice type for performing vectored I/O operations.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",11,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",11,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",11,null],[13,"ConnectionReset","","The connection was reset by the remote server.",11,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",11,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",11,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",11,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",11,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",11,null],[13,"AlreadyExists","","An entity already exists, often a file.",11,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",11,null],[13,"InvalidInput","","A parameter was incorrect.",11,null],[13,"InvalidData","","Data not valid for the operation were encountered.",11,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",11,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",11,null],[13,"Interrupted","","This operation was interrupted.",11,null],[13,"Other","","Any I/O error not part of this list.",11,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",11,null],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",12,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",12,null],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",12,null],[8,"AsyncWrite","","Write bytes asynchronously.",null,null],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",13,null],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",13,null],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",13,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"poll_close","","Attempt to close the object.",13,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",null,null],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",14,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"copyinto"}}],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"read"}}],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"readexact"}}],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",14,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",14,null],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",null,null],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite` and then return `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"close","","Creates a future which will entirely close this `AsyncWrite` and then return `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"close"}}],[11,"write_all","","Write a `Buf` into this value, returning how many bytes were written. Creates a future that will write the entire contents of the buffer `buf` into this `AsyncWrite`.",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"writeall"}}],[3,"AllowStdIo","","A simple wrapper type which allows types which implement only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",null,null],[3,"Close","","A future used to fully close an I/O object.",null,null],[3,"CopyInto","","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[0,"never","futures","This module contains the `Never` type.",null,null],[0,"prelude","","A \"prelude\" for crates using the `futures` crate.",null,null],[8,"Future","futures::prelude","A future represents an asychronous computation that may fail.",null,null],[16,"Item","","A successful value",0,null],[16,"Error","","An error",0,null],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[8,"IntoFuture","","Types that can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",1,null],[16,"Item","","The item that the future may resolve with.",1,null],[16,"Error","","The error that the future may resolve with.",1,null],[10,"into_future","","Consumes this object and produces a future.",1,null],[8,"Stream","","A stream of values produced asynchronously.",null,null],[16,"Item","","Values yielded by the stream.",3,null],[16,"Error","","Errors yielded by the stream.",3,null],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[4,"Async","","Indicates whether a value is available, or if the current task has been scheduled for later wake-up instead.",null,null],[13,"Ready","","Represents that a value is immediately ready.",7,null],[13,"Pending","","Represents that a value is not ready yet.",7,null],[6,"Poll","","A convenience wrapper for `Result<Async<T>, E>`.",null,null],[4,"Never","","A type with no possible values.",null,null],[0,"task","","Task notification.",null,null],[3,"LocalMap","futures::prelude::task","A map storing task-local data.",null,null],[8,"Wake","","A way of waking up a specific task.",null,null],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",16,null],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",null,null],[3,"Context","","Information about the currently-running task.",null,null],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker`.",null,null],[10,"clone_raw","","Creates a new `Waker` from this instance of `UnsafeWake`.",17,{"inputs":[{"name":"self"}],"output":{"name":"waker"}}],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",17,null],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",17,null],[8,"Executor","futures::prelude","A task executor.",null,null],[10,"spawn","","Spawn the given task, polling it until completion.",8,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Determine whether the executor is able to spawn new tasks.",8,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",5,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",5,null],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be proceeded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",5,null],[10,"poll_flush","","Flush any remaining output from this sink.",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",12,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",12,null],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",12,null],[8,"AsyncWrite","","Write bytes asynchronously.",null,null],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",13,null],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",13,null],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",13,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"poll_close","","Attempt to close the object.",13,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",null,null],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",2,{"inputs":[{"name":"self"}],"output":{"name":"errinto"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two differently-typed futures to complete.",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"into_stream","","Convert this future into a single element stream.",2,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",2,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",2,{"inputs":[{"name":"self"}],"output":{"name":"flattensink"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",2,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",2,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of a future, passing it on.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",2,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",2,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"recover"}}],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",2,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"withexecutor"}}],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",null,null],[11,"next","","Converts this stream into a `Future`.",4,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",4,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",4,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreachconcurrent"}}],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",4,{"inputs":[{"name":"self"}],"output":{"name":"errinto"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",4,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",4,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",4,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"zip","","An adapter for zipping two streams together.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",4,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",4,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"recover"}}],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",null,null],[11,"with","","Composes a function in front of the sink.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",6,{"inputs":[{"name":"self"}],"output":{"name":"sinkerrinto"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"close","","Close the sink.",6,{"inputs":[{"name":"self"}],"output":{"name":"close"}}],[11,"fanout","","Fanout items to multiple sinks.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","Flush the sync, processing all pending items.",6,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",6,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",6,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",6,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",null,null],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",14,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"copyinto"}}],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"read"}}],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"readexact"}}],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",14,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",14,null],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",null,null],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite` and then return `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"close","","Creates a future which will entirely close this `AsyncWrite` and then return `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"close"}}],[11,"write_all","","Write a `Buf` into this value, returning how many bytes were written. Creates a future that will write the entire contents of the buffer `buf` into this `AsyncWrite`.",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"writeall"}}],[0,"sink","futures","Asynchronous sinks.",null,null],[8,"Sink","futures::sink","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",5,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",5,null],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be proceeded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",5,null],[10,"poll_flush","","Flush any remaining output from this sink.",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[3,"Close","","Future for the `close` combinator, which polls the sink until all data has been closed.",null,null],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",null,null],[3,"Flush","","Future for the `flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"SinkErrInto","","A sink combinator to change the error type of a sink.",null,null],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",null,null],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",null,null],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",null,null],[11,"with","","Composes a function in front of the sink.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",6,{"inputs":[{"name":"self"}],"output":{"name":"sinkerrinto"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"close","","Close the sink.",6,{"inputs":[{"name":"self"}],"output":{"name":"close"}}],[11,"fanout","","Fanout items to multiple sinks.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","Flush the sync, processing all pending items.",6,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",6,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",6,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",6,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[3,"Buffer","","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[0,"stream","futures","Asynchronous streams.",null,null],[8,"Stream","futures::stream","A stream of values produced asynchronously.",null,null],[16,"Item","","Values yielded by the stream.",3,null],[16,"Error","","Errors yielded by the stream.",3,null],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"ErrInto","","A stream combinator to change the error type of a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",null,null],[11,"next","","Converts this stream into a `Future`.",4,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",4,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",4,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreachconcurrent"}}],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",4,{"inputs":[{"name":"self"}],"output":{"name":"errinto"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",4,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",4,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",4,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"zip","","An adapter for zipping two streams together.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",4,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",4,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"recover"}}],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"f"}],"output":{"name":"once"}}],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[5,"select_all","","Convert a list of streams into a `Stream` of results from the streams.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"FuturesUnordered","","A set of `Future`s which may complete in any order.",null,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",18,null],[12,"1","","",18,null],[3,"SelectAll","","An unbounded set of streams",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[0,"task","futures","Tools for working with tasks.",null,null],[3,"Context","futures::task","Information about the currently-running task.",null,null],[3,"LocalMap","","A map storing task-local data.",null,null],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",null,null],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker`.",null,null],[10,"clone_raw","","Creates a new `Waker` from this instance of `UnsafeWake`.",17,{"inputs":[{"name":"self"}],"output":{"name":"waker"}}],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",17,null],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",17,null],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[8,"Wake","","A way of waking up a specific task.",null,null],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",16,null],[14,"try_ready","futures","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`.",null,null],[11,"fmt","futures::task","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::prelude","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::task","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::prelude","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::task","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::executor","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","futures::prelude","",23,{"inputs":[{"name":"self"},{"name":"never"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"never"}],"output":{"name":"ordering"}}],[11,"poll","futures::future","",24,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",9,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::prelude","",23,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","never"],"name":"result"}}],[11,"poll","futures::future","",26,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"from","futures::prelude","",7,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"from","futures::task","",19,{"inputs":[{"name":"arc"}],"output":{"name":"waker"}}],[11,"from","futures::future","",26,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[11,"from","","",24,{"inputs":[{"name":"option"}],"output":{"name":"futureoption"}}],[11,"clone","futures::prelude","",7,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"never"}}],[11,"clone","futures::future","",24,{"inputs":[{"name":"self"}],"output":{"name":"futureoption"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"clone","futures::task","",19,{"inputs":[{"name":"self"}],"output":{"name":"waker"}}],[11,"partial_cmp","futures::prelude","",23,{"inputs":[{"name":"self"},{"name":"never"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"poll_next","futures::future","",9,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::prelude","",23,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","never"],"name":"result"}}],[11,"drop","futures::task","",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomicwaker"}}],[11,"fmt","futures::io","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"from","","",28,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"from","","",28,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"from","","",28,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"description","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"partial_cmp","futures::future","",9,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"from","","",9,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"deref_mut","","",9,null],[11,"into","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",9,null],[11,"write","","",9,null],[11,"flush","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"extend","","",9,null],[11,"read","","",9,null],[11,"read_to_end","","",9,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"fold","","",9,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",9,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",9,null],[11,"fill_buf","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"as_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","futures::channel::mpsc","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::channel::oneshot","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::channel::mpsc","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"eq","futures::channel::oneshot","",30,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}],[11,"poll_next","futures::channel::mpsc","",33,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",34,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unboundedsender"}}],[11,"clone","futures::channel::oneshot","",30,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"clone","futures::channel::mpsc","",29,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"poll","futures::channel::oneshot","",37,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","canceled"],"name":"result"}}],[11,"description","futures::channel::mpsc","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","futures::channel::oneshot","",30,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","futures::channel::mpsc","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",33,null],[11,"drop","","",36,null],[11,"drop","futures::channel::oneshot","",37,null],[11,"drop","","",38,null],[11,"fmt","futures::channel::mpsc","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::channel::oneshot","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::channel::mpsc","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::channel::oneshot","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::channel::mpsc","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::channel::oneshot","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::channel::mpsc","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","futures::executor","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"spawn","","",40,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",41,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"localexecutor"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"poll","","",42,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",43,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","never"],"name":"result"}}],[11,"poll","","",44,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","never"],"name":"result"}}],[11,"drop","","",45,null],[11,"drop","","",40,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_iter","futures::stream","",48,{"inputs":[{"name":"t"}],"output":{"name":"futuresordered"}}],[11,"from_iter","futures::future","",49,{"inputs":[{"name":"t"}],"output":{"name":"joinall"}}],[11,"from_iter","futures::stream","",50,{"inputs":[{"name":"t"}],"output":{"name":"futuresunordered"}}],[11,"hash","futures::io","",51,null],[11,"poll_write","","",51,null],[11,"poll_flush","","",51,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_close","","",51,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_write","","",52,null],[11,"poll_vectored_write","","",52,null],[11,"poll_flush","","",52,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_close","","",52,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"clone","futures::future","",53,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"clone","futures::io","",51,{"inputs":[{"name":"self"}],"output":{"name":"allowstdio"}}],[11,"clone","futures::future","",55,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"read","futures::io","",51,null],[11,"read_to_end","","",51,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","",51,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","",51,null],[11,"as_mut","","",56,null],[11,"description","futures::future","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","futures::stream","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","futures::future","",53,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"fmt","futures::stream","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_read","futures::io","",51,null],[11,"poll_read","","",57,null],[11,"poll_vectored_read","","",57,null],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"ordering"}}],[11,"poll","futures::future","",58,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::sink","",59,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::future","",60,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",61,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",55,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::io","",62,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","futures::future","",63,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::sink","",64,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::future","",65,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::io","",66,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","futures::future","",67,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::io","",68,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","futures::stream","",69,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::future","",70,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::stream","",71,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::future","",72,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",73,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",74,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",75,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",76,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::sink","",77,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::stream","",78,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::io","",79,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",80,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","futures::future","",81,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::io","",82,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","futures::future","",49,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::stream","",83,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::future","",84,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::stream","",85,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",86,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::future","",87,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",88,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::sink","",89,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::future","",90,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",91,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",92,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",93,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",94,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","futures::io","",95,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_ready","futures::stream","",96,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",96,null],[11,"poll_flush","","",96,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",96,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",97,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",97,null],[11,"poll_flush","","",97,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",97,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",98,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",98,null],[11,"poll_flush","","",98,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",98,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",99,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",99,null],[11,"poll_flush","","",99,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",99,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",100,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",100,null],[11,"poll_flush","","",100,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",100,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::sink","",101,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",101,null],[11,"poll_flush","","",101,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",101,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::stream","",102,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",102,null],[11,"poll_flush","","",102,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",102,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::sink","",103,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",103,null],[11,"poll_flush","","",103,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",103,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::stream","",104,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",104,null],[11,"poll_flush","","",104,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",104,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",105,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",105,null],[11,"poll_flush","","",105,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",105,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::sink","",106,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",106,null],[11,"poll_flush","","",106,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",106,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",107,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",107,null],[11,"poll_flush","","",107,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",107,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::stream","",108,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",108,null],[11,"poll_flush","","",108,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",108,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",109,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",109,null],[11,"poll_flush","","",109,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",109,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",110,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",110,null],[11,"poll_flush","","",110,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",110,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",111,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",111,null],[11,"poll_flush","","",111,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",111,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",112,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",112,null],[11,"poll_flush","","",112,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",112,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",113,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",113,null],[11,"poll_flush","","",113,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",113,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",114,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",114,null],[11,"poll_flush","","",114,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",114,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::sink","",115,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",115,null],[11,"poll_flush","","",115,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",115,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::stream","",116,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",116,null],[11,"poll_flush","","",116,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",116,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",117,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",117,null],[11,"poll_flush","","",117,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",117,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",118,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",118,null],[11,"poll_flush","","",118,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",118,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",119,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",119,null],[11,"poll_flush","","",119,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",119,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::sink","",120,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",120,null],[11,"poll_flush","","",120,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",120,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::stream","",121,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",121,null],[11,"poll_flush","","",121,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",121,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","","",122,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",122,null],[11,"poll_flush","","",122,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",122,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"as_ref","futures::io","",56,null],[11,"write","","",51,null],[11,"flush","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","",51,null],[11,"write_fmt","","",51,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"drop","futures::stream","",50,null],[11,"drop","futures::future","",55,null],[11,"fmt","futures::stream","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::io","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::io","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::io","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::sink","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::sink","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::sink","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::io","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::io","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::sink","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::sink","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::sink","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::io","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::sink","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::sink","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::io","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::io","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::io","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::io","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::sink","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::future","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::sink","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","futures::stream","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_next","","",125,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",109,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",98,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::sink","",107,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::stream","",50,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::sink","",115,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::stream","",114,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",105,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::sink","",101,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::stream","",133,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",112,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",136,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",119,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",111,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",135,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",100,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",99,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",124,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",96,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",102,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",129,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",113,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",48,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",128,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",137,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",110,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",117,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",104,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",108,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::future","",134,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::stream","",126,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",130,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",131,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::sink","",103,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::stream","",132,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",127,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",121,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::future","",123,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::sink","",106,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","futures::stream","",122,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",116,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",118,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","futures::io","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref_mut","","",139,null],[11,"deref","","",139,null],[11,"poll_ready","futures::channel::mpsc","",36,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_flush","","",36,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",36,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::future","",9,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",9,null],[11,"poll_flush","","",9,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",9,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_ready","futures::channel::mpsc","",35,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_flush","","",35,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",35,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"map","futures::prelude","Change the success value of this `Async` with the closure provided",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pending","","Returns whether this is `Async::Pending`",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"never_into","","Convert the `Never` type into any other type.",23,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"close","futures::channel::oneshot","Gracefully close this receiver, preventing any subsequent attempts to send to it.",37,null],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",37,{"inputs":[{"name":"self"}],"output":{"generics":["option","canceled"],"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether its associated `Receiver` with has been dropped.",38,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","never"],"name":"result"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has been dropped.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_send","futures::channel::mpsc","Attempts to send a message on this `Sender`, returning the message if there was an error.",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["trysenderror"],"name":"result"}}],[11,"start_send","","Send a message on the channel.",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"poll_ready","","Polls the channel to determine if there is guaranteed capacity to send at least one item without waiting.",36,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","senderror"],"name":"result"}}],[11,"is_closed","","Returns whether this channel is closed without needing a context.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",36,null],[11,"poll_ready","","Check if the channel is ready to receive a message.",35,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","senderror"],"name":"result"}}],[11,"is_closed","","Returns whether this channel is closed without needing a context.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",35,null],[11,"start_send","","Send a message on the channel.",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"unbounded_send","","Sends a message along this channel.",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["trysenderror"],"name":"result"}}],[11,"close","","Closes the receiving half of a channel, without dropping it.",33,null],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",33,{"inputs":[{"name":"self"}],"output":{"generics":["option","tryrecverror"],"name":"result"}}],[11,"close","","Closes the receiving half of the channel, without dropping it.",34,null],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",34,{"inputs":[{"name":"self"}],"output":{"generics":["option","tryrecverror"],"name":"result"}}],[11,"is_full","","Returns true if this error is a result of the channel being full.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","Returns true if this error is a result of the channel being full.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",32,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_send_error","","Drops the message and converts into a `SendError`.",32,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"into_inner","futures::executor","Convert this `BlockingStream` into the inner `Stream` type.",39,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"spawn_local","","Spawn a non-`Send` future onto the associated `LocalPool`.",41,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"new","","Create a new, empty pool of tasks.",140,{"inputs":[],"output":{"name":"localpool"}}],[11,"executor","","Get a clonable handle to the pool as an executor.",140,{"inputs":[{"name":"self"}],"output":{"name":"localexecutor"}}],[11,"run","","Run all tasks in the pool to completion.",140,null],[11,"run_until","","Runs all the tasks in the pool until the given future completes.",140,{"inputs":[{"name":"self"},{"name":"f"},{"name":"executor"}],"output":{"name":"result"}}],[11,"new","","Creates a new thread pool with the default configuration.",40,{"inputs":[],"output":{"generics":["threadpool","error"],"name":"result"}}],[11,"builder","","Create a default thread pool configuration, which can then be customized.",40,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"run","","Runs the given future with this thread pool as the default executor for spawning tasks.",40,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","","Create a default thread pool configuration.",46,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"pool_size","","Set size of a future ThreadPool",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"stack_size","","Set stack size of threads in the pool.",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"name_prefix","","Set thread name prefix of a future ThreadPool.",46,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"threadpoolbuilder"}}],[11,"after_start","","Execute the closure `f` immediately after each worker thread is started, but before running any tasks on it.",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"threadpoolbuilder"}}],[11,"before_stop","","Execute closure `f` just prior to shutting down each worker thread.",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"threadpoolbuilder"}}],[11,"create","","Create a `ThreadPool` with the given configuration.",46,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","error"],"name":"result"}}],[11,"forget","","Drop this handle without canceling the underlying future.",42,null],[11,"shutdown","","Spawning is failing because the executor has been shut down.",27,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"is_shutdown","","Check whether this error is the `shutdown` error.",27,{"inputs":[],"output":{"name":"bool"}}],[11,"is_left","futures::future","Return true if the value is the `Left` variant.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",9,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",9,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",9,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",9,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",9,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",9,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",9,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",9,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",55,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"new","futures::io","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",28,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",28,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",28,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",28,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",28,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",28,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",28,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",28,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",138,{"inputs":[],"output":{"name":"initializer"}}],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",138,{"inputs":[],"output":{"name":"initializer"}}],[11,"should_initialize","","Indicates if a buffer should be initialized.",138,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"initialize","","Initializes a buffer if necessary.",138,null],[11,"from_bytes","","",139,null],[11,"from_bytes_mut","","",139,null],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",51,{"inputs":[{"name":"t"}],"output":{"name":"allowstdio"}}],[11,"get_ref","","Returns a reference to the contained IO object.",51,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained IO object.",51,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes self and returns the contained IO object.",51,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",56,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",56,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",56,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",56,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",56,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",56,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"new","futures::task","Create an empty set of task-local data.",22,{"inputs":[],"output":{"name":"localmap"}}],[11,"new","","Create an `AtomicWaker`.",21,{"inputs":[],"output":{"name":"atomicwaker"}}],[11,"register","","Registers the waker to be notified on calls to `wake`.",21,null],[11,"wake","","Calls `wake` on the last `Waker` passed to `register`.",21,null],[11,"without_spawn","","Create a new task context without the ability to `spawn`.",25,{"inputs":[{"name":"localmap"},{"name":"waker"}],"output":{"name":"context"}}],[11,"waker","","Get the `Waker` associated with the current task.",25,{"inputs":[{"name":"self"}],"output":{"name":"waker"}}],[11,"with_waker","","Produce a context like the current one, but using the given waker instead.",25,{"inputs":[{"name":"self"},{"name":"waker"}],"output":{"name":"context"}}],[11,"with_locals","","Produce a context like the current one, but using the given task locals instead.",25,{"inputs":[{"name":"self"},{"name":"localmap"}],"output":{"name":"context"}}],[11,"new","","Create a new task context.",25,{"inputs":[{"name":"localmap"},{"name":"waker"},{"name":"executor"}],"output":{"name":"context"}}],[11,"executor","","Get the default executor associated with this task, if any",25,{"inputs":[{"name":"self"}],"output":{"name":"executor"}}],[11,"spawn","","Spawn a future onto the default executor.",25,null],[11,"with_executor","","Produce a context like the current one, but using the given executor instead.",25,{"inputs":[{"name":"self"},{"name":"executor"}],"output":{"name":"context"}}],[11,"new","","Constructs a new `Waker` directly.",19,null],[11,"wake","","Wake up the task associated with this `Waker`.",19,null],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",19,{"inputs":[{"name":"self"},{"name":"waker"}],"output":{"name":"bool"}}],[11,"get_mut","","Access this task-local key.",20,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"get_ref","futures::sink","Get a shared reference to the inner sink. Returns `None` if the sink has already been closed.",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been closed.",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consume the `Close` and return the inner sink. Returns `None` if the sink has already been closed.",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",120,null],[11,"get_ref","","Get a shared reference to the inner sink. Returns `None` if the sink has already been flushed.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been flushed.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consume the `Flush` and return the inner sink. Returns `None` if the sink has already been flushed.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Get a shared reference to the inner sink.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Get a shared reference to the inner sink.",101,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",101,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",101,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Get a shared reference to the inner sink.",106,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",106,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",106,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Get a shared reference to the inner sink.",107,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",107,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",107,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Get a shared reference to the inner sink.",115,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",115,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",115,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Get a shared reference to the inner sink.",103,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",103,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",103,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","futures::stream","Acquires a reference to the underlying stream that this combinator is pulling from.",109,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",109,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",109,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",117,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",117,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",117,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",108,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",108,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",108,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",102,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",102,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",102,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",114,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",114,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",114,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",122,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",122,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",122,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",98,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",98,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",98,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",118,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",118,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",118,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",100,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",100,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",100,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",110,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",110,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",110,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",121,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",96,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",96,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",96,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",104,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",104,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",104,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",119,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",119,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",119,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",112,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",112,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",112,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",99,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",99,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",99,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",105,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",105,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",105,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",111,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",111,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",111,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"new","","Constructs a new, empty `FuturesUnordered`",50,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",50,null],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",50,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",48,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",48,null],[11,"new","","Constructs a new, empty `SelectAll`",135,{"inputs":[],"output":{"name":"selectall"}}],[11,"len","","Returns the number of streams contained in the set.",135,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no streams",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a stream into the set.",135,null],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",97,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",125,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}]],"paths":[[8,"Future"],[8,"IntoFuture"],[8,"FutureExt"],[8,"Stream"],[8,"StreamExt"],[8,"Sink"],[8,"SinkExt"],[4,"Async"],[8,"Executor"],[4,"Either"],[4,"Loop"],[4,"ErrorKind"],[8,"AsyncRead"],[8,"AsyncWrite"],[8,"AsyncReadExt"],[8,"AsyncWriteExt"],[8,"Wake"],[8,"UnsafeWake"],[3,"ReuniteError"],[3,"Waker"],[3,"LocalKey"],[3,"AtomicWaker"],[3,"LocalMap"],[4,"Never"],[3,"FutureOption"],[3,"Context"],[3,"FutureResult"],[3,"SpawnError"],[3,"Error"],[3,"SendError"],[3,"Canceled"],[3,"TryRecvError"],[3,"TrySendError"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"UnboundedSender"],[3,"Sender"],[3,"Receiver"],[3,"Sender"],[3,"BlockingStream"],[3,"ThreadPool"],[3,"LocalExecutor"],[3,"JoinHandle"],[3,"Spawn"],[3,"SpawnWithHandle"],[3,"Enter"],[3,"ThreadPoolBuilder"],[3,"EnterError"],[3,"FuturesOrdered"],[3,"JoinAll"],[3,"FuturesUnordered"],[3,"AllowStdIo"],[3,"WriteHalf"],[3,"SharedItem"],[3,"SharedError"],[3,"Shared"],[3,"Window"],[3,"ReadHalf"],[3,"Join"],[3,"SendAll"],[3,"SelectAll"],[3,"Then"],[3,"CopyInto"],[3,"Select"],[3,"Send"],[3,"MapErr"],[3,"Flush"],[3,"Fuse"],[3,"ReadToEnd"],[3,"Collect"],[3,"Join5"],[3,"Concat"],[3,"SelectOk"],[3,"Join4"],[3,"CatchUnwind"],[3,"ErrInto"],[3,"Lazy"],[3,"Close"],[3,"ForEach"],[3,"ReadExact"],[3,"WriteAll"],[3,"Flatten"],[3,"Close"],[3,"Fold"],[3,"LoopFn"],[3,"StreamFuture"],[3,"Forward"],[3,"Empty"],[3,"Inspect"],[3,"Flush"],[3,"AndThen"],[3,"OrElse"],[3,"Join3"],[3,"PollFn"],[3,"Map"],[3,"Read"],[3,"Skip"],[3,"SplitSink"],[3,"Inspect"],[3,"BufferUnordered"],[3,"Map"],[3,"SinkErrInto"],[3,"Flatten"],[3,"Buffer"],[3,"SkipWhile"],[3,"Buffered"],[3,"SinkMapErr"],[3,"With"],[3,"FilterMap"],[3,"AndThen"],[3,"MapErr"],[3,"Chunks"],[3,"TakeWhile"],[3,"Then"],[3,"ErrInto"],[3,"WithFlatMap"],[3,"OrElse"],[3,"Filter"],[3,"InspectErr"],[3,"Take"],[3,"Fanout"],[3,"Peekable"],[3,"Fuse"],[3,"IntoStream"],[3,"IterResult"],[3,"SplitStream"],[3,"Chain"],[3,"CatchUnwind"],[3,"Zip"],[3,"Empty"],[3,"Once"],[3,"Unfold"],[3,"Repeat"],[3,"PollFn"],[3,"FlattenStream"],[3,"SelectAll"],[3,"IterOk"],[3,"Select"],[3,"Initializer"],[3,"IoVec"],[3,"LocalPool"]]};
searchIndex["futures_async_runtime"] = {"doc":"","items":[],"paths":[]};
searchIndex["futures_channel"] = {"doc":"Asynchronous channels.","items":[[0,"mpsc","futures_channel","A multi-producer, single-consumer queue for sending values across asynchronous tasks.",null,null],[3,"Sender","futures_channel::mpsc","The transmission end of a bounded mpsc channel.",null,null],[3,"UnboundedSender","","The transmission end of an unbounded mpsc channel.",null,null],[3,"Receiver","","The receiving end of a bounded mpsc channel.",null,null],[3,"UnboundedReceiver","","The receiving end of an unbounded mpsc channel.",null,null],[3,"SendError","","The error type for `Sender`s used as `Sink`s.",null,null],[3,"TrySendError","","The error type returned from `try_send`.",null,null],[3,"TryRecvError","","The error type returned from `try_next`.",null,null],[5,"channel","","Creates a bounded mpsc channel for communicating between asynchronous tasks.",null,null],[5,"unbounded","","Creates an unbounded mpsc channel for communicating between asynchronous tasks.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_full","","Returns true if this error is a result of the channel being full.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_full","","Returns true if this error is a result of the channel being full.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_send_error","","Drops the message and converts into a `SendError`.",5,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"try_send","","Attempts to send a message on this `Sender`, returning the message if there was an error.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["trysenderror"],"name":"result"}}],[11,"start_send","","Send a message on the channel.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"poll_ready","","Polls the channel to determine if there is guaranteed capacity to send at least one item without waiting.",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"is_closed","","Returns whether this channel is closed without needing a context.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"poll_ready","","Check if the channel is ready to receive a message.",1,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"is_closed","","Returns whether this channel is closed without needing a context.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"start_send","","Send a message on the channel.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"unbounded_send","","Sends a message along this channel.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["trysenderror"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unboundedsender"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half of a channel, without dropping it.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option","tryrecverror"],"name":"result"}}],[11,"poll_next","","",2,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half of the channel, without dropping it.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",3,{"inputs":[{"name":"self"}],"output":{"generics":["option","tryrecverror"],"name":"result"}}],[11,"poll_next","","",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[0,"oneshot","futures_channel","A channel for sending a single message between asynchronous tasks.",null,null],[3,"Receiver","futures_channel::oneshot","A future for a value that will be provided by another asynchronous task.",null,null],[3,"Sender","","A means of transmitting a single value to another task.",null,null],[3,"Canceled","","Error returned from a `Receiver` when the corresponding `Sender` is dropped.",null,null],[5,"channel","","Creates a new one-shot channel for sending values across asynchronous tasks.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether its associated `Receiver` with has been dropped.",8,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["never"],"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has been dropped.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"close","","Gracefully close this receiver, preventing any subsequent attempts to send to it.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",7,{"inputs":[{"name":"self"}],"output":{"generics":["option","canceled"],"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["canceled"],"name":"poll"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"TryRecvError"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"]]};
searchIndex["futures_core"] = {"doc":"Core traits and types for asynchronous operations in Rust.","items":[[4,"Async","futures_core","Indicates whether a value is available, or if the current task has been scheduled for later wake-up instead.",null,null],[13,"Ready","","Represents that a value is immediately ready.",0,null],[13,"Pending","","Represents that a value is not ready yet.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"map","","Change the success value of this `Async` with the closure provided",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pending","","Returns whether this is `Async::Pending`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[0,"future","","Futures.",null,null],[3,"FutureOption","futures_core::future","A future representing a value which may or may not be present.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[5,"result","","Creates a new future that will immediate resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"ok","","Creates a new future that will immediately resolve successfully to the given value.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"err","","Creates a new future that will immediately fail with the given error.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"futureoption"}}],[11,"poll","","",1,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"from","","",1,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"poll","","",2,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"from","","",2,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[8,"Future","","A future represents an asychronous computation that may fail.",null,null],[16,"Item","","A successful value",3,null],[16,"Error","","An error",3,null],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[8,"IntoFuture","","Types that can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",4,null],[16,"Item","","The item that the future may resolve with.",4,null],[16,"Error","","The error that the future may resolve with.",4,null],[10,"into_future","","Consumes this object and produces a future.",4,null],[0,"stream","futures_core","Asynchronous streams.",null,null],[8,"Stream","futures_core::stream","A stream of values produced asynchronously.",null,null],[16,"Item","","Values yielded by the stream.",5,null],[16,"Error","","Errors yielded by the stream.",5,null],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[0,"task","futures_core","Task notification.",null,null],[3,"Waker","futures_core::task","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",null,null],[3,"Context","","Information about the currently-running task.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",null,null],[3,"LocalMap","","A map storing task-local data.",null,null],[11,"new","","Constructs a new `Waker` directly.",6,null],[11,"wake","","Wake up the task associated with this `Waker`.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",6,{"inputs":[{"name":"self"},{"name":"waker"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",6,{"inputs":[{"name":"arc"}],"output":{"name":"waker"}}],[11,"without_spawn","","Create a new task context without the ability to `spawn`.",7,{"inputs":[{"name":"localmap"},{"name":"waker"}],"output":{"name":"context"}}],[11,"waker","","Get the `Waker` associated with the current task.",7,{"inputs":[{"name":"self"}],"output":{"name":"waker"}}],[11,"with_waker","","Produce a context like the current one, but using the given waker instead.",7,{"inputs":[{"name":"self"},{"name":"waker"}],"output":{"name":"context"}}],[11,"with_locals","","Produce a context like the current one, but using the given task locals instead.",7,{"inputs":[{"name":"self"},{"name":"localmap"}],"output":{"name":"context"}}],[11,"new","","Create a new task context.",7,{"inputs":[{"name":"localmap"},{"name":"waker"},{"name":"executor"}],"output":{"name":"context"}}],[11,"executor","","Get the default executor associated with this task, if any",7,{"inputs":[{"name":"self"}],"output":{"name":"executor"}}],[11,"spawn","","Spawn a future onto the default executor.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"with_executor","","Produce a context like the current one, but using the given executor instead.",7,{"inputs":[{"name":"self"},{"name":"executor"}],"output":{"name":"context"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_mut","","Access this task-local key.",8,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"new","","Create an `AtomicWaker`.",9,{"inputs":[],"output":{"name":"atomicwaker"}}],[11,"register","","Registers the waker to be notified on calls to `wake`.",9,{"inputs":[{"name":"self"},{"name":"waker"}],"output":null}],[11,"wake","","Calls `wake` on the last `Waker` passed to `register`.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker`.",null,null],[10,"clone_raw","","Creates a new `Waker` from this instance of `UnsafeWake`.",10,{"inputs":[{"name":"self"}],"output":{"name":"waker"}}],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",10,{"inputs":[{"name":"self"}],"output":null}],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",10,{"inputs":[{"name":"self"}],"output":null}],[8,"Wake","","A way of waking up a specific task.",null,null],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",11,{"inputs":[{"name":"arc"}],"output":null}],[11,"new","","Create an empty set of task-local data.",12,{"inputs":[],"output":{"name":"localmap"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"executor","futures_core","Executors.",null,null],[3,"SpawnError","futures_core::executor","Provides the reason that an executor was unable to spawn.",null,null],[8,"Executor","","A task executor.",null,null],[10,"spawn","","Spawn the given task, polling it until completion.",13,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Determine whether the executor is able to spawn new tasks.",13,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shutdown","","Spawning is failing because the executor has been shut down.",14,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"is_shutdown","","Check whether this error is the `shutdown` error.",14,{"inputs":[],"output":{"name":"bool"}}],[0,"never","futures_core","Definition and trait implementations for the `Never` type, a stand-in for the `!` type until it becomes stable.",null,null],[4,"Never","futures_core::never","A type with no possible values.",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"never"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"never"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"never"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"never"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"never_into","","Convert the `Never` type into any other type.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",15,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["never","never"],"name":"poll"}}],[11,"poll_next","","",15,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option","never"],"name":"poll"}}],[6,"Poll","futures_core","A convenience wrapper for `Result<Async<T>, E>`.",null,null],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`",null,null]],"paths":[[4,"Async"],[3,"FutureOption"],[3,"FutureResult"],[8,"Future"],[8,"IntoFuture"],[8,"Stream"],[3,"Waker"],[3,"Context"],[3,"LocalKey"],[3,"AtomicWaker"],[8,"UnsafeWake"],[8,"Wake"],[3,"LocalMap"],[8,"Executor"],[3,"SpawnError"],[4,"Never"]]};
searchIndex["futures_executor"] = {"doc":"Built-in executors and related tools.","items":[[3,"BlockingStream","futures_executor","An iterator which blocks on values from a stream until they become available.",null,null],[3,"LocalPool","","A single-threaded task pool.",null,null],[3,"LocalExecutor","","A handle to a `LocalPool` that implements `Executor`.",null,null],[3,"ThreadPool","","A general-purpose thread pool for scheduling asynchronous tasks.",null,null],[3,"ThreadPoolBuilder","","Thread pool configuration object.",null,null],[3,"Enter","","Represents an executor context.",null,null],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",null,null],[3,"Spawn","","A future representing the completion of task spawning.",null,null],[3,"SpawnWithHandle","","A future representing the completion of task spawning, yielding a `JoinHandle` to the spawned task.",null,null],[3,"JoinHandle","","The type of future returned from the `ThreadPool::spawn` function, which proxies the futures running on the thread pool.",null,null],[5,"block_on","","Run a future to completion on the current thread.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"block_on_stream","","Turn a stream into a blocking iterator.",null,{"inputs":[{"name":"s"}],"output":{"name":"blockingstream"}}],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",null,{"inputs":[],"output":{"generics":["enter","entererror"],"name":"result"}}],[5,"spawn","","Spawn a task onto the default executor.",null,{"inputs":[{"name":"f"}],"output":{"name":"spawn"}}],[5,"spawn_with_handle","","Spawn a task onto the default executor, yielding a `JoinHandle` to the spawned task.",null,{"inputs":[{"name":"f"}],"output":{"name":"spawnwithhandle"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"localexecutor"}}],[11,"new","","Create a new, empty pool of tasks.",1,{"inputs":[],"output":{"name":"localpool"}}],[11,"executor","","Get a clonable handle to the pool as an executor.",1,{"inputs":[{"name":"self"}],"output":{"name":"localexecutor"}}],[11,"run","","Run all tasks in the pool to completion.",1,{"inputs":[{"name":"self"},{"name":"executor"}],"output":null}],[11,"run_until","","Runs all the tasks in the pool until the given future completes.",1,{"inputs":[{"name":"self"},{"name":"f"},{"name":"executor"}],"output":{"name":"result"}}],[11,"into_inner","","Convert this `BlockingStream` into the inner `Stream` type.",2,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"spawn","","",0,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn_local","","Spawn a non-`Send` future onto the associated `LocalPool`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new thread pool with the default configuration.",3,{"inputs":[],"output":{"generics":["threadpool","error"],"name":"result"}}],[11,"builder","","Create a default thread pool configuration, which can then be customized.",3,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"run","","Runs the given future with this thread pool as the default executor for spawning tasks.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"spawn","","",3,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a default thread pool configuration.",4,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"pool_size","","Set size of a future ThreadPool",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"stack_size","","Set stack size of threads in the pool.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"name_prefix","","Set thread name prefix of a future ThreadPool.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_start","","Execute the closure `f` immediately after each worker thread is started, but before running any tasks on it.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"before_stop","","Execute closure `f` just prior to shutting down each worker thread.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"create","","Create a `ThreadPool` with the given configuration.",4,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["never"],"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",8,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["never"],"name":"poll"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"forget","","Drop this handle without canceling the underlying future.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",9,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}]],"paths":[[3,"LocalExecutor"],[3,"LocalPool"],[3,"BlockingStream"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"EnterError"],[3,"Enter"],[3,"Spawn"],[3,"SpawnWithHandle"],[3,"JoinHandle"]]};
searchIndex["futures_io"] = {"doc":"Asynchronous I/O","items":[[3,"IoVec","futures_io","A specialized byte slice type for performing vectored I/O operations.",null,null],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",0,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",0,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",0,null],[13,"ConnectionReset","","The connection was reset by the remote server.",0,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",0,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",0,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",0,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",0,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",0,null],[13,"AlreadyExists","","An entity already exists, often a file.",0,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",0,null],[13,"InvalidInput","","A parameter was incorrect.",0,null],[13,"InvalidData","","Data not valid for the operation were encountered.",0,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",0,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",0,null],[13,"Interrupted","","This operation was interrupted.",0,null],[13,"Other","","Any I/O error not part of this list.",0,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",0,null],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[3,"Initializer","","A type used to conditionally initialize buffers passed to `AsyncRead` methods, modeled after `std`.",null,null],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",1,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",1,null],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",1,null],[8,"AsyncWrite","","Write bytes asynchronously.",null,null],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",2,null],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",2,null],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",2,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[10,"poll_close","","Attempt to close the object.",2,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",3,{"inputs":[],"output":{"name":"initializer"}}],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",3,{"inputs":[],"output":{"name":"initializer"}}],[11,"should_initialize","","Indicates if a buffer should be initialized.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"initialize","","Initializes a buffer if necessary.",3,null],[11,"from_bytes","","",4,null],[11,"from_bytes_mut","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"from","","",5,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref_mut","","",4,null],[11,"deref","","",4,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",5,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",5,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",5,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",5,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",5,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",5,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}]],"paths":[[4,"ErrorKind"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"Initializer"],[3,"IoVec"],[3,"Error"]]};
searchIndex["futures_sink"] = {"doc":"Asynchronous sinks","items":[[8,"Sink","futures_sink","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",0,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",0,null],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be proceeded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",0,null],[10,"poll_flush","","Flush any remaining output from this sink.",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}]],"paths":[[8,"Sink"]]};
searchIndex["futures_stable"] = {"doc":"","items":[],"paths":[]};
searchIndex["futures_util"] = {"doc":"Combinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.","items":[[0,"future","futures_util","Futures",null,null],[4,"Either","futures_util::future","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[3,"Empty","","A future which is never resolved.",null,null],[3,"Lazy","","A future which defers creation of the actual future until the future is `poll`ed.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator.",null,null],[3,"FlattenSink","","Future for the `flatten_sink` combinator, flattening a future-of-a-sink to get just the result of the final sink as a sink.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"IntoStream","","A type which converts a `Future` into a `Stream` containing a single element.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"ErrInto","","Future for the `err_into` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"InspectErr","","Do something with the error of a future, passing it on.",null,null],[3,"Recover","","Future for the `recover` combinator, handling errors by converting them into an `Item`, compatible with any error type of the caller's choosing.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"WithExecutor","","Future for the `with_executor` combinator, assigning an executor to be used when spawning other futures.",null,null],[4,"Loop","","An enum describing whether to `break` or `continue` a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",1,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",1,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",4,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_ready","","",8,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",8,null],[11,"poll_flush","","",8,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",8,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",9,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",10,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",11,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",13,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",15,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",19,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",23,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",24,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",25,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",26,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"from_iter","","",26,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",27,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",28,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",29,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"poll","","",29,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",32,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",null,null],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",33,{"inputs":[{"name":"self"}],"output":{"name":"errinto"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two differently-typed futures to complete.",33,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",33,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",33,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",33,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",33,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",33,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"into_stream","","Convert this future into a single element stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",33,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",33,{"inputs":[{"name":"self"}],"output":{"name":"flattensink"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",33,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of a future, passing it on.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",33,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",33,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"recover"}}],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",33,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"withexecutor"}}],[0,"io","futures_util","IO",null,null],[8,"AsyncRead","futures_util::io","Read bytes asynchronously.",null,null],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",34,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",34,null],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",34,null],[8,"AsyncWrite","","Write bytes asynchronously.",null,null],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",35,null],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",35,null],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",35,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"poll_close","","Attempt to close the object.",35,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async","error"],"name":"result"}}],[3,"IoVec","","A specialized byte slice type for performing vectored I/O operations.",null,null],[3,"AllowStdIo","","A simple wrapper type which allows types which implement only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",null,null],[3,"CopyInto","","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"Close","","A future used to fully close an I/O object.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"allowstdio"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",36,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_ref","","Returns a reference to the contained IO object.",36,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained IO object.",36,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes self and returns the contained IO object.",36,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"write","","",36,null],[11,"flush","","",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",36,null],[11,"write_fmt","","",36,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"poll_write","","",36,null],[11,"poll_flush","","",36,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_close","","",36,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"read","","",36,null],[11,"read_to_end","","",36,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","",36,null],[11,"poll_read","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",37,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",38,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",39,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",40,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",41,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_read","","",43,null],[11,"poll_vectored_read","","",43,null],[11,"poll_write","","",44,null],[11,"poll_vectored_write","","",44,null],[11,"poll_flush","","",44,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_close","","",44,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",45,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",45,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",45,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",45,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"as_ref","","",45,null],[11,"as_mut","","",45,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",46,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",null,null],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",47,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"copyinto"}}],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"read"}}],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"readexact"}}],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",47,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",47,null],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",null,null],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite` and then return `self`.",48,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"close","","Creates a future which will entirely close this `AsyncWrite` and then return `self`.",48,{"inputs":[{"name":"self"}],"output":{"name":"close"}}],[11,"write_all","","Write a `Buf` into this value, returning how many bytes were written. Creates a future that will write the entire contents of the buffer `buf` into this `AsyncWrite`.",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"writeall"}}],[0,"stream","futures_util","Streams",null,null],[3,"IterOk","futures_util::stream","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"ErrInto","","A stream combinator to change the error type of a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Recover","","Future for the `recover` combinator, handling errors by converting them into an `Option<Item>`, such that a `None` value terminates the stream. `Recover` is compatible with any error type of the caller's choosing.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"SelectAll","","An unbounded set of streams",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",49,null],[12,"1","","",49,null],[3,"ForEachConcurrent","","A stream combinator which executes a unit closure over each item on a stream concurrently.",null,null],[3,"FuturesUnordered","","A set of `Future`s which may complete in any order.",null,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"f"}],"output":{"name":"once"}}],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"select_all","","Convert a list of streams into a `Stream` of results from the streams.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",50,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",51,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",52,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",53,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",53,null],[11,"poll_flush","","",53,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",53,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",53,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",54,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",55,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",56,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",57,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",57,null],[11,"poll_flush","","",57,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",57,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",57,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",58,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",58,null],[11,"poll_flush","","",58,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",58,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",58,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",59,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",59,null],[11,"poll_flush","","",59,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",59,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",59,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",60,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",61,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_next","","",62,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"poll_ready","","",62,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",62,null],[11,"poll_flush","","",62,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",62,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_ready","","",63,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",63,null],[11,"poll_flush","","",63,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",63,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",63,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",63,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",63,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",63,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",64,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",65,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",65,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",65,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",65,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",65,null],[11,"poll_flush","","",65,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",65,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",65,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",66,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",66,null],[11,"poll_flush","","",66,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",66,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",66,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",67,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",67,null],[11,"poll_flush","","",67,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",67,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",67,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",68,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",68,null],[11,"poll_flush","","",68,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",68,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",68,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",69,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_ready","","",70,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",70,null],[11,"poll_flush","","",70,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",70,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",70,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_ready","","",71,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",71,null],[11,"poll_flush","","",71,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",71,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",71,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",71,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",72,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",73,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",74,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",74,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",74,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",74,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",74,null],[11,"poll_flush","","",74,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",74,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",74,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",75,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",75,null],[11,"poll_flush","","",75,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",75,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",75,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",76,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",76,null],[11,"poll_flush","","",76,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",76,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",76,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",77,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",77,null],[11,"poll_flush","","",77,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",77,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",77,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_ready","","",78,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",78,null],[11,"poll_flush","","",78,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",78,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",78,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",79,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",80,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",81,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",82,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",83,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",83,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",83,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",83,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",83,null],[11,"poll_flush","","",83,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",83,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",83,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",84,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",84,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",84,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_next","","",84,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"poll_ready","","",84,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",84,null],[11,"poll_flush","","",84,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",84,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",85,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_ready","","",86,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",86,null],[11,"poll_flush","","",86,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",86,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_next","","",86,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",87,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",88,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new, empty `SelectAll`",89,{"inputs":[],"output":{"name":"selectall"}}],[11,"len","","Returns the number of streams contained in the set.",89,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no streams",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a stream into the set.",89,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"poll_next","","",89,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",90,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"poll_next","","",90,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",91,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"poll_ready","","",91,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",91,null],[11,"poll_flush","","",91,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",91,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",49,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Constructs a new, empty `FuturesUnordered`",92,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",92,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"poll_next","","",92,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"from_iter","","",92,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",93,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",93,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"poll_next","","",93,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",93,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",null,null],[11,"next","","Converts this stream into a `Future`.",94,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",94,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",94,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",94,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",94,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",94,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",94,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",94,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreachconcurrent"}}],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",94,{"inputs":[{"name":"self"}],"output":{"name":"errinto"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",94,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",94,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",94,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",94,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",94,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",94,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",94,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"zip","","An adapter for zipping two streams together.",94,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",94,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",94,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",94,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",94,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",94,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",94,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"recover"}}],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",94,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",94,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",94,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",94,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[0,"sink","futures_util","Sinks",null,null],[3,"Buffer","futures_util::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[3,"Close","","Future for the `close` combinator, which polls the sink until all data has been closed.",null,null],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",null,null],[3,"Flush","","Future for the `flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"SinkErrInto","","A sink combinator to change the error type of a sink.",null,null],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",null,null],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",null,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink. Returns `None` if the sink has already been closed.",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been closed.",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consume the `Close` and return the inner sink. Returns `None` if the sink has already been closed.",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",95,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll_ready","","",96,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",96,null],[11,"poll_flush","","",96,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",96,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink. Returns `None` if the sink has already been flushed.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been flushed.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consume the `Flush` and return the inner sink. Returns `None` if the sink has already been flushed.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",97,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",98,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",98,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",98,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",98,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",98,null],[11,"poll_flush","","",98,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",98,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",98,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",99,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",99,null],[11,"poll_flush","","",99,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",99,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",99,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",100,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",101,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",102,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",102,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",102,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",102,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_ready","","",102,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",102,null],[11,"poll_flush","","",102,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",102,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",103,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",103,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",103,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_next","","",103,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"poll_ready","","",103,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",103,null],[11,"poll_flush","","",103,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",103,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",104,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",104,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",104,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll_next","","",104,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"poll_ready","","",104,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"start_send","","",104,null],[11,"poll_flush","","",104,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_close","","",104,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",null,null],[11,"with","","Composes a function in front of the sink.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",105,{"inputs":[{"name":"self"}],"output":{"name":"sinkerrinto"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"close","","Close the sink.",105,{"inputs":[{"name":"self"}],"output":{"name":"close"}}],[11,"fanout","","Fanout items to multiple sinks.",105,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","Flush the sync, processing all pending items.",105,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",105,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",105,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",105,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",105,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[0,"prelude","futures_util","Prelude containing the extension traits, which add functionality to existing asynchronous types.",null,null],[11,"is_left","futures_util::future","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_next","","",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"deref_mut","","",0,null],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"extend","","",0,null],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",0,null],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref_mut","futures_util::io","",106,null],[11,"deref","","",106,null],[11,"poll_ready","futures_util::future","",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",0,null],[11,"poll_flush","","",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_close","","",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["async"],"name":"result"}}],[11,"from_bytes","futures_util::io","",106,null],[11,"from_bytes_mut","","",106,null]],"paths":[[4,"Either"],[4,"Loop"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenSink"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"ErrInto"],[3,"OrElse"],[3,"Select"],[3,"Then"],[3,"Inspect"],[3,"InspectErr"],[3,"Recover"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[3,"WithExecutor"],[8,"FutureExt"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"AllowStdIo"],[3,"CopyInto"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"Close"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[3,"WriteAll"],[8,"AsyncReadExt"],[8,"AsyncWriteExt"],[3,"ReuniteError"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"ErrInto"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Recover"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"ForEachConcurrent"],[3,"SelectAll"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[8,"StreamExt"],[3,"Close"],[3,"Fanout"],[3,"Flush"],[3,"SinkErrInto"],[3,"SinkMapErr"],[3,"Send"],[3,"SendAll"],[3,"With"],[3,"WithFlatMap"],[3,"Buffer"],[8,"SinkExt"],[3,"IoVec"]]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a vector of matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is encountered, stop considering any remaining arguments as flags.",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform to the expected format. Use the `Debug` implementation to output detailed information.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",5,{"inputs":[],"output":{"name":"options"}}],[11,"parsing_style","","Set the parsing style.",5,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"options"}}],[11,"long_only","","Set or clear \"long options only\" mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"options"}}],[11,"opt","","Create a generic option group, stating all parameters explicitly.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"hasarg"},{"name":"occur"}],"output":{"name":"options"}}],[11,"optflag","","Create a long option that is optional and does not take an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagmulti","","Create a long option that can occur more than once and does not take an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur multiple times.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optopt","","Create a long option that is optional and takes an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"reqopt","","Create a long option that is required and takes an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"parse","","Parse command line arguments according to the provided options.",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"result"}}],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"usage","","Derive a formatted message from a set of options.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"usage_with_format","","Derive a custom formatted message from a set of options. The formatted options provided to a closure as an iterator.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"string"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parsingstyle"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hasarg"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"occur"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"opt_defined","","Returns true if an option was defined",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_present","","Returns true if an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_count","","Returns the number of times an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"opts_present","","Returns true if any of several options were matched.",0,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given option.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[3,"Options"]]};
searchIndex["handlebars"] = {"doc":"Handlebars","items":[[3,"Template","handlebars","A handlebars template",null,null],[12,"name","","",0,null],[12,"elements","","",0,null],[12,"mapping","","",0,null],[3,"RenderError","","Error when rendering data on template.",null,null],[12,"desc","","",1,null],[12,"template_name","","",1,null],[12,"line_no","","",1,null],[12,"column_no","","",1,null],[3,"TemplateError","","Error on parsing template.",null,null],[12,"reason","","",2,null],[12,"template_name","","",2,null],[12,"line_no","","",2,null],[12,"column_no","","",2,null],[3,"Handlebars","","The single entry point of your Handlebars templates",null,null],[3,"RenderContext","","The context of a render call",null,null],[12,"writer","","the `Write` where page is generated",3,null],[12,"current_template","","current template name",3,null],[12,"root_template","","root template name",3,null],[12,"disable_escape","","",3,null],[3,"Helper","","Render-time Helper data when using in a helper definition",null,null],[3,"ContextJson","","Json wrapper that holds the Json value and reference path information",null,null],[3,"Decorator","","Render-time Decorator data when using in a decorator definition",null,null],[3,"Context","","The context wrap data you render on your templates.",null,null],[4,"TemplateFileError","","",null,null],[13,"TemplateError","","",4,null],[13,"IOError","","",4,null],[4,"TemplateRenderError","","",null,null],[13,"TemplateError","","",5,null],[13,"RenderError","","",5,null],[13,"IOError","","",5,null],[5,"no_escape","","`EscapeFn` that do not change any thing. Useful when using in a non-html environment.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"html_escape","","The default escape fn replaces the characters `&\"<>` with the equivalent html / xml entities.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"to_json","","",null,{"inputs":[{"name":"t"}],"output":{"name":"json"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"template"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"template"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"template"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"bool"}],"output":{"name":"template"}}],[11,"compile","","",0,{"inputs":[{"name":"s"}],"output":{"generics":["template","templateerror"],"name":"result"}}],[11,"compile2","","",0,{"inputs":[{"name":"s"},{"name":"bool"}],"output":{"generics":["template","templateerror"],"name":"result"}}],[11,"compile_with_name","","",0,{"inputs":[{"name":"s"},{"name":"string"},{"name":"bool"}],"output":{"generics":["template","templateerror"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"ioerror"}],"output":{"name":"rendererror"}}],[11,"from","","",1,{"inputs":[{"name":"serdeerror"}],"output":{"name":"rendererror"}}],[11,"new","","",1,{"inputs":[{"name":"t"}],"output":{"name":"rendererror"}}],[11,"with","","",1,{"inputs":[{"name":"e"}],"output":{"name":"rendererror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"templateerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"templateerror"}],"output":{"name":"bool"}}],[11,"of","","",2,{"inputs":[{"name":"templateerrorreason"}],"output":{"name":"templateerror"}}],[11,"at","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"templateerror"}}],[11,"in_template","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"templateerror"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"templateerror"}],"output":{"name":"templatefileerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"templateerror"}],"output":{"name":"templaterendererror"}}],[11,"from","","",5,{"inputs":[{"name":"rendererror"}],"output":{"name":"templaterendererror"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"registry"}}],[11,"source_map_enable","","Enable handlebars template source map",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"register_template_string","","Register a template string",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"generics":["templateerror"],"name":"result"}}],[11,"register_partial","","Register a partial string",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"generics":["templateerror"],"name":"result"}}],[11,"register_template_file","","Register a template from a path",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["templatefileerror"],"name":"result"}}],[11,"register_template_source","","Register a template from `std::io::Read` source",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"read"}],"output":{"generics":["templatefileerror"],"name":"result"}}],[11,"unregister_template","","remove a template from the registry",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"register_helper","","register a helper",6,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["helperdef"],"name":"box"}],"output":{"generics":["box"],"name":"option"}}],[11,"register_decorator","","register a decorator",6,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["directivedef"],"name":"box"}],"output":{"generics":["box"],"name":"option"}}],[11,"register_escape_fn","","Register a new escape fn to be used from now on by this registry.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"unregister_escape_fn","","Restore the default escape fn.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"get_escape_fn","","Get a reference to the current escape fn.",6,{"inputs":[{"name":"self"}],"output":{"name":"fn"}}],[11,"get_template","","Return a registered template,",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["template"],"name":"option"}}],[11,"get_helper","","Return a registered helper",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["box"],"name":"option"}}],[11,"get_decorator","","Return a registered directive, aka decorator",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["box"],"name":"option"}}],[11,"get_templates","","Return all templates registered",6,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"clear_templates","","Unregister all templates",6,{"inputs":[{"name":"self"}],"output":null}],[11,"render","","Render a registered template with some data into a string",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["string","rendererror"],"name":"result"}}],[11,"renderw","","Render a registered template and write some data to the `std::io::Write`",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"},{"name":"write"}],"output":{"generics":["rendererror"],"name":"result"}}],[11,"template_render","","render a template string using current registry without register it",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["string","templaterendererror"],"name":"result"}}],[11,"template_renderw","","render a template string using current registry without register it",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"},{"name":"write"}],"output":{"generics":["templaterendererror"],"name":"result"}}],[11,"template_renderw2","","render a template source using current registry without register it",6,{"inputs":[{"name":"self"},{"name":"read"},{"name":"t"},{"name":"write"}],"output":{"generics":["templaterendererror"],"name":"result"}}],[11,"new","","Create a render context from a `Write`",3,{"inputs":[{"name":"context"},{"name":"hashmap"},{"name":"write"}],"output":{"name":"rendercontext"}}],[11,"derive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rendercontext"}}],[11,"with_context","","",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"rendercontext"}}],[11,"get_partial","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["template"],"name":"option"}}],[11,"set_partial","","",3,{"inputs":[{"name":"self"},{"name":"string"},{"name":"template"}],"output":null}],[11,"get_path","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"set_path","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"get_local_path_root","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"push_local_path_root","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"pop_local_path_root","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"set_local_var","","",3,{"inputs":[{"name":"self"},{"name":"string"},{"name":"json"}],"output":null}],[11,"clear_local_vars","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"promote_local_vars","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"demote_local_vars","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"get_local_var","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["json"],"name":"option"}}],[11,"writer","","",3,{"inputs":[{"name":"self"}],"output":{"name":"write"}}],[11,"push_block_context","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["rendererror"],"name":"result"}}],[11,"pop_block_context","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"evaluate_in_block_context","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["option","rendererror"],"name":"result"}}],[11,"is_current_template","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"context","","",3,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"context_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"register_local_helper","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["helperdef"],"name":"box"}],"output":{"generics":["rc"],"name":"option"}}],[11,"unregister_local_helper","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get_local_helper","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["rc"],"name":"option"}}],[11,"evaluate","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json","rendererror"],"name":"result"}}],[11,"evaluate_absolute","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json","rendererror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","Returns relative path when the value is referenced If the value is from a literal, the path is `None`",7,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"path_root","","Return root level of this path if any",7,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"value","","Returns the value",7,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"name","","Returns helper name",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"params","","Returns all helper params, resolved within the context",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"param","","Returns nth helper param, resolved within the context.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["contextjson"],"name":"option"}}],[11,"hash","","Returns hash, resolved within the context",8,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"hash_get","","Return hash value of a given key, resolved within the context",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["contextjson"],"name":"option"}}],[11,"template","","Returns the default inner template if the helper is a block helper.",8,{"inputs":[{"name":"self"}],"output":{"generics":["template"],"name":"option"}}],[11,"inverse","","Returns the template of `else` branch if any",8,{"inputs":[{"name":"self"}],"output":{"generics":["template"],"name":"option"}}],[11,"is_block","","Returns if the helper is a block one `{{#helper}}{{/helper}}` or not `{{helper 123}}`",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"block_param","","Returns block param if any",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"block_param_pair","","Return block param pair (for example |key, val|) if any",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"name","","Returns helper name",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"params","","Returns all helper params, resolved within the context",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"param","","Returns nth helper param, resolved within the context",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["contextjson"],"name":"option"}}],[11,"hash","","Returns hash, resolved within the context",9,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"hash_get","","Return hash value of a given key, resolved within the context",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["contextjson"],"name":"option"}}],[11,"template","","Returns the default inner template if any",9,{"inputs":[{"name":"self"}],"output":{"generics":["template"],"name":"option"}}],[11,"render","","",0,{"inputs":[{"name":"self"},{"name":"registry"},{"name":"rendercontext"}],"output":{"generics":["rendererror"],"name":"result"}}],[11,"eval","","",0,{"inputs":[{"name":"self"},{"name":"registry"},{"name":"rendercontext"}],"output":{"generics":["rendererror"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"null","","Create a context with null data",10,{"inputs":[],"output":{"name":"context"}}],[11,"wraps","","Create a context with given data",10,{"inputs":[{"name":"t"}],"output":{"generics":["context","rendererror"],"name":"result"}}],[11,"navigate","","Navigate the context with base path and relative path Typically you will set base path to `RenderContext.get_path()` and set relative path to helper argument or so.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"vecdeque"},{"name":"str"}],"output":{"generics":["json","rendererror"],"name":"result"}}],[11,"data","","",10,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"data_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[6,"EscapeFn","","This type represents an escape fn, that is a function who's purpose it is to escape potentially problematic characters in a string.",null,null],[8,"Renderable","","Render trait",null,null],[10,"render","","render into RenderContext's `writer`",11,{"inputs":[{"name":"self"},{"name":"registry"},{"name":"rendercontext"}],"output":{"generics":["rendererror"],"name":"result"}}],[11,"renders","","render into string",11,{"inputs":[{"name":"self"},{"name":"registry"},{"name":"rendercontext"}],"output":{"generics":["string","rendererror"],"name":"result"}}],[8,"Evaluable","","Evaluate directive or decorator",null,null],[10,"eval","","",12,{"inputs":[{"name":"self"},{"name":"registry"},{"name":"rendercontext"}],"output":{"generics":["rendererror"],"name":"result"}}],[8,"HelperDef","","Helper Definition",null,null],[10,"call","","",13,{"inputs":[{"name":"self"},{"name":"helper"},{"name":"registry"},{"name":"rendercontext"}],"output":{"generics":["rendererror"],"name":"result"}}],[8,"DecoratorDef","","Decorator Definition",null,null],[10,"call","","",14,{"inputs":[{"name":"self"},{"name":"directive"},{"name":"registry"},{"name":"rendercontext"}],"output":{"generics":["rendererror"],"name":"result"}}],[8,"JsonRender","","Render Json data with default format",null,null],[10,"render","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"renders","","render into string",11,{"inputs":[{"name":"self"},{"name":"registry"},{"name":"rendercontext"}],"output":{"generics":["string","rendererror"],"name":"result"}}]],"paths":[[3,"Template"],[3,"RenderError"],[3,"TemplateError"],[3,"RenderContext"],[4,"TemplateFileError"],[4,"TemplateRenderError"],[3,"Handlebars"],[3,"ContextJson"],[3,"Helper"],[3,"Decorator"],[3,"Context"],[8,"Renderable"],[8,"Evaluable"],[8,"HelperDef"],[8,"DecoratorDef"],[8,"JsonRender"]]};
searchIndex["humantime"] = {"doc":"Human-friendly time parser and formatter","items":[[3,"FormattedDuration","humantime","A wrapper type that allows you to Display a Duration",null,null],[3,"Duration","","A wrapper for duration that has `FromStr` implementation",null,null],[3,"Timestamp","","A wrapper for SystemTime that has `FromStr` implementation",null,null],[3,"Rfc3339Timestamp","","A wrapper type that allows you to Display a SystemTime",null,null],[4,"DurationError","","Error parsing human-friendly duration",null,null],[13,"InvalidCharacter","","Invalid character during parsing",0,null],[13,"NumberExpected","","Non-numeric value where number is expected",0,null],[13,"UnknownUnit","","Unit in the number is not one of allowed units",0,null],[13,"NumberOverflow","","The numeric value is too large",0,null],[13,"Empty","","The value was an empty string (or consists only whitespace)",0,null],[4,"TimestampError","","Error parsing datetime (timestamp)",null,null],[13,"OutOfRange","","Numeric component is out of range",1,null],[13,"InvalidDigit","","Bad character where digit is expected",1,null],[13,"InvalidFormat","","Other formatting errors",1,null],[5,"parse_duration","","Parse duration object `1hour 12min 5s`",null,{"inputs":[{"name":"str"}],"output":{"generics":["duration","error"],"name":"result"}}],[5,"format_duration","","Formats duration into a human-readable string",null,{"inputs":[{"name":"duration"}],"output":{"name":"formattedduration"}}],[5,"parse_rfc3339","","Parse RFC3339 timestamp `2018-02-14T00:28:07Z`",null,{"inputs":[{"name":"str"}],"output":{"generics":["systemtime","error"],"name":"result"}}],[5,"parse_rfc3339_weak","","Parse RFC3339-like timestamp `2018-02-14 00:28:07`",null,{"inputs":[{"name":"str"}],"output":{"generics":["systemtime","error"],"name":"result"}}],[5,"format_rfc3339","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",null,{"inputs":[{"name":"systemtime"}],"output":{"name":"rfc3339timestamp"}}],[5,"format_rfc3339_seconds","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",null,{"inputs":[{"name":"systemtime"}],"output":{"name":"rfc3339timestamp"}}],[5,"format_rfc3339_nanos","","Format an RFC3339 timestamp `2018-02-14T00:28:07.000000000Z`",null,{"inputs":[{"name":"systemtime"}],"output":{"name":"rfc3339timestamp"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"timestamp"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stdduration"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stdduration"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stdduration"}}],[11,"from","","",3,{"inputs":[{"name":"stdduration"}],"output":{"name":"duration"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["duration"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"into","","",4,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"from","","",4,{"inputs":[{"name":"systemtime"}],"output":{"name":"timestamp"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["timestamp"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"DurationError"],[4,"TimestampError"],[3,"FormattedDuration"],[3,"Duration"],[3,"Timestamp"],[3,"Rfc3339Timestamp"]]};
searchIndex["interval_heap"] = {"doc":"A double-ended priority queue implemented with an interval heap.","items":[[3,"IntervalHeap","interval_heap","A double-ended priority queue implemented with an interval heap.",null,null],[3,"Iter","","An iterator over an `IntervalHeap` in arbitrary order.",null,null],[3,"IntoIter","","A consuming iterator over an `IntervalHeap` in arbitrary order.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intervalheap"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"intervalheap"}}],[11,"new","","Returns an empty heap ordered according to the natural order of its items.",0,{"inputs":[],"output":{"name":"intervalheap"}}],[11,"with_capacity","","Returns an empty heap with the given capacity and ordered according to the natural order of its items.",0,{"inputs":[{"name":"usize"}],"output":{"name":"intervalheap"}}],[11,"from","","Returns a heap containing all the items of the given vector and ordered according to the natural order of its items.",0,{"inputs":[{"name":"vec"}],"output":{"name":"intervalheap"}}],[11,"with_comparator","","Returns an empty heap ordered according to the given comparator.",0,{"inputs":[{"name":"c"}],"output":{"name":"intervalheap"}}],[11,"with_capacity_and_comparator","","Returns an empty heap with the given capacity and ordered according to the given comparator.",0,{"inputs":[{"name":"usize"},{"name":"c"}],"output":{"name":"intervalheap"}}],[11,"from_vec_and_comparator","","Returns a heap containing all the items of the given vector and ordered according to the given comparator.",0,{"inputs":[{"name":"vec"},{"name":"c"}],"output":{"name":"intervalheap"}}],[11,"iter","","Returns an iterator visiting all items in the heap in arbitrary order.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"min","","Returns a reference to the smallest item in the heap.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","Returns a reference to the greatest item in the heap.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_max","","Returns references to the smallest and greatest items in the heap.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of items the heap can hold without reallocation.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more items to be inserted into the heap.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more items to be inserted into the heap.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Discards as much additional capacity from the heap as possible.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"pop_min","","Removes the smallest item from the heap and returns it.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_max","","Removes the greatest item from the heap and returns it.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the heap.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"into_vec","","Consumes the heap and returns its items as a vector in arbitrary order.",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the heap and returns its items as a vector in sorted (ascending) order.",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of items in the heap.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the heap contains no items.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Removes all items from the heap.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"intervalheap"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}]],"paths":[[3,"IntervalHeap"],[3,"Iter"],[3,"IntoIter"]]};
searchIndex["iovec"] = {"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",null,null],[0,"unix","","IoVec extensions for Unix platforms.",null,null],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",null,null],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",null,null],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",null,null],[11,"from_bytes","","",0,null],[11,"from_bytes_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null]],"paths":[[3,"IoVec"]]};
searchIndex["ipc_channel"] = {"doc":"","items":[[6,"Error","ipc_channel","An error that can be produced during (de)serializing.",null,null],[4,"ErrorKind","","The kind of error that can be produced during a serialization or deserialization.",null,null],[13,"Io","","If the error stems from the reader/writer that is being used during (de)serialization, that error will be stored and returned here.",0,null],[13,"InvalidUtf8Encoding","","Returned if the deserializer attempts to deserialize a string that is not valid utf8",0,null],[13,"InvalidBoolEncoding","","Returned if the deserializer attempts to deserialize a bool that was not encoded as either a 1 or a 0",0,null],[13,"InvalidCharEncoding","","Returned if the deserializer attempts to deserialize a char that is not in the correct format.",0,null],[13,"InvalidTagEncoding","","Returned if the deserializer attempts to deserialize the tag of an enum that is not in the expected ranges",0,null],[13,"DeserializeAnyNotSupported","","Serde has a deserialize_any method that lets the format hint to the object which route to take in deserializing.",0,null],[13,"SizeLimit","","If (de)serializing a message takes more than the provided size limit, this error is returned.",0,null],[13,"SequenceMustHaveLength","","Bincode can not encode sequences of unknown length (like iterators).",0,null],[13,"Custom","","A custom error message from Serde.",0,null],[0,"ipc","","",null,null],[3,"IpcReceiver","ipc_channel::ipc","",null,null],[3,"IpcSender","","",null,null],[3,"IpcReceiverSet","","",null,null],[3,"IpcSharedMemory","","",null,null],[3,"OpaqueIpcMessage","","",null,null],[3,"OpaqueIpcSender","","",null,null],[3,"OpaqueIpcReceiver","","",null,null],[3,"IpcOneShotServer","","",null,null],[3,"IpcBytesReceiver","","",null,null],[3,"IpcBytesSender","","",null,null],[4,"IpcSelectionResult","","",null,null],[13,"MessageReceived","","",1,null],[13,"ChannelClosed","","",1,null],[5,"channel","","",null,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[5,"bytes_channel","","",null,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"recv","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"try_recv","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_opaque","","",2,{"inputs":[{"name":"self"}],"output":{"name":"opaqueipcreceiver"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ipcsender"}}],[11,"connect","","",3,{"inputs":[{"name":"string"}],"output":{"generics":["ipcsender","error"],"name":"result"}}],[11,"send","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_opaque","","",3,{"inputs":[{"name":"self"}],"output":{"name":"opaqueipcsender"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[],"output":{"generics":["ipcreceiverset","error"],"name":"result"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"ipcreceiver"}],"output":{"generics":["u64","error"],"name":"result"}}],[11,"add_opaque","","",4,{"inputs":[{"name":"self"},{"name":"opaqueipcreceiver"}],"output":{"generics":["u64","error"],"name":"result"}}],[11,"select","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"ipcsharedmemory"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"ipcsharedmemory"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"ipcsharedmemory"}],"output":{"name":"bool"}}],[11,"deref","","",5,null],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_bytes","","",5,null],[11,"from_byte","","",5,{"inputs":[{"name":"u8"},{"name":"usize"}],"output":{"name":"ipcsharedmemory"}}],[11,"unwrap","","",1,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"opaqueipcsender"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to","","",7,{"inputs":[{"name":"self"}],"output":{"name":"ipcsender"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[11,"accept","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"recv","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"ipcbytessender"}}],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"send","","",11,null],[0,"platform","ipc_channel","",null,null],[3,"OsIpcOneShotServer","ipc_channel::platform","",null,null],[3,"OsIpcReceiver","","",null,null],[3,"OsIpcReceiverSet","","",null,null],[3,"OsIpcSender","","",null,null],[3,"OsIpcSharedMemory","","",null,null],[3,"OsOpaqueIpcChannel","","",null,null],[4,"OsIpcChannel","","",null,null],[13,"Sender","","",12,null],[13,"Receiver","","",12,null],[4,"OsIpcSelectionResult","","",null,null],[13,"DataReceived","","",13,null],[13,"ChannelClosed","","",13,null],[5,"channel","","",null,{"inputs":[],"output":{"generics":["unixerror"],"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"osipcreceiver"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"osipcreceiver"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"consume","","",14,{"inputs":[{"name":"self"}],"output":{"name":"osipcreceiver"}}],[11,"recv","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["unixerror"],"name":"result"}}],[11,"try_recv","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["unixerror"],"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"osipcsender"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"osipcsender"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"osipcsender"}}],[11,"get_max_fragment_size","","Maximum data size that can be transferred over this channel in a single packet.",15,{"inputs":[],"output":{"name":"usize"}}],[11,"send","","",15,null],[11,"connect","","",15,{"inputs":[{"name":"string"}],"output":{"generics":["osipcsender","unixerror"],"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"osipcchannel"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"osipcchannel"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",16,{"inputs":[],"output":{"generics":["osipcreceiverset","unixerror"],"name":"result"}}],[11,"add","","",16,{"inputs":[{"name":"self"},{"name":"osipcreceiver"}],"output":{"generics":["u64","unixerror"],"name":"result"}}],[11,"select","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["vec","unixerror"],"name":"result"}}],[11,"unwrap","","",13,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"osopaqueipcchannel"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"osopaqueipcchannel"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"to_sender","","",17,{"inputs":[{"name":"self"}],"output":{"name":"osipcsender"}}],[11,"to_receiver","","",17,{"inputs":[{"name":"self"}],"output":{"name":"osipcreceiver"}}],[11,"drop","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",18,{"inputs":[],"output":{"generics":["unixerror"],"name":"result"}}],[11,"accept","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["unixerror"],"name":"result"}}],[11,"drop","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"osipcsharedmemory"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"osipcsharedmemory"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",19,null],[11,"from_byte","","",19,{"inputs":[{"name":"u8"},{"name":"usize"}],"output":{"name":"osipcsharedmemory"}}],[11,"from_bytes","","",19,null],[0,"router","ipc_channel","",null,null],[3,"ROUTER","ipc_channel::router","",null,null],[3,"RouterProxy","","",null,null],[6,"RouterHandler","","",null,null],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"routerproxy"}}],[11,"initialize","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",21,{"inputs":[],"output":{"name":"routerproxy"}}],[11,"add_route","","",21,{"inputs":[{"name":"self"},{"name":"opaqueipcreceiver"},{"name":"routerhandler"}],"output":null}],[11,"route_ipc_receiver_to_mpsc_sender","","A convenience function to route an `IpcReceiver<T>` to an existing `Sender<T>`.",21,{"inputs":[{"name":"self"},{"name":"ipcreceiver"},{"name":"sender"}],"output":null}],[11,"route_ipc_receiver_to_new_mpsc_receiver","","A convenience function to route an `IpcReceiver<T>` to a `Receiver<T>`: the most common use of a `Router`.",21,{"inputs":[{"name":"self"},{"name":"ipcreceiver"}],"output":{"name":"receiver"}}],[11,"fmt","ipc_channel","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}]],"paths":[[4,"ErrorKind"],[4,"IpcSelectionResult"],[3,"IpcReceiver"],[3,"IpcSender"],[3,"IpcReceiverSet"],[3,"IpcSharedMemory"],[3,"OpaqueIpcMessage"],[3,"OpaqueIpcSender"],[3,"OpaqueIpcReceiver"],[3,"IpcOneShotServer"],[3,"IpcBytesReceiver"],[3,"IpcBytesSender"],[4,"OsIpcChannel"],[4,"OsIpcSelectionResult"],[3,"OsIpcReceiver"],[3,"OsIpcSender"],[3,"OsIpcReceiverSet"],[3,"OsOpaqueIpcChannel"],[3,"OsIpcOneShotServer"],[3,"OsIpcSharedMemory"],[3,"ROUTER"],[3,"RouterProxy"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`. Contains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted, only yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted, only yielding a value from the parameter iterator.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"concat","","Combine all an iterator's elements into one element by using `Extend`.",null,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"inputs":[{"name":"i"}],"output":{"name":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"generics":["diff"],"name":"option"}}],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"kmergeby"}}],[5,"process_results","","“Lift” a function of the values of an iterator so that it can process an iterator of `Result` values instead.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"inputs":[{"name":"f"}],"output":{"name":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"iterate"}}],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",null,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"inputs":[{"name":"i"}],"output":{"name":"putback"}}],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",null,{"inputs":[{"name":"i"}],"output":{"name":"putbackn"}}],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[5,"equal","","Return `true` if both iterators produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same semantics as equal(a, b).",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Positions","","An iterator adapter to get the positions of each element that matches a predicate.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"ProcessResults","","An iterator that produces only the `T` values as long as the inner iterator produces `Ok(T)`.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces n repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"multipeek"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reset_peek","","Reset the peeking “cursor”",8,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"putback"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_value","","put back value `value` (builder method)",11,null],[11,"into_parts","","Split the `PutBack` into its parts.",11,null],[11,"put_back","","Put back a single value to the front of the iterator.",11,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"all","","",11,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"bool"}}],[11,"fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"putbackn"}}],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",12,null],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"fold","","",13,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"batching"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"step"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"fold","","",19,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"uniqueby"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"fold","","",29,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"fold","","",29,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"fold","","",29,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"fold","","",29,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"fold","","",29,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"fold","","",29,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"clone","itertools","",2,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools::structs","",39,{"inputs":[{"name":"self"}],"output":{"name":"padusing"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peeking_next","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"peeking_next","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rciter"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unfold"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"iterate"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",47,{"inputs":[{"name":"self"}],"output":{"name":"tuplebuffer"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","itertools::structs","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"ziplongest"}}],[11,"next","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next_back","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",4,{"inputs":[{"name":"self"}],"output":{"name":"eitherorboth"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","itertools::structs","",52,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"new","","Deprecated: renamed to multizip",52,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[11,"from","","",52,null],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"from","","",52,null],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"from","","",52,null],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"from","","",52,null],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"from","","",52,null],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"from","","",52,null],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"from","","",52,null],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"from","","",52,null],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both have run out.",54,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until at least one of them has run out.",54,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",54,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",54,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",54,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"chunks","","Return an iterable that can chunk the iterator.",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",54,{"inputs":[{"name":"self"}],"output":{"name":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",54,{"inputs":[{"name":"self"}],"output":{"name":"tuples"}}],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",54,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",54,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",54,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",54,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"kmergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",54,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"product"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",54,{"inputs":[{"name":"self"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",54,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and takes items while the closure `accept` returns `true`.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",54,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",54,{"inputs":[{"name":"self"}],"output":{"name":"tuplecombinations"}}],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",54,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",54,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",54,{"inputs":[{"name":"self"}],"output":{"name":"withposition"}}],[11,"positions","","Return an iterator adaptor that yields the indices of all elements satisfying a predicate, counted from the start of the iterator.",54,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"positions"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",54,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"all_equal","","Check whether all elements compare equal.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"concat","","Combine all an iterator's elements into one element by using `Extend`.",54,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",54,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",54,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",54,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",54,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",54,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",54,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",54,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",54,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",54,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"foldwhile"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Return the value in the continue or done.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_done","","Return true if `self` is `Done`, false if it is `Continue`.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"deref_mut","","",0,null],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"extend","","",0,null],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",0,null],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiPeek"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Combinations"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"MapResults"],[3,"Positions"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","Write integer to an `io::Write`.",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[5,"fmt","","Write integer to an `fmt::Write`.",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",null,null]],"paths":[]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["lalrpop_util"] = {"doc":"","items":[[3,"ErrorRecovery","lalrpop_util","",null,null],[12,"error","","",0,null],[12,"dropped_tokens","","",0,null],[4,"ParseError","","",null,null],[13,"InvalidToken","","Generated by the parser when it encounters a token (or EOF) it did not expect.",1,null],[12,"location","lalrpop_util::ParseError","",1,null],[13,"UnrecognizedToken","lalrpop_util","Generated by the parser when it encounters a token (or EOF) it did not expect.",1,null],[12,"token","lalrpop_util::ParseError","If this is `Some`, then an unexpected token of type `T` was observed, with a span given by the two `L` values. If this is `None`, then EOF was observed when it was not expected.",1,null],[12,"expected","","The set of expected tokens: these names are taken from the grammar and hence may not necessarily be suitable for presenting to the user.",1,null],[13,"ExtraToken","lalrpop_util","Generated by the parser when it encounters additional, unexpected tokens.",1,null],[12,"token","lalrpop_util::ParseError","",1,null],[13,"User","lalrpop_util","Custom error type.",1,null],[12,"error","lalrpop_util::ParseError","",1,null],[11,"clone","lalrpop_util","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"ordering"}}],[11,"map_location","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"map_token","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"map_error","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errorrecovery"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"ordering"}}]],"paths":[[3,"ErrorRecovery"],[4,"ParseError"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"__lazy_static_create","","",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["lazycell"] = {"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`, but with frozen contents.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with frozen contents.",null,null],[3,"AtomicLazyCell","","A lazily filled `Cell`, with frozen contents.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"lazycell"}}],[11,"new","","Creates a new, empty, `LazyCell`.",0,{"inputs":[],"output":{"name":"lazycell"}}],[11,"fill","","Put a value into this cell.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow_mut","","Borrows the contents of this lazy cell mutably for the duration of the cell itself.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow_with","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"try_borrow_with","","Same as `borrow_with`, but allows the initializing function to fail.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns a copy of the contents of the lazy cell.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"atomiclazycell"}}],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,{"inputs":[],"output":{"name":"atomiclazycell"}}],[11,"fill","","Put a value into this cell.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns a copy of the contents of the lazy cell.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",35,null],[12,"ipi_spec_dst","","",35,null],[12,"ipi_addr","","",35,null],[3,"dirent","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"dirent64","","",null,null],[12,"d_ino","","",37,null],[12,"d_off","","",37,null],[12,"d_reclen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",38,null],[12,"rlim_max","","",38,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",39,null],[12,"gl_pathv","","",39,null],[12,"gl_offs","","",39,null],[12,"gl_flags","","",39,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",40,null],[12,"ifa_name","","",40,null],[12,"ifa_flags","","",40,null],[12,"ifa_addr","","",40,null],[12,"ifa_netmask","","",40,null],[12,"ifa_ifu","","",40,null],[12,"ifa_data","","",40,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",41,null],[12,"pw_passwd","","",41,null],[12,"pw_uid","","",41,null],[12,"pw_gid","","",41,null],[12,"pw_gecos","","",41,null],[12,"pw_dir","","",41,null],[12,"pw_shell","","",41,null],[3,"spwd","","",null,null],[12,"sp_namp","","",42,null],[12,"sp_pwdp","","",42,null],[12,"sp_lstchg","","",42,null],[12,"sp_min","","",42,null],[12,"sp_max","","",42,null],[12,"sp_warn","","",42,null],[12,"sp_inact","","",42,null],[12,"sp_expire","","",42,null],[12,"sp_flag","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[12,"cmd","","",70,null],[12,"version","","",70,null],[12,"reserved","","",70,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",71,null],[12,"ipi6_ifindex","","",71,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",72,null],[12,"aio_lio_opcode","","",72,null],[12,"aio_reqprio","","",72,null],[12,"aio_buf","","",72,null],[12,"aio_nbytes","","",72,null],[12,"aio_sigevent","","",72,null],[12,"aio_offset","","",72,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",73,null],[12,"e_exit","","",73,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",74,null],[12,"tv_usec","","",74,null],[3,"utmpx","","",null,null],[12,"ut_type","","",75,null],[12,"ut_pid","","",75,null],[12,"ut_line","","",75,null],[12,"ut_id","","",75,null],[12,"ut_user","","",75,null],[12,"ut_host","","",75,null],[12,"ut_exit","","",75,null],[12,"ut_session","","",75,null],[12,"ut_tv","","",75,null],[12,"ut_addr_v6","","",75,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",76,null],[12,"sa_mask","","",76,null],[12,"sa_flags","","",76,null],[12,"sa_restorer","","",76,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",77,null],[12,"ss_flags","","",77,null],[12,"ss_size","","",77,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",78,null],[12,"si_errno","","",78,null],[12,"si_code","","",78,null],[12,"_pad","","",78,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",79,null],[12,"gl_pathv","","",79,null],[12,"gl_offs","","",79,null],[12,"gl_flags","","",79,null],[3,"statfs","","",null,null],[12,"f_type","","",80,null],[12,"f_bsize","","",80,null],[12,"f_blocks","","",80,null],[12,"f_bfree","","",80,null],[12,"f_bavail","","",80,null],[12,"f_files","","",80,null],[12,"f_ffree","","",80,null],[12,"f_fsid","","",80,null],[12,"f_namelen","","",80,null],[12,"f_frsize","","",80,null],[3,"msghdr","","",null,null],[12,"msg_name","","",81,null],[12,"msg_namelen","","",81,null],[12,"msg_iov","","",81,null],[12,"msg_iovlen","","",81,null],[12,"msg_control","","",81,null],[12,"msg_controllen","","",81,null],[12,"msg_flags","","",81,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",82,null],[12,"cmsg_level","","",82,null],[12,"cmsg_type","","",82,null],[3,"termios","","",null,null],[12,"c_iflag","","",83,null],[12,"c_oflag","","",83,null],[12,"c_cflag","","",83,null],[12,"c_lflag","","",83,null],[12,"c_line","","",83,null],[12,"c_cc","","",83,null],[12,"c_ispeed","","",83,null],[12,"c_ospeed","","",83,null],[3,"flock","","",null,null],[12,"l_type","","",84,null],[12,"l_whence","","",84,null],[12,"l_start","","",84,null],[12,"l_len","","",84,null],[12,"l_pid","","",84,null],[3,"sem_t","","",null,null],[3,"mallinfo","","",null,null],[12,"arena","","",85,null],[12,"ordblks","","",85,null],[12,"smblks","","",85,null],[12,"hblks","","",85,null],[12,"hblkhd","","",85,null],[12,"usmblks","","",85,null],[12,"fsmblks","","",85,null],[12,"uordblks","","",85,null],[12,"fordblks","","",85,null],[12,"keepcost","","",85,null],[3,"nlmsghdr","","",null,null],[12,"nlmsg_len","","",86,null],[12,"nlmsg_type","","",86,null],[12,"nlmsg_flags","","",86,null],[12,"nlmsg_seq","","",86,null],[12,"nlmsg_pid","","",86,null],[3,"nlmsgerr","","",null,null],[12,"error","","",87,null],[12,"msg","","",87,null],[3,"nl_pktinfo","","",null,null],[12,"group","","",88,null],[3,"nl_mmap_req","","",null,null],[12,"nm_block_size","","",89,null],[12,"nm_block_nr","","",89,null],[12,"nm_frame_size","","",89,null],[12,"nm_frame_nr","","",89,null],[3,"nl_mmap_hdr","","",null,null],[12,"nm_status","","",90,null],[12,"nm_len","","",90,null],[12,"nm_group","","",90,null],[12,"nm_pid","","",90,null],[12,"nm_uid","","",90,null],[12,"nm_gid","","",90,null],[3,"nlattr","","",null,null],[12,"nla_len","","",91,null],[12,"nla_type","","",91,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",92,null],[12,"loads","","",92,null],[12,"totalram","","",92,null],[12,"freeram","","",92,null],[12,"sharedram","","",92,null],[12,"bufferram","","",92,null],[12,"totalswap","","",92,null],[12,"freeswap","","",92,null],[12,"procs","","",92,null],[12,"pad","","",92,null],[12,"totalhigh","","",92,null],[12,"freehigh","","",92,null],[12,"mem_unit","","",92,null],[12,"_f","","",92,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",93,null],[12,"msg_stime","","",93,null],[12,"msg_rtime","","",93,null],[12,"msg_ctime","","",93,null],[12,"msg_qnum","","",93,null],[12,"msg_qbytes","","",93,null],[12,"msg_lspid","","",93,null],[12,"msg_lrpid","","",93,null],[3,"stat","","",null,null],[12,"st_dev","","",94,null],[12,"st_ino","","",94,null],[12,"st_nlink","","",94,null],[12,"st_mode","","",94,null],[12,"st_uid","","",94,null],[12,"st_gid","","",94,null],[12,"st_rdev","","",94,null],[12,"st_size","","",94,null],[12,"st_blksize","","",94,null],[12,"st_blocks","","",94,null],[12,"st_atime","","",94,null],[12,"st_atime_nsec","","",94,null],[12,"st_mtime","","",94,null],[12,"st_mtime_nsec","","",94,null],[12,"st_ctime","","",94,null],[12,"st_ctime_nsec","","",94,null],[3,"stat64","","",null,null],[12,"st_dev","","",95,null],[12,"st_ino","","",95,null],[12,"st_nlink","","",95,null],[12,"st_mode","","",95,null],[12,"st_uid","","",95,null],[12,"st_gid","","",95,null],[12,"st_rdev","","",95,null],[12,"st_size","","",95,null],[12,"st_blksize","","",95,null],[12,"st_blocks","","",95,null],[12,"st_atime","","",95,null],[12,"st_atime_nsec","","",95,null],[12,"st_mtime","","",95,null],[12,"st_mtime_nsec","","",95,null],[12,"st_ctime","","",95,null],[12,"st_ctime_nsec","","",95,null],[3,"statfs64","","",null,null],[12,"f_type","","",96,null],[12,"f_bsize","","",96,null],[12,"f_blocks","","",96,null],[12,"f_bfree","","",96,null],[12,"f_bavail","","",96,null],[12,"f_files","","",96,null],[12,"f_ffree","","",96,null],[12,"f_fsid","","",96,null],[12,"f_namelen","","",96,null],[12,"f_frsize","","",96,null],[12,"f_flags","","",96,null],[12,"f_spare","","",96,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",97,null],[12,"f_frsize","","",97,null],[12,"f_blocks","","",97,null],[12,"f_bfree","","",97,null],[12,"f_bavail","","",97,null],[12,"f_files","","",97,null],[12,"f_ffree","","",97,null],[12,"f_favail","","",97,null],[12,"f_fsid","","",97,null],[12,"f_flag","","",97,null],[12,"f_namemax","","",97,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",98,null],[12,"exponent","","",98,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",99,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",100,null],[12,"swd","","",100,null],[12,"ftw","","",100,null],[12,"fop","","",100,null],[12,"rip","","",100,null],[12,"rdp","","",100,null],[12,"mxcsr","","",100,null],[12,"mxcr_mask","","",100,null],[12,"_st","","",100,null],[12,"_xmm","","",100,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",101,null],[12,"swd","","",101,null],[12,"ftw","","",101,null],[12,"fop","","",101,null],[12,"rip","","",101,null],[12,"rdp","","",101,null],[12,"mxcsr","","",101,null],[12,"mxcr_mask","","",101,null],[12,"st_space","","",101,null],[12,"xmm_space","","",101,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",102,null],[12,"r14","","",102,null],[12,"r13","","",102,null],[12,"r12","","",102,null],[12,"rbp","","",102,null],[12,"rbx","","",102,null],[12,"r11","","",102,null],[12,"r10","","",102,null],[12,"r9","","",102,null],[12,"r8","","",102,null],[12,"rax","","",102,null],[12,"rcx","","",102,null],[12,"rdx","","",102,null],[12,"rsi","","",102,null],[12,"rdi","","",102,null],[12,"orig_rax","","",102,null],[12,"rip","","",102,null],[12,"cs","","",102,null],[12,"eflags","","",102,null],[12,"rsp","","",102,null],[12,"ss","","",102,null],[12,"fs_base","","",102,null],[12,"gs_base","","",102,null],[12,"ds","","",102,null],[12,"es","","",102,null],[12,"fs","","",102,null],[12,"gs","","",102,null],[3,"user","","",null,null],[12,"regs","","",103,null],[12,"u_fpvalid","","",103,null],[12,"i387","","",103,null],[12,"u_tsize","","",103,null],[12,"u_dsize","","",103,null],[12,"u_ssize","","",103,null],[12,"start_code","","",103,null],[12,"start_stack","","",103,null],[12,"signal","","",103,null],[12,"u_ar0","","",103,null],[12,"u_fpstate","","",103,null],[12,"magic","","",103,null],[12,"u_comm","","",103,null],[12,"u_debugreg","","",103,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",104,null],[12,"fpregs","","",104,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",105,null],[12,"uc_link","","",105,null],[12,"uc_stack","","",105,null],[12,"uc_mcontext","","",105,null],[12,"uc_sigmask","","",105,null],[3,"ipc_perm","","",null,null],[12,"__key","","",106,null],[12,"uid","","",106,null],[12,"gid","","",106,null],[12,"cuid","","",106,null],[12,"cgid","","",106,null],[12,"mode","","",106,null],[12,"__seq","","",106,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",107,null],[12,"shm_segsz","","",107,null],[12,"shm_atime","","",107,null],[12,"shm_dtime","","",107,null],[12,"shm_ctime","","",107,null],[12,"shm_cpid","","",107,null],[12,"shm_lpid","","",107,null],[12,"shm_nattch","","",107,null],[3,"termios2","","",null,null],[12,"c_iflag","","",108,null],[12,"c_oflag","","",108,null],[12,"c_cflag","","",108,null],[12,"c_lflag","","",108,null],[12,"c_line","","",108,null],[12,"c_cc","","",108,null],[12,"c_ispeed","","",108,null],[12,"c_ospeed","","",108,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",109,null],[12,"f_frsize","","",109,null],[12,"f_blocks","","",109,null],[12,"f_bfree","","",109,null],[12,"f_bavail","","",109,null],[12,"f_files","","",109,null],[12,"f_ffree","","",109,null],[12,"f_favail","","",109,null],[12,"f_fsid","","",109,null],[12,"f_flag","","",109,null],[12,"f_namemax","","",109,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"NLA_ALIGN","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"fread_unlocked","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"mallinfo"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"nlmsghdr"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"nlmsgerr"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"nl_pktinfo"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_req"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_hdr"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"nlattr"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawn_file_actions_t"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawnattr_t"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"genlmsghdr"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"in6_pktinfo"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"in_pktinfo"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"]]};
searchIndex["linked_hash_map"] = {"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[0,"serde","","An optional implementation of serialization/deserialization. Reference implementations used:",null,null],[3,"LinkedHashMapVisitor","linked_hash_map::serde","`serde::de::Visitor` for a linked hash map.",null,null],[11,"serialize","linked_hash_map","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"new","linked_hash_map::serde","Creates a new visitor for a linked hash map.",1,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_map","","",1,{"inputs":[{"name":"self"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","linked_hash_map","",0,{"inputs":[{"name":"d"}],"output":{"generics":["linkedhashmap"],"name":"result"}}],[11,"new","","Creates a linked hash map.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",0,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hasher","","Returns a reference to the map's hasher.",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"clear","","Clears the map of all key-value pairs.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",0,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",0,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}]],"paths":[[3,"LinkedHashMap"],[3,"LinkedHashMapVisitor"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Keys"],[3,"Values"]]};
searchIndex["linked_list"] = {"doc":"An alternative implementation of `std::collections::LinkedList`, featuring experimental Cursor-based APIs.","items":[[3,"LinkedList","linked_list","An experimental rewrite of LinkedList to provide a more cursor-oriented API.",null,null],[3,"Cursor","","A Cursor is like an iterator, except that it can freely seek back-and-forth, and can safely mutate the list during iteration. This is because the lifetime of its yielded references are tied to its own lifetime, instead of just the underlying list. This means cursors cannot yield multiple elements at once.",null,null],[3,"Iter","","An iterator over references to the items of a `LinkedList`.",null,null],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator over mutable references to the items of a `LinkedList`.",null,null],[11,"new","","Makes a new LinkedList.",0,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"push_back","","Appends an element to the back of the list.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_front","","Appends an element to the front of the list.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop_back","","Removes the element at back of the list. Returns None if the list is empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the element at front of the list. Returns None if the list is empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the element at the front of the list, or None if empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the element at the back of the list, or None if empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Gets the element at the front of the list mutably, or None if empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Gets the element at the back of the list mutably, or None if empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at the given index.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","Removes the element at the given index. Returns None if the index is out of bounds.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_at","","Splits the list into two lists at the given index. Returns the right side of the split. Returns an empty list if index is out of bounds.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"append","","Appends the given list to the end of this one. The old list will be empty afterwards.",0,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":null}],[11,"splice","","Inserts the given list at the given index. The old list will be empty afterwards.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"linkedlist"}],"output":null}],[11,"len","","Gets the number of elements in the list.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether the list is empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Removes all elements from the list.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"cursor","","Gets a cursor over the list.",0,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"iter","","Provides a forward iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"reset","","Resets the cursor to lie between the first and last element in the list.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","Gets the next element in the list.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"prev","","Gets the previous element in the list.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_next","","Gets the next element in the list, without moving the cursor head.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_prev","","Gets the previous element in the list, without moving the cursor head.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at the cursor's location in the list, and moves the cursor head to lie before it. Therefore, the new element will be yielded by the next call to `next`.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"remove","","Removes the next element in the list, without moving the cursor. Returns None if the list is empty, or if `next` is the ghost element",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split","","",1,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"splice","","Inserts the entire list's contents right after the cursor.",1,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":null}],[11,"seek_forward","","Calls `next` the specified number of times.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"seek_backward","","Calls `prev` the specified number of times.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}]],"paths":[[3,"LinkedList"],[3,"Cursor"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["box","shutdownloggererror"],"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["shutdownloggererror"],"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["loglevel"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["loglevelfilter"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["loglevel"],"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",null,null],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",null,null],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",null,null]],"paths":[]};
searchIndex["matrixmultiply"] = {"doc":"General matrix multiplication for f32, f64 matrices.","items":[[5,"sgemm","matrixmultiply","General matrix multiplication (f32)",null,null],[5,"dgemm","","General matrix multiplication (f64)",null,null]],"paths":[]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["memoffset"] = {"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",null,null],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",null,null]],"paths":[]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Poll","mio","Polls for readiness events on all registered values.",null,null],[3,"Registration","","Handle to a user space `Poll` registration.",null,null],[3,"SetReadiness","","Updates the readiness state of the associated `Registration`.",null,null],[3,"PollOpt","","Options supplied when registering an `Evented` handle with `Poll`",null,null],[3,"Ready","","A set of readiness event kinds",null,null],[3,"Token","","Associates readiness notifications with [`Evented`] handles.",null,null],[12,"0","","",0,null],[3,"Events","","A collection of readiness events.",null,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pollopt"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"empty","","Return a `PollOpt` representing no set options.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"edge","","Return a `PollOpt` representing edge-triggered notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","Return a `PollOpt` representing level-triggered notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","Return a `PollOpt` representing oneshot notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","Returns true if the options include edge-triggered notifications.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_level","","Returns true if the options include level-triggered notifications.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_oneshot","","Returns true if the options includes oneshot.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns true if `self` is a superset of `other`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","Adds all options represented by `other` into `self`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"remove","","Removes all options represented by `other` from `self`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"ordering"}}],[11,"empty","","Returns the empty `Ready` set.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"readable","","Returns a `Ready` representing readable readiness.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"writable","","Returns a `Ready` representing writable readiness.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"all","","Returns a `Ready` representing readiness for all operations.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"is_empty","","Returns true if `Ready` is the empty set",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_readable","","Returns true if the value includes readable readiness",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_writable","","Returns true if the value includes writable readiness",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","Adds all readiness represented by `other` into `self`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"remove","","Removes all options represented by `other` from `self`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"contains","","Returns true if `self` is a superset of `other`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"from_usize","","Create a `Ready` instance using the given `usize` representation.",2,{"inputs":[{"name":"usize"}],"output":{"name":"ready"}}],[11,"as_usize","","Returns a `usize` representation of the `Ready` value.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"setreadiness"}}],[11,"new","","Return a new `Poll` handle.",4,{"inputs":[],"output":{"generics":["poll"],"name":"result"}}],[11,"register","","Register an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","Wait for readiness events",4,{"inputs":[{"name":"self"},{"name":"events"},{"generics":["duration"],"name":"option"}],"output":{"generics":["usize"],"name":"result"}}],[11,"poll_interruptible","","Like `poll`, but may be interrupted by a signal",4,{"inputs":[{"name":"self"},{"name":"events"},{"generics":["duration"],"name":"option"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"with_capacity","","Return a new `Events` capable of holding up to `capacity` events.",5,{"inputs":[{"name":"usize"}],"output":{"name":"events"}}],[11,"capacity","","Returns the number of `Event` values that `self` can hold.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if `self` contains no `Event` values.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the `Event` values.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clear","","Clearing all `Event` values from container explicitly.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new2","","Create and return a new `Registration` and the associated `SetReadiness`.",6,null],[11,"register","","",6,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",6,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",6,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"readiness","","Returns the registration's current readiness.",3,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"set_readiness","","Set the registration's readiness",3,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"unixready"}],"output":{"name":"ready"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[0,"net","","Networking primitives",null,null],[3,"TcpListener","mio::net","A structure representing a socket server",null,null],[3,"TcpStream","","A non-blocking TCP stream between a local socket and a remote socket.",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[11,"connect","","Create a new TCP stream and issue a non-blocking connect to the specified address.",7,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",7,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"from_stream","","Creates a new `TcpStream` from a standard `net::TcpStream`.",7,{"inputs":[{"name":"tcpstream"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",7,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",7,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",7,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",7,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_linger","","Sets the value for the `SO_LINGER` option on this socket.",7,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"linger","","Gets the value of the `SO_LINGER` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",7,null],[11,"read_bufs","","Read in a list of buffers all at once.",7,null],[11,"write_bufs","","Write a list of buffers all at once.",7,null],[11,"read","","",7,null],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",7,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",7,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",7,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",8,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"from_std","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",8,{"inputs":[{"name":"tcplistener"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accept_std","","Accepts a new `std::net::TcpStream`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",8,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"register","","",8,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",8,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",8,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_raw_fd","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",7,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"into_raw_fd","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",8,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"bind","","Creates a UDP socket from the given address.",9,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"from_socket","","Creates a new mio-wrapped socket from an underlying and bound std socket.",9,{"inputs":[{"name":"udpsocket"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"local_addr","","Returns the socket address that this socket was created from.",9,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",9,null],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",9,null],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",9,null],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read and the address from whence the data came.",9,null],[11,"connect","","Connects the UDP socket setting the default destination for `send()` and limiting packets that are read via `recv` from the address specified in `addr`.",9,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"register","","",9,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",9,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",9,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_raw_fd","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",9,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[0,"event","mio","Readiness event types and utilities.",null,null],[3,"Events","mio::event","A collection of readiness events.",null,null],[3,"Iter","","[`Events`] iterator.",null,null],[3,"Event","","An readiness event returned by [`Poll::poll`].",null,null],[8,"Evented","","A value that may be registered with `Poll`",null,null],[10,"register","","Register `self` with the given `Poll` instance.",10,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[10,"reregister","","Re-register `self` with the given `Poll` instance.",10,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[10,"deregister","","Deregister `self` from the given `Poll` instance",10,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[0,"unix","mio","Unix only extensions",null,null],[3,"EventedFd","mio::unix","Adapter for `RawFd` providing an [`Evented`] implementation.",null,null],[12,"0","","",11,null],[3,"UnixReady","","Unix specific extensions to `Ready`",null,null],[11,"clone","mio::event","",12,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Event` containing `readiness` and `token`",12,{"inputs":[{"name":"ready"},{"name":"token"}],"output":{"name":"event"}}],[11,"readiness","","Returns the event's readiness.",12,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"token","","Returns the event's token.",12,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["event"],"name":"option"}}],[11,"fmt","mio::unix","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",11,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",11,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",11,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unixready"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"ordering"}}],[11,"error","","Returns a `Ready` representing error readiness.",14,{"inputs":[],"output":{"name":"unixready"}}],[11,"hup","","Returns a `Ready` representing HUP readiness.",14,{"inputs":[],"output":{"name":"unixready"}}],[11,"is_error","","Returns true if the value includes error readiness",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hup","","Returns true if the value includes HUP readiness",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",14,{"inputs":[{"name":"ready"}],"output":{"name":"unixready"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"deref_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"bitor","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"bitxor","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"bitand","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,"SetReadiness"],[3,"Poll"],[3,"Events"],[3,"Registration"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"Evented"],[3,"EventedFd"],[3,"Event"],[3,"Iter"],[3,"UnixReady"]]};
searchIndex["ndarray"] = {"doc":"The `ndarray` crate provides an n-dimensional container for general elements and for numerics.","items":[[3,"Axis","ndarray","An axis index.",null,null],[12,"0","","",0,null],[3,"AxisDescription","","Description of the axis, its length and its stride.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[12,"2","","",1,null],[3,"Dim","","Dimension description.",null,null],[3,"IxDynImpl","","Dynamic dimension or index type.",null,null],[3,"ShapeError","","An error related to array shape or layout.",null,null],[3,"Slice","","A slice (range with step size).",null,null],[12,"start","","",2,null],[12,"end","","",2,null],[12,"step","","",2,null],[3,"SliceInfo","","Represents all of the necessary information to perform a slice.",null,null],[3,"Zip","","Lock step function application across several arrays or other producers.",null,null],[3,"ArrayBase","","An n-dimensional array.",null,null],[3,"OwnedRepr","","Array's representation.",null,null],[3,"OwnedArcRepr","","ArcArray's representation.",null,null],[3,"ViewRepr","","Array view’s representation.",null,null],[3,"Shape","","A contiguous array shape of n dimensions.",null,null],[3,"StrideShape","","An array shape of n dimensions in c-order, f-order or custom strides.",null,null],[4,"ErrorKind","","Error code for an error related to array shape or layout.",null,null],[13,"IncompatibleShape","","incompatible shape",3,null],[13,"IncompatibleLayout","","incompatible memory layout",3,null],[13,"RangeLimited","","the shape does not fit inside type limits",3,null],[13,"OutOfBounds","","out of bounds indexing",3,null],[13,"Unsupported","","aliasing array elements",3,null],[4,"SliceOrIndex","","A slice (range with step) or an index.",null,null],[13,"Slice","","A range with step size. Negative `begin` or `end` indexes are counted from the back of the axis. If `end` is `None`, the slice extends to the end of the axis.",4,null],[12,"start","ndarray::SliceOrIndex","",4,null],[12,"end","","",4,null],[12,"step","","",4,null],[13,"Index","ndarray","A single index.",4,null],[4,"FoldWhile","","Value controlling the execution of `.fold_while` on `Zip`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"Dim","","Create a new dimension value.",null,null],[5,"indices","","Create an iterable of the array shape `shape`.",null,{"inputs":[{"name":"e"}],"output":{"name":"indices"}}],[5,"indices_of","","Return an iterable of the indices of the passed-in array.",null,{"inputs":[{"name":"arraybase"}],"output":{"name":"indices"}}],[5,"stack","","Stack arrays along the given axis.",null,null],[5,"Ix0","","Create a zero-dimensional index",null,{"inputs":[],"output":{"name":"ix0"}}],[5,"Ix1","","Create a one-dimensional index",null,{"inputs":[{"name":"ix"}],"output":{"name":"ix1"}}],[5,"Ix2","","Create a two-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"}],"output":{"name":"ix2"}}],[5,"Ix3","","Create a three-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix3"}}],[5,"Ix4","","Create a four-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix4"}}],[5,"Ix5","","Create a five-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix5"}}],[5,"Ix6","","Create a six-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix6"}}],[5,"IxDyn","","Create a dynamic-dimensional index",null,null],[5,"arr0","","Create a zero-dimensional array with the element `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"array0"}}],[5,"arr1","","Create a one-dimensional array with elements from `xs`.",null,null],[5,"rcarr1","","Create a one-dimensional array with elements from `xs`.",null,null],[5,"aview0","","Create a zero-dimensional array view borrowing `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"arrayview0"}}],[5,"aview1","","Create a one-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview2","","Create a two-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview_mut1","","Create a one-dimensional read-write array view with elements borrowing `xs`.",null,null],[5,"aview_mut2","","Create a two-dimensional read-write array view with elements borrowing `xs`.",null,null],[5,"arr2","","Create a two-dimensional array with elements from `xs`.",null,null],[5,"rcarr2","","Create a two-dimensional array with elements from `xs`.",null,null],[5,"arr3","","Create a three-dimensional array with elements from `xs`.",null,null],[5,"rcarr3","","Create a three-dimensional array with elements from `xs`.",null,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"bool"}}],[11,"from_iter","","",6,{"inputs":[{"name":"i"}],"output":{"generics":["ix1"],"name":"arraybase"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"_data_slice","","",7,null],[11,"ensure_unique","","",7,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"is_unique","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone_with_ptr","","",7,null],[11,"_data_slice","","",8,null],[11,"clone_with_ptr","","",8,null],[11,"clone_from_with_ptr","","",8,null],[11,"_data_slice","","",9,null],[11,"clone_with_ptr","","",9,null],[11,"_data_slice","","",9,null],[11,"new","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_shared","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ownedrcrepr"}}],[11,"into_owned","","",8,{"inputs":[{"name":"arraybase"}],"output":{"generics":["ownedrepr"],"name":"arraybase"}}],[11,"new","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_shared","","",7,{"inputs":[{"name":"self"}],"output":{"name":"ownedrcrepr"}}],[11,"into_owned","","",7,{"inputs":[{"name":"arraybase"}],"output":{"generics":["ownedrepr"],"name":"arraybase"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","Return the index of the axis.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"into_dimension","","",10,null],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"dim"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"dim"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"dim"}],"output":{"name":"bool"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"dim"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"self"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"self"}}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":null}],[11,"mul","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"self"}}],[11,"mul_assign","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":null}],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"_fastest_varying_stride_order","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_pattern","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"next_for","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"into_pattern","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"next_for","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"equal","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"default_strides","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"_fastest_varying_stride_order","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"min_stride_axis","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"axis"}}],[11,"max_stride_axis","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"axis"}}],[11,"first_index","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stride_offset","","Self is an index, return the stride offset",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",11,null],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"next_for","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"equal","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"last_elem","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_last_elem","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"default_strides","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fortran_strides","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"_fastest_varying_stride_order","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"min_stride_axis","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"axis"}}],[11,"first_index","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stride_offset","","Self is an index, return the stride offset",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",11,null],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"next_for","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"stride_offset","","Self is an index, return the stride offset",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"_fastest_varying_stride_order","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",11,null],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",11,null],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",11,null],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ixdynimpl"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"ixdynimpl"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"ixdynimpl"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"ixdynimpl"}}],[11,"from","","",10,null],[11,"from","","",10,{"inputs":[{"generics":["ix"],"name":"vec"}],"output":{"name":"self"}}],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"deref","","",10,null],[11,"deref_mut","","",10,null],[11,"remove_axis","","",11,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"self"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"remove_axis","","",11,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"ix0"}}],[11,"remove_axis","","",11,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"ix1"}}],[11,"remove_axis","","",11,null],[11,"remove_axis","","",11,null],[11,"remove_axis","","",11,null],[11,"remove_axis","","",11,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"axis","","Return axis",1,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"len","","Return length",1,{"inputs":[{"name":"self"}],"output":{"name":"ix"}}],[11,"stride","","Return stride",1,{"inputs":[{"name":"self"}],"output":{"name":"ixs"}}],[0,"iter","","Producers, iterables and iterators.",null,null],[3,"Axes","ndarray::iter","An iterator over the length and stride of each axis of an array.",null,null],[3,"Indices","","Indices producer and iterable.",null,null],[3,"IndicesIter","","An iterator over the indexes of an array shape.",null,null],[3,"Iter","","An iterator over the elements of an array.",null,null],[3,"IterMut","","An iterator over the elements of an array (mutable).",null,null],[3,"IndexedIter","","An iterator over the indexes and elements of an array.",null,null],[3,"IndexedIterMut","","An iterator over the indexes and elements of an array (mutable).",null,null],[3,"Lanes","","See `.lanes()` for more information.",null,null],[3,"LanesMut","","See `.lanes_mut()` for more information.",null,null],[3,"LanesIter","","An iterator that traverses over all dimensions but the innermost, and yields each inner row.",null,null],[3,"LanesIterMut","","An iterator that traverses over all dimensions but the innermost, and yields each inner row (mutable).",null,null],[3,"AxisIter","","An iterator that traverses over an axis and and yields each subview.",null,null],[3,"AxisIterMut","","An iterator that traverses over an axis and and yields each subview (mutable)",null,null],[3,"AxisChunksIter","","An iterator that traverses over the specified axis and yields views of the specified size on this axis.",null,null],[3,"AxisChunksIterMut","","An iterator that traverses over the specified axis and yields mutable views of the specified size on this axis.",null,null],[3,"ExactChunks","","Exact chunks producer and iterable.",null,null],[3,"ExactChunksIter","","Exact chunks iterator.",null,null],[3,"ExactChunksMut","","Exact chunks producer and iterable.",null,null],[3,"ExactChunksIterMut","","Exact chunks iterator.",null,null],[3,"Windows","","Window producer and iterable",null,null],[11,"clone","ndarray","",2,{"inputs":[{"name":"self"}],"output":{"name":"slice"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"new","","Create a new `Slice` with the given extents.",2,{"inputs":[{"name":"isize"},{"generics":["isize"],"name":"option"},{"name":"isize"}],"output":{"name":"slice"}}],[11,"step_by","","Create a new `Slice` with the given step size (multiplied with the previous step size).",2,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"generics":["isize"],"name":"range"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["isize"],"name":"rangefrom"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["isize"],"name":"rangeto"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["usize"],"name":"range"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["usize"],"name":"rangeto"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["i32"],"name":"range"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["i32"],"name":"rangefrom"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["i32"],"name":"rangeto"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"name":"rangefull"}],"output":{"name":"slice"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"sliceorindex"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"sliceorindex"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_slice","","Returns `true` if `self` is a `Slice` value.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_index","","Returns `true` if `self` is an `Index` value.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"step_by","","Returns a new `SliceOrIndex` with the given step size (multiplied with the previous step size).",4,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"slice"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"name":"isize"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["isize"],"name":"range"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["isize"],"name":"rangefrom"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["isize"],"name":"rangeto"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["usize"],"name":"range"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["usize"],"name":"rangeto"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["i32"],"name":"range"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["i32"],"name":"rangefrom"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["i32"],"name":"rangeto"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"name":"rangefull"}],"output":{"name":"sliceorindex"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",12,null],[11,"new","","Returns a new `SliceInfo` instance.",12,{"inputs":[{"name":"t"}],"output":{"generics":["sliceinfo","shapeerror"],"name":"result"}}],[11,"out_ndim","","Returns the number of dimensions after calling `.slice()` (including taking subviews).",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",12,null],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"sliceinfo"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","ndarray::iter","",13,{"inputs":[{"name":"self"}],"output":{"name":"indicesiter"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"into_iter","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"indices"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contiguous_stride","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_iter","","",15,null],[11,"into_iter","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_iter","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_iter","","",20,null],[11,"into_iter","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"indexediter"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"fold","","",22,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"len","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"len","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"len","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",28,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",29,null],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contiguous_stride","","",28,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"contiguous_stride","","",29,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"next_back","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","ndarray","",32,{"inputs":[{"name":"self"}],"output":{"name":"shapeerror"}}],[11,"kind","","Return the `ErrorKind` of this error.",32,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"from_kind","","Create a new `ShapeError`",32,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","Create a `Shape` from `dimension`, using the default memory layout.",33,{"inputs":[{"name":"d"}],"output":{"name":"shape"}}],[11,"from","","",34,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_shape","","",33,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"f","","",33,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"set_f","","",33,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"strides","","",33,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"strideshape"}}],[11,"size","","Return the size of the shape in number of elements",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"from","","Create a new `Zip` from the input array or other producer `p`.",35,{"inputs":[{"name":"ip"}],"output":{"name":"self"}}],[11,"indexed","","Create a new `Zip` with an index producer and the producer `p`.",35,{"inputs":[{"name":"ip"}],"output":{"name":"self"}}],[11,"size","","Return a the number of element tuples in the Zip",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"into_inner","","Return the inner value",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_done","","Return true if it is `Done`, false if `Continue`",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"prelude","","ndarray prelude.",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"arraybase"}}],[11,"clone_from","","`Array` implements `.clone_from()` to reuse an array's existing allocation. Semantically equivalent to `*self = other.clone()`, but potentially more efficient.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"from_vec","","Create a one-dimensional array from a vector (no copying needed).",6,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from_iter","","Create a one-dimensional array from an iterable.",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"linspace","","Create a one-dimensional array from the inclusive interval `[start, end]` with `n` elements. `A` must be a floating point type.",6,{"inputs":[{"name":"a"},{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"range","","Create a one-dimensional array from the half-open interval `[start, end)` with elements spaced by `step`. `A` must be a floating point type.",6,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"self"}}],[11,"eye","","Create an identity matrix of size `n` (square 2D array).",6,{"inputs":[{"name":"ix"}],"output":{"name":"self"}}],[11,"from_elem","","Create an array with copies of `elem`, shape `shape`.",6,{"inputs":[{"name":"sh"},{"name":"a"}],"output":{"name":"self"}}],[11,"zeros","","Create an array with zeros, shape `shape`.",6,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"ones","","Create an array with ones, shape `shape`.",6,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"default","","Create an array with default values, shape `shape`",6,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"from_shape_fn","","Create an array with values created by the function `f`.",6,{"inputs":[{"name":"sh"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_shape_vec","","Create an array with the given shape from a vector. (No cloning of elements needed.)",6,{"inputs":[{"name":"sh"},{"name":"vec"}],"output":{"generics":["shapeerror"],"name":"result"}}],[11,"from_shape_vec_unchecked","","Create an array from a vector and interpret it according to the provided dimensions and strides. (No cloning of elements needed.)",6,{"inputs":[{"name":"sh"},{"name":"vec"}],"output":{"name":"self"}}],[11,"uninitialized","","Create an array with uninitalized elements, shape `shape`.",6,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"len","","Return the total number of elements in the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len_of","","Return the length of `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"usize"}}],[11,"is_empty","","Return whether the array has any elements",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ndim","","Return the number of dimensions (axes) in the array",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"dim","","Return the shape of the array in its “pattern” form, an integer in the one-dimensional case, tuple in the n-dimensional cases and so on.",6,null],[11,"raw_dim","","Return the shape of the array as it stored in the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"shape","","Return the shape of the array as a slice.",6,null],[11,"strides","","Return the strides of the array as a slice",6,null],[11,"view","","Return a read-only view of the array",6,{"inputs":[{"name":"self"}],"output":{"name":"arrayview"}}],[11,"view_mut","","Return a read-write view of the array",6,{"inputs":[{"name":"self"}],"output":{"name":"arrayviewmut"}}],[11,"to_owned","","Return an uniquely owned copy of the array",6,{"inputs":[{"name":"self"}],"output":{"name":"array"}}],[11,"to_shared","","Return a shared ownership (copy on write) array.",6,{"inputs":[{"name":"self"}],"output":{"name":"rcarray"}}],[11,"into_owned","","Turn the array into a uniquely owned array, cloning the array elements to unshare them if necessary.",6,{"inputs":[{"name":"self"}],"output":{"name":"array"}}],[11,"into_shared","","Turn the array into a shared ownership (copy on write) array, without any copying.",6,{"inputs":[{"name":"self"}],"output":{"name":"rcarray"}}],[11,"iter","","Return an iterator of references to the elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Return an iterator of mutable references to the elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"indexed_iter","","Return an iterator of indexes and references to the elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"indexediter"}}],[11,"indexed_iter_mut","","Return an iterator of indexes and mutable references to the elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"indexeditermut"}}],[11,"slice","","Return a sliced view of the array.",6,{"inputs":[{"name":"self"},{"name":"sliceinfo"}],"output":{"name":"arrayview"}}],[11,"slice_mut","","Return a sliced read-write view of the array.",6,{"inputs":[{"name":"self"},{"name":"sliceinfo"}],"output":{"name":"arrayviewmut"}}],[11,"slice_move","","Slice the array, possibly changing the number of dimensions.",6,{"inputs":[{"name":"self"},{"name":"sliceinfo"}],"output":{"name":"arraybase"}}],[11,"slice_inplace","","Slice the array in place without changing the number of dimensions.",6,null],[11,"slice_axis","","Return a view of the array, sliced along the specified axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"slice"}],"output":{"name":"arrayview"}}],[11,"slice_axis_mut","","Return a mutable view of the array, sliced along the specified axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"slice"}],"output":{"name":"arrayviewmut"}}],[11,"slice_axis_inplace","","Slice the array in place along the specified axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"slice"}],"output":null}],[11,"get","","Return a reference to the element at `index`, or return `None` if the index is out of bounds.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Return a mutable reference to the element at `index`, or return `None` if the index is out of bounds.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"uget","","Perform unchecked array indexing.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"a"}}],[11,"uget_mut","","Perform unchecked array indexing.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"a"}}],[11,"swap","","Swap elements at indices `index1` and `index2`.",6,{"inputs":[{"name":"self"},{"name":"i"},{"name":"i"}],"output":null}],[11,"uswap","","Swap elements unchecked at indices `index1` and `index2`.",6,{"inputs":[{"name":"self"},{"name":"i"},{"name":"i"}],"output":null}],[11,"subview","","Along `axis`, select the subview `index` and return a view with that axis removed.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arrayview"}}],[11,"subview_mut","","Along `axis`, select the subview `index` and return a read-write view with the axis removed.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arrayviewmut"}}],[11,"subview_inplace","","Collapse dimension `axis` into length one, and select the subview of `index` along that axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":null}],[11,"into_subview","","Along `axis`, select the subview `index` and return `self` with that axis removed.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arraybase"}}],[11,"select","","Along `axis`, select arbitrary subviews corresponding to `indices`  and and copy them into a new array.",6,null],[11,"genrows","","Return a producer and iterable that traverses over the generalized rows of the array. For a 2D array these are the regular rows.",6,{"inputs":[{"name":"self"}],"output":{"name":"lanes"}}],[11,"genrows_mut","","Return a producer and iterable that traverses over the generalized rows of the array and yields mutable array views.",6,{"inputs":[{"name":"self"}],"output":{"name":"lanesmut"}}],[11,"gencolumns","","Return a producer and iterable that traverses over the generalized columns of the array. For a 2D array these are the regular columns.",6,{"inputs":[{"name":"self"}],"output":{"name":"lanes"}}],[11,"gencolumns_mut","","Return a producer and iterable that traverses over the generalized columns of the array and yields mutable array views.",6,{"inputs":[{"name":"self"}],"output":{"name":"lanesmut"}}],[11,"lanes","","Return a producer and iterable that traverses over all 1D lanes pointing in the direction of `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"lanes"}}],[11,"lanes_mut","","Return a producer and iterable that traverses over all 1D lanes pointing in the direction of `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"lanesmut"}}],[11,"outer_iter","","Return an iterator that traverses over the outermost dimension and yields each subview.",6,{"inputs":[{"name":"self"}],"output":{"name":"axisiter"}}],[11,"outer_iter_mut","","Return an iterator that traverses over the outermost dimension and yields each subview.",6,{"inputs":[{"name":"self"}],"output":{"name":"axisitermut"}}],[11,"axis_iter","","Return an iterator that traverses over `axis` and yields each subview along it.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"axisiter"}}],[11,"axis_iter_mut","","Return an iterator that traverses over `axis` and yields each mutable subview along it.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"axisitermut"}}],[11,"axis_chunks_iter","","Return an iterator that traverses over `axis` by chunks of `size`, yielding non-overlapping views along that axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"usize"}],"output":{"name":"axischunksiter"}}],[11,"axis_chunks_iter_mut","","Return an iterator that traverses over `axis` by chunks of `size`, yielding non-overlapping read-write views along that axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"usize"}],"output":{"name":"axischunksitermut"}}],[11,"exact_chunks","","Return an exact chunks producer (and iterable).",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"exactchunks"}}],[11,"exact_chunks_mut","","Return an exact chunks producer (and iterable).",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"exactchunksmut"}}],[11,"windows","","Return a window producer and iterable.",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"windows"}}],[11,"diag","","Return an view of the diagonal elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"arrayview1"}}],[11,"diag_mut","","Return a read-write view over the diagonal elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"arrayviewmut1"}}],[11,"into_diag","","Return the diagonal as a one-dimensional array.",6,{"inputs":[{"name":"self"}],"output":{"generics":["ix1"],"name":"arraybase"}}],[11,"is_standard_layout","","Return `true` if the array data is laid out in contiguous “C order” in memory (where the last index is the most rapidly varying).",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ptr","","Return a pointer to the first element in the array.",6,null],[11,"as_mut_ptr","","Return a mutable pointer to the first element in the array.",6,null],[11,"as_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_slice_mut","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_slice_memory_order","","Return the array’s data as a slice if it is contiguous, return `None` otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_slice_memory_order_mut","","Return the array’s data as a slice if it is contiguous, return `None` otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_shape","","Transform the array into `shape`; any shape with the same number of elements is accepted, but the source array or view must be contiguous, otherwise we cannot rearrange the dimension.",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["arraybase","shapeerror"],"name":"result"}}],[11,"reshape","","Note: Reshape is for `RcArray` only. Use `.into_shape()` for other arrays and array views.",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"arraybase"}}],[11,"into_dyn","","Convert any array or array view to a dynamic dimensional array or array view (respectively).",6,{"inputs":[{"name":"self"}],"output":{"generics":["ixdyn"],"name":"arraybase"}}],[11,"into_dimensionality","","Convert an array or array view to another with the same type, but different dimensionality type. Errors if the dimensions don't agree.",6,{"inputs":[{"name":"self"}],"output":{"generics":["arraybase","shapeerror"],"name":"result"}}],[11,"broadcast","","Act like a larger size and/or shape array by broadcasting into a larger shape, if possible.",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["arrayview"],"name":"option"}}],[11,"swap_axes","","Swap axes `ax` and `bx`.",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"permuted_axes","","Permute the axes.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"arraybase"}}],[11,"reversed_axes","","Transpose the array by reversing axes.",6,{"inputs":[{"name":"self"}],"output":{"name":"arraybase"}}],[11,"t","","Return a transposed view of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"arrayview"}}],[11,"axes","","Return an iterator over the length and stride of each axis.",6,{"inputs":[{"name":"self"}],"output":{"name":"axes"}}],[11,"max_stride_axis","","Return the axis with the greatest stride (by absolute value), preferring axes with len > 1.",6,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"invert_axis","","Reverse the stride of `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":null}],[11,"merge_axes","","If possible, merge in the axis `take` to `into`.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"insert_axis","","Insert new array axis at `axis` and return the result.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"arraybase"}}],[11,"remove_axis","","Remove array axis `axis` and return the result.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"arraybase"}}],[11,"assign","","Perform an elementwise assigment to `self` from `rhs`.",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"fill","","Perform an elementwise assigment to `self` from element `x`.",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"zip_mut_with","","Traverse two arrays in unspecified order, in lock step, calling the closure `f` on each element pair.",6,{"inputs":[{"name":"self"},{"name":"arraybase"},{"name":"f"}],"output":null}],[11,"fold","","Traverse the array elements and apply a fold, returning the resulting value.",6,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"map","","Call `f` by reference on each element and create a new array with the new values.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"array"}}],[11,"mapv","","Call `f` by value on each element and create a new array with the new values.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"array"}}],[11,"mapv_into","","Call `f` by value on each element, update the array with the new values and return it.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"map_inplace","","Modify the array in place by calling `f` by mutable reference on each element.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"mapv_inplace","","Modify the array in place by calling `f` by value on each element. The array is updated with the new values.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"visit","","Visit each element in the array by calling `f` by reference on each element.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_axis","","Fold along an axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"b"},{"name":"f"}],"output":{"name":"array"}}],[11,"map_axis","","Reduce the values along an axis into just one value, producing a new array with one less dimension.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"f"}],"output":{"name":"array"}}],[11,"to_vec","","Return an vector with the elements of the one-dimensional array.",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"row","","Return an array view of row `index`.",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayview1"}}],[11,"row_mut","","Return a mutable array view of row `index`.",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayviewmut1"}}],[11,"rows","","Return the number of rows (length of `Axis(0)`) in the two-dimensional array.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","Return an array view of column `index`.",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayview1"}}],[11,"column_mut","","Return a mutable array view of column `index`.",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayviewmut1"}}],[11,"cols","","Return the number of columns (length of `Axis(1)`) in the two-dimensional array.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_square","","Return true if the array is square, false otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"scalar_sum","","Return the sum of all elements in the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"sum_axis","","Return sum along `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"array"}}],[11,"mean_axis","","Return mean along `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"array"}}],[11,"all_close","","Return `true` if the arrays' elementwise differences are all within the given absolute tolerance, `false` otherwise.",6,{"inputs":[{"name":"self"},{"name":"arraybase"},{"name":"a"}],"output":{"name":"bool"}}],[0,"linalg","","Linear algebra.",null,null],[5,"general_mat_mul","ndarray::linalg","General matrix-matrix multiplication.",null,{"inputs":[{"name":"a"},{"name":"arraybase"},{"name":"arraybase"},{"name":"a"},{"name":"arraybase"}],"output":null}],[5,"general_mat_vec_mul","","General matrix-vector multiplication.",null,{"inputs":[{"name":"a"},{"name":"arraybase"},{"name":"arraybase"},{"name":"a"},{"name":"arraybase"}],"output":null}],[11,"dot","ndarray","Perform dot product or matrix multiplication of arrays `self` and `rhs`.",6,null],[11,"dot","","Compute the dot product of one-dimensional arrays.",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"a"}}],[11,"dot","","Perform the matrix multiplication of the row vector `self` and rectangular matrix `rhs`.",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"generics":["ix1"],"name":"array"}}],[11,"dot","","Perform matrix multiplication of rectangular arrays `self` and `rhs`.",6,null],[11,"dot","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"array2"}}],[11,"dot","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"generics":["ix1"],"name":"array"}}],[11,"scaled_add","","Perform the operation `self += alpha * rhs` efficiently, where `alpha` is a scalar and `rhs` is another array. This operation is also known as `axpy` in BLAS.",6,{"inputs":[{"name":"self"},{"name":"a"},{"name":"arraybase"}],"output":null}],[8,"Dot","ndarray::linalg","Matrix Multiplication",null,null],[16,"Output","","The result of the operation.",36,null],[10,"dot","","",36,null],[11,"add","ndarray","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitand","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitand","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitand","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitor","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitor","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitor","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"shl","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shl","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shl","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"shr","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shr","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shr","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"neg","","Perform an elementwise negation of `self` and return the result.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"not","","Perform an elementwise unary not of `self` and return the result.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"rem_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"rem_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"bitand_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"bitand_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"bitor_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"bitor_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"bitxor_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"bitxor_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"shl_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"shl_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"shr_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"shr_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[6,"Ix0","","zero-dimensionial",null,null],[6,"Ix1","","one-dimensional",null,null],[6,"Ix2","","two-dimensional",null,null],[6,"Ix3","","three-dimensional",null,null],[6,"Ix4","","four-dimensional",null,null],[6,"Ix5","","five-dimensional",null,null],[6,"Ix6","","six-dimensional",null,null],[6,"IxDyn","","dynamic-dimensional",null,null],[6,"Array0","","zero-dimensional array",null,null],[6,"Array1","","one-dimensional array",null,null],[6,"Array2","","two-dimensional array",null,null],[6,"Array3","","three-dimensional array",null,null],[6,"Array4","","four-dimensional array",null,null],[6,"Array5","","five-dimensional array",null,null],[6,"Array6","","six-dimensional array",null,null],[6,"ArrayD","","dynamic-dimensional array",null,null],[6,"ArrayView0","","zero-dimensional array view",null,null],[6,"ArrayView1","","one-dimensional array view",null,null],[6,"ArrayView2","","two-dimensional array view",null,null],[6,"ArrayView3","","three-dimensional array view",null,null],[6,"ArrayView4","","four-dimensional array view",null,null],[6,"ArrayView5","","five-dimensional array view",null,null],[6,"ArrayView6","","six-dimensional array view",null,null],[6,"ArrayViewD","","dynamic-dimensional array view",null,null],[6,"ArrayViewMut0","","zero-dimensional read-write array view",null,null],[6,"ArrayViewMut1","","one-dimensional read-write array view",null,null],[6,"ArrayViewMut2","","two-dimensional read-write array view",null,null],[6,"ArrayViewMut3","","three-dimensional read-write array view",null,null],[6,"ArrayViewMut4","","four-dimensional read-write array view",null,null],[6,"ArrayViewMut5","","five-dimensional read-write array view",null,null],[6,"ArrayViewMut6","","six-dimensional read-write array view",null,null],[6,"ArrayViewMutD","","dynamic-dimensional read-write array view",null,null],[6,"RcArray1","","one-dimensional shared ownership array",null,null],[6,"RcArray2","","two-dimensional shared ownership array",null,null],[6,"Ix","","Array index type",null,null],[6,"Ixs","","Array index type (signed)",null,null],[6,"RcArray","","An array where the data has shared ownership and is copy on write.",null,null],[6,"ArcArray","","An array where the data has shared ownership and is copy on write.",null,null],[6,"Array","","An array that owns its data uniquely.",null,null],[6,"ArrayView","","A read-only array view.",null,null],[6,"ArrayViewMut","","A read-write array view.",null,null],[8,"Dimension","","Array shape and index trait.",null,null],[18,"NDIM","","For fixed-size dimension representations (e.g. `Ix2`), this should be `Some(ndim)`, and for variable-size dimension representations (e.g. `IxDyn`), this should be `None`.",37,null],[16,"SliceArg","","`SliceArg` is the type which is used to specify slicing for this dimension.",37,null],[16,"Pattern","","Pattern matching friendly form of the dimension value.",37,null],[16,"Smaller","","Next smaller dimension (if applicable)",37,null],[16,"Larger","","Next larger dimension",37,null],[10,"into_pattern","","Convert the dimension into a pattern matching friendly value.",37,null],[11,"size","","Compute the size of the dimension (number of elements)",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","Compute the size while checking for overflow.",37,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_array_view","","Borrow as a read-only array view.",37,{"inputs":[{"name":"self"}],"output":{"generics":["ix"],"name":"arrayview1"}}],[11,"as_array_view_mut","","Borrow as a read-write array view.",37,{"inputs":[{"name":"self"}],"output":{"generics":["ix"],"name":"arrayviewmut1"}}],[11,"into_dyn","","Convert the dimensional into a dynamic dimensional (IxDyn).",37,{"inputs":[{"name":"self"}],"output":{"name":"ixdyn"}}],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",37,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}],[8,"IntoDimension","","Argument conversion a dimension.",null,null],[16,"Dim","","",38,null],[10,"into_dimension","","",38,null],[8,"RemoveAxis","","Array shape with a next smaller dimension.",null,null],[10,"remove_axis","","",39,null],[8,"NdIndex","","Tuple or fixed size arrays that can be used to index an array.",null,null],[8,"AsArray","","Argument conversion into an array view",null,null],[8,"LinalgScalar","","Elements that support linear algebra operations.",null,null],[8,"NdFloat","","Floating-point element types `f32` and `f64`.",null,null],[8,"ShapeBuilder","","A trait for `Shape` and `D where D: Dimension` that allows customizing the memory layout (strides) of an array shape.",null,null],[16,"Dim","","",40,null],[16,"Strides","","",40,null],[10,"into_shape","","",40,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[10,"f","","",40,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[10,"set_f","","",40,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"shape"}}],[10,"strides","","",40,null],[8,"IndexLonger","","Extra indexing methods for array views",null,null],[16,"Output","","The type of the reference to the element that is produced, including its lifetime.",41,null],[10,"index","","Get a reference of a element through the view.",41,null],[10,"get","","Get a reference of a element through the view.",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[10,"uget","","Get a reference of a element through the view without boundary check",41,null],[8,"Data","","Array representation trait.",null,null],[16,"Elem","","The array element type.",42,null],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",42,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}],[8,"DataMut","","Array representation trait.",null,null],[8,"DataOwned","","Array representation trait.",null,null],[8,"DataShared","","Array representation trait.",null,null],[8,"DataClone","","Array representation trait.",null,null],[8,"FixedInitializer","","Fixed-size array used for array initialization",null,null],[16,"Elem","","",43,null],[10,"as_init_slice","","",43,null],[10,"len","","",43,{"inputs":[],"output":{"name":"usize"}}],[8,"NdProducer","","A producer of an n-dimensional set of elements; for example an array view, mutable array view or an iterator that yields chunks.",null,null],[16,"Item","","The element produced per iteration.",44,null],[16,"Dim","","Dimension type",44,null],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",44,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}],[8,"IntoNdProducer","","Argument conversion into a producer.",null,null],[16,"Item","","The element produced per iteration.",45,null],[16,"Dim","","Dimension type of the producer",45,null],[16,"Output","","",45,null],[10,"into_producer","","Convert the value into an `NdProducer`.",45,null],[8,"ScalarOperand","","Elements that can be used as direct operands in arithmetic with arrays.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ownedrepr"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"viewrepr"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"strideshape"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"array","","Create an `Array` with one, two or three dimensions.",null,null],[14,"s","","Slice argument constructor.",null,null],[14,"stack","","Stack arrays along the given axis.",null,null],[14,"azip","","Array zip macro: lock step function application across several arrays and producers.",null,null],[11,"into_iter","","",46,null],[11,"into_iter","","",47,null],[11,"from","","",46,{"inputs":[{"name":"slice"}],"output":{"name":"self"}}],[11,"from","","",46,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"from","","",47,{"inputs":[{"name":"slice"}],"output":{"name":"self"}}],[11,"from","","",47,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"into_dimension","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ix1"}}],[18,"NDIM","","For fixed-size dimension representations (e.g. `Ix2`), this should be `Some(ndim)`, and for variable-size dimension representations (e.g. `IxDyn`), this should be `None`.",37,null],[11,"size","","Compute the size of the dimension (number of elements)",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","Compute the size while checking for overflow.",37,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_array_view","","Borrow as a read-only array view.",37,{"inputs":[{"name":"self"}],"output":{"generics":["ix"],"name":"arrayview1"}}],[11,"as_array_view_mut","","Borrow as a read-write array view.",37,{"inputs":[{"name":"self"}],"output":{"generics":["ix"],"name":"arrayviewmut1"}}],[11,"into_dyn","","Convert the dimensional into a dynamic dimensional (IxDyn).",37,{"inputs":[{"name":"self"}],"output":{"name":"ixdyn"}}],[11,"ndim","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",49,null],[11,"slice_mut","","",49,null],[11,"into_pattern","","",49,null],[11,"zero_index","","",49,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"zero_index_with_ndim","","",49,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert_axis","","",49,null],[11,"try_remove_axis","","",49,null],[11,"from_dimension","","",49,{"inputs":[{"name":"d2"}],"output":{"name":"option"}}],[11,"zeros","","Create a new dimension value with `n` axes, all zeros",49,{"inputs":[{"name":"usize"}],"output":{"name":"ixdyn"}}],[11,"index_checked","","",48,{"inputs":[{"name":"self"},{"name":"ix1"},{"name":"ix1"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",48,{"inputs":[{"name":"self"},{"name":"ix1"}],"output":{"name":"isize"}}],[11,"index_checked","","",48,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",48,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"fmt","ndarray::iter","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","ndarray","",51,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",52,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",53,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"contiguous_stride","","",46,null],[11,"contiguous_stride","","",47,null],[11,"into_raw_vec","","Return a vector of the elements in the array, in the way they are stored internally.",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_shape","","Create a read-only array view borrowing its data from a slice.",46,null],[11,"from_shape_ptr","","Create an `ArrayView<A, D>` from shape information and a raw pointer to the elements.",46,null],[11,"reborrow","","Convert the view into an `ArrayView<'b, A, D>` where `'b` is a lifetime outlived by `'a'`.",46,{"inputs":[{"name":"self"}],"output":{"name":"arrayview"}}],[11,"split_at","","Split the array view along `axis` and return one view strictly before the split and one view after the split.",46,null],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_shape","","Create a read-write array view borrowing its data from a slice.",47,null],[11,"from_shape_ptr","","Create an `ArrayViewMut<A, D>` from shape information and a raw pointer to the elements.",47,null],[11,"reborrow","","Convert the view into an `ArrayViewMut<'b, A, D>` where `'b` is a lifetime outlived by `'a'`.",47,{"inputs":[{"name":"self"}],"output":{"name":"arrayviewmut"}}],[11,"split_at","","Split the array view along `axis` and return one mutable view strictly before the split and one mutable view after the split.",47,null],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Convert a mutable array view to a mutable reference of a element.",47,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"a"}}],[11,"get","","Convert a mutable array view to a mutable reference of a element, with checked access.",47,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"uget","","Convert a mutable array view to a mutable reference of a element without boundary check.",47,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"a"}}]],"paths":[[3,"Axis"],[3,"AxisDescription"],[3,"Slice"],[4,"ErrorKind"],[4,"SliceOrIndex"],[4,"FoldWhile"],[3,"ArrayBase"],[3,"OwnedArcRepr"],[3,"OwnedRepr"],[3,"ViewRepr"],[3,"IxDynImpl"],[3,"Dim"],[3,"SliceInfo"],[3,"IndicesIter"],[3,"Indices"],[3,"ExactChunks"],[3,"ExactChunksMut"],[3,"ExactChunksIter"],[3,"ExactChunksIterMut"],[3,"Windows"],[3,"Lanes"],[3,"LanesMut"],[3,"Iter"],[3,"IndexedIter"],[3,"IterMut"],[3,"IndexedIterMut"],[3,"LanesIter"],[3,"LanesIterMut"],[3,"AxisIter"],[3,"AxisIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"ShapeError"],[3,"Shape"],[3,"StrideShape"],[3,"Zip"],[8,"Dot"],[8,"Dimension"],[8,"IntoDimension"],[8,"RemoveAxis"],[8,"ShapeBuilder"],[8,"IndexLonger"],[8,"Data"],[8,"FixedInitializer"],[8,"NdProducer"],[8,"IntoNdProducer"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"Ix"],[6,"IxDyn"],[3,"Axes"],[6,"Array1"],[6,"Array2"],[6,"Array3"],[6,"Array"]]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"generics":["udpbuilder"],"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"generics":["udpbuilder"],"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"from_raw_fd","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"reuse_port","net2","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"reuse_port","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["ipv4addr"],"name":"result"}}],[10,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,null],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[4,"Error","nix","Nix Error Type",null,null],[13,"Sys","","",0,null],[13,"InvalidPath","","",0,null],[13,"InvalidUtf8","","The operation involved a conversion to Rust's native String type, which failed because the string did not contain all valid UTF-8.",0,null],[13,"UnsupportedOperation","","The operation is not supported by Nix, in this instance either use the libc bindings or consult the module documentation to see if there is a more appropriate interface available.",0,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",1,null],[13,"EPERM","","",1,null],[13,"ENOENT","","",1,null],[13,"ESRCH","","",1,null],[13,"EINTR","","",1,null],[13,"EIO","","",1,null],[13,"ENXIO","","",1,null],[13,"E2BIG","","",1,null],[13,"ENOEXEC","","",1,null],[13,"EBADF","","",1,null],[13,"ECHILD","","",1,null],[13,"EAGAIN","","",1,null],[13,"ENOMEM","","",1,null],[13,"EACCES","","",1,null],[13,"EFAULT","","",1,null],[13,"ENOTBLK","","",1,null],[13,"EBUSY","","",1,null],[13,"EEXIST","","",1,null],[13,"EXDEV","","",1,null],[13,"ENODEV","","",1,null],[13,"ENOTDIR","","",1,null],[13,"EISDIR","","",1,null],[13,"EINVAL","","",1,null],[13,"ENFILE","","",1,null],[13,"EMFILE","","",1,null],[13,"ENOTTY","","",1,null],[13,"ETXTBSY","","",1,null],[13,"EFBIG","","",1,null],[13,"ENOSPC","","",1,null],[13,"ESPIPE","","",1,null],[13,"EROFS","","",1,null],[13,"EMLINK","","",1,null],[13,"EPIPE","","",1,null],[13,"EDOM","","",1,null],[13,"ERANGE","","",1,null],[13,"EDEADLK","","",1,null],[13,"ENAMETOOLONG","","",1,null],[13,"ENOLCK","","",1,null],[13,"ENOSYS","","",1,null],[13,"ENOTEMPTY","","",1,null],[13,"ELOOP","","",1,null],[13,"ENOMSG","","",1,null],[13,"EIDRM","","",1,null],[13,"ECHRNG","","",1,null],[13,"EL2NSYNC","","",1,null],[13,"EL3HLT","","",1,null],[13,"EL3RST","","",1,null],[13,"ELNRNG","","",1,null],[13,"EUNATCH","","",1,null],[13,"ENOCSI","","",1,null],[13,"EL2HLT","","",1,null],[13,"EBADE","","",1,null],[13,"EBADR","","",1,null],[13,"EXFULL","","",1,null],[13,"ENOANO","","",1,null],[13,"EBADRQC","","",1,null],[13,"EBADSLT","","",1,null],[13,"EBFONT","","",1,null],[13,"ENOSTR","","",1,null],[13,"ENODATA","","",1,null],[13,"ETIME","","",1,null],[13,"ENOSR","","",1,null],[13,"ENONET","","",1,null],[13,"ENOPKG","","",1,null],[13,"EREMOTE","","",1,null],[13,"ENOLINK","","",1,null],[13,"EADV","","",1,null],[13,"ESRMNT","","",1,null],[13,"ECOMM","","",1,null],[13,"EPROTO","","",1,null],[13,"EMULTIHOP","","",1,null],[13,"EDOTDOT","","",1,null],[13,"EBADMSG","","",1,null],[13,"EOVERFLOW","","",1,null],[13,"ENOTUNIQ","","",1,null],[13,"EBADFD","","",1,null],[13,"EREMCHG","","",1,null],[13,"ELIBACC","","",1,null],[13,"ELIBBAD","","",1,null],[13,"ELIBSCN","","",1,null],[13,"ELIBMAX","","",1,null],[13,"ELIBEXEC","","",1,null],[13,"EILSEQ","","",1,null],[13,"ERESTART","","",1,null],[13,"ESTRPIPE","","",1,null],[13,"EUSERS","","",1,null],[13,"ENOTSOCK","","",1,null],[13,"EDESTADDRREQ","","",1,null],[13,"EMSGSIZE","","",1,null],[13,"EPROTOTYPE","","",1,null],[13,"ENOPROTOOPT","","",1,null],[13,"EPROTONOSUPPORT","","",1,null],[13,"ESOCKTNOSUPPORT","","",1,null],[13,"EOPNOTSUPP","","",1,null],[13,"EPFNOSUPPORT","","",1,null],[13,"EAFNOSUPPORT","","",1,null],[13,"EADDRINUSE","","",1,null],[13,"EADDRNOTAVAIL","","",1,null],[13,"ENETDOWN","","",1,null],[13,"ENETUNREACH","","",1,null],[13,"ENETRESET","","",1,null],[13,"ECONNABORTED","","",1,null],[13,"ECONNRESET","","",1,null],[13,"ENOBUFS","","",1,null],[13,"EISCONN","","",1,null],[13,"ENOTCONN","","",1,null],[13,"ESHUTDOWN","","",1,null],[13,"ETOOMANYREFS","","",1,null],[13,"ETIMEDOUT","","",1,null],[13,"ECONNREFUSED","","",1,null],[13,"EHOSTDOWN","","",1,null],[13,"EHOSTUNREACH","","",1,null],[13,"EALREADY","","",1,null],[13,"EINPROGRESS","","",1,null],[13,"ESTALE","","",1,null],[13,"EUCLEAN","","",1,null],[13,"ENOTNAM","","",1,null],[13,"ENAVAIL","","",1,null],[13,"EISNAM","","",1,null],[13,"EREMOTEIO","","",1,null],[13,"EDQUOT","","",1,null],[13,"ENOMEDIUM","","",1,null],[13,"EMEDIUMTYPE","","",1,null],[13,"ECANCELED","","",1,null],[13,"ENOKEY","","",1,null],[13,"EKEYEXPIRED","","",1,null],[13,"EKEYREVOKED","","",1,null],[13,"EKEYREJECTED","","",1,null],[13,"EOWNERDEAD","","",1,null],[13,"ENOTRECOVERABLE","","",1,null],[13,"ERFKILL","","",1,null],[13,"EHWPOISON","","",1,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errno"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"bool"}}],[17,"EWOULDBLOCK","","",null,null],[17,"EDEADLOCK","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed information about the error can be found in `errno`",null,null],[10,"sentinel","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"last","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i32","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",1,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This should not be used when `-1` is not the errno sentinel value.",1,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"AtFlags","nix::fcntl","",null,null],[3,"OFlag","","Configuration options for opened files.",null,null],[3,"SealFlag","","Additional flags for file sealing, which allows for limiting operations on a file.",null,null],[3,"FdFlag","","Additional configuration flags for `fcntl`'s `F_SETFD`.",null,null],[3,"SpliceFFlags","","Additional flags to `splice` and friends.",null,null],[3,"FallocateFlags","","Mode argument flags for fallocate determining operation performed on a given range.",null,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",3,null],[13,"F_DUPFD_CLOEXEC","","",3,null],[13,"F_GETFD","","",3,null],[13,"F_SETFD","","",3,null],[13,"F_GETFL","","",3,null],[13,"F_SETFL","","",3,null],[13,"F_SETLK","","",3,null],[13,"F_SETLKW","","",3,null],[13,"F_GETLK","","",3,null],[13,"F_OFD_SETLK","","",3,null],[13,"F_OFD_SETLKW","","",3,null],[13,"F_OFD_GETLK","","",3,null],[13,"F_ADD_SEALS","","",3,null],[13,"F_GET_SEALS","","",3,null],[13,"F_GETPIPE_SZ","","",3,null],[13,"F_SETPIPE_SZ","","",3,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",4,null],[13,"LockExclusive","","",4,null],[13,"Unlock","","",4,null],[13,"LockSharedNonblock","","",4,null],[13,"LockExclusiveNonblock","","",4,null],[13,"UnlockNonblock","","",4,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"openat","","",null,{"inputs":[{"name":"rawfd"},{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"readlink","","",null,null],[5,"readlinkat","","",null,null],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"generics":["c_int"],"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[5,"splice","","",null,{"inputs":[{"name":"rawfd"},{"generics":["loff_t"],"name":"option"},{"name":"rawfd"},{"generics":["loff_t"],"name":"option"},{"name":"usize"},{"name":"splicefflags"}],"output":{"generics":["usize"],"name":"result"}}],[5,"tee","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"usize"},{"name":"splicefflags"}],"output":{"generics":["usize"],"name":"result"}}],[5,"vmsplice","","",null,null],[5,"fallocate","","Manipulates file space.",null,{"inputs":[{"name":"rawfd"},{"name":"fallocateflags"},{"name":"off_t"},{"name":"off_t"}],"output":{"generics":["c_int"],"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"atflags"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"ordering"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"AT_SYMLINK_NOFOLLOW","","",5,null],[18,"AT_NO_AUTOMOUNT","","",5,null],[18,"AT_EMPTY_PATH","","",5,null],[11,"empty","","Returns an empty set of flags.",5,{"inputs":[],"output":{"name":"atflags"}}],[11,"all","","Returns the set containing all flags.",5,{"inputs":[],"output":{"name":"atflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",5,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",5,{"inputs":[{"name":"c_int"}],"output":{"generics":["atflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",5,{"inputs":[{"name":"c_int"}],"output":{"name":"atflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",5,{"inputs":[{"name":"self"},{"name":"atflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"atflags"}}],[11,"bitor_assign","","Adds the set of flags.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"atflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"atflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"atflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",5,{"inputs":[{"name":"self"}],"output":{"name":"atflags"}}],[11,"extend","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",5,{"inputs":[{"name":"t"}],"output":{"name":"atflags"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"oflag"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"O_ACCMODE","","Mask for the access mode of the file.",6,null],[18,"O_APPEND","","Open the file in append-only mode.",6,null],[18,"O_ASYNC","","Generate a signal when input or output becomes possible.",6,null],[18,"O_CLOEXEC","","Closes the file descriptor once an `execve` call is made.",6,null],[18,"O_CREAT","","Create the file if it does not exist.",6,null],[18,"O_DIRECT","","Try to minimize cache effects of the I/O for this file.",6,null],[18,"O_DIRECTORY","","If the specified path isn't a directory, fail.",6,null],[18,"O_DSYNC","","Implicitly follow each `write()` with an `fdatasync()`.",6,null],[18,"O_EXCL","","Error out if a file was not created.",6,null],[18,"O_FSYNC","","Same as `O_SYNC`.",6,null],[18,"O_LARGEFILE","","Allow files whose sizes can't be represented in an `off_t` to be opened.",6,null],[18,"O_NOATIME","","Do not update the file last access time during `read(2)`s.",6,null],[18,"O_NOCTTY","","Don't attach the device as the process' controlling terminal.",6,null],[18,"O_NDELAY","","Same as `O_NONBLOCK`.",6,null],[18,"O_NOFOLLOW","","`open()` will fail if the given path is a symbolic link.",6,null],[18,"O_NONBLOCK","","When possible, open the file in nonblocking mode.",6,null],[18,"O_PATH","","Obtain a file descriptor for low-level access.",6,null],[18,"O_RDONLY","","Only allow reading.",6,null],[18,"O_RDWR","","Allow both reading and writing.",6,null],[18,"O_RSYNC","","Similar to `O_DSYNC` but applies to `read`s instead.",6,null],[18,"O_SYNC","","Implicitly follow each `write()` with an `fsync()`.",6,null],[18,"O_TMPFILE","","Create an unnamed temporary file.",6,null],[18,"O_TRUNC","","Truncate an existing regular file to 0 length if it allows writing.",6,null],[18,"O_WRONLY","","Only allow writing.",6,null],[11,"empty","","Returns an empty set of flags.",6,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",6,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",6,{"inputs":[{"name":"c_int"}],"output":{"generics":["oflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",6,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",6,{"inputs":[{"name":"self"},{"name":"oflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitor_assign","","Adds the set of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",6,{"inputs":[{"name":"self"}],"output":{"name":"oflag"}}],[11,"extend","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sealflag"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"ordering"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"F_SEAL_SEAL","","Prevents further calls to `fcntl()` with `F_ADD_SEALS`.",7,null],[18,"F_SEAL_SHRINK","","The file cannot be reduced in size.",7,null],[18,"F_SEAL_GROW","","The size of the file cannot be increased.",7,null],[18,"F_SEAL_WRITE","","The file contents cannot be modified.",7,null],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"c_int"}],"output":{"generics":["sealflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,{"inputs":[{"name":"c_int"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",7,{"inputs":[{"name":"self"},{"name":"sealflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitor_assign","","Adds the set of flags.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",7,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",7,{"inputs":[{"name":"self"}],"output":{"name":"sealflag"}}],[11,"extend","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FD_CLOEXEC","","The file descriptor will automatically be closed during a successful `execve(2)`.",8,null],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"c_int"}],"output":{"generics":["fdflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",8,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",8,{"inputs":[{"name":"self"},{"name":"fdflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitor_assign","","Adds the set of flags.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",8,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"extend","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",8,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"splicefflags"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"ordering"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SPLICE_F_MOVE","","Request that pages be moved instead of copied.",9,null],[18,"SPLICE_F_NONBLOCK","","Do not block on I/O.",9,null],[18,"SPLICE_F_MORE","","Hint that more data will be coming in a subsequent splice.",9,null],[18,"SPLICE_F_GIFT","","Gift the user pages to the kernel.",9,null],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"c_uint"}],"output":{"generics":["splicefflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",9,{"inputs":[{"name":"c_uint"}],"output":{"name":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"bitor_assign","","Adds the set of flags.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",9,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",9,{"inputs":[{"name":"self"}],"output":{"name":"splicefflags"}}],[11,"extend","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",9,{"inputs":[{"name":"t"}],"output":{"name":"splicefflags"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fallocateflags"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"ordering"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FALLOC_FL_KEEP_SIZE","","File size is not changed.",10,null],[18,"FALLOC_FL_PUNCH_HOLE","","Deallocates space by creating a hole.",10,null],[18,"FALLOC_FL_COLLAPSE_RANGE","","Removes byte range from a file without leaving a hole.",10,null],[18,"FALLOC_FL_ZERO_RANGE","","Zeroes space in specified byte range.",10,null],[18,"FALLOC_FL_INSERT_RANGE","","Increases file space by inserting a hole within the file size.",10,null],[18,"FALLOC_FL_UNSHARE_RANGE","","Shared file data extants are made private to the file.",10,null],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[],"output":{"name":"fallocateflags"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[],"output":{"name":"fallocateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"c_int"}],"output":{"generics":["fallocateflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",10,{"inputs":[{"name":"c_int"}],"output":{"name":"fallocateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"fallocateflags"}}],[11,"bitor_assign","","Adds the set of flags.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"fallocateflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"fallocateflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":{"name":"fallocateflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",10,{"inputs":[{"name":"self"},{"name":"fallocateflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",10,{"inputs":[{"name":"self"}],"output":{"name":"fallocateflags"}}],[11,"extend","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",10,{"inputs":[{"name":"t"}],"output":{"name":"fallocateflags"}}],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"mount","","",null,{"inputs":[{"name":"option"},{"name":"p2"},{"name":"option"},{"name":"msflags"},{"name":"option"}],"output":{"name":"result"}}],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MS_RDONLY","","Mount read-only",11,null],[18,"MS_NOSUID","","Ignore suid and sgid bits",11,null],[18,"MS_NODEV","","Disallow access to device special files",11,null],[18,"MS_NOEXEC","","Disallow program execution",11,null],[18,"MS_SYNCHRONOUS","","Writes are synced at once",11,null],[18,"MS_REMOUNT","","Alter flags of a mounted FS",11,null],[18,"MS_MANDLOCK","","Allow mandatory locks on a FS",11,null],[18,"MS_DIRSYNC","","Directory modifications are synchronous",11,null],[18,"MS_NOATIME","","Do not update access times",11,null],[18,"MS_NODIRATIME","","Do not update directory access times",11,null],[18,"MS_BIND","","Linux 2.4.0 - Bind directory at different place",11,null],[18,"MS_MOVE","","",11,null],[18,"MS_REC","","",11,null],[18,"MS_SILENT","","",11,null],[18,"MS_POSIXACL","","",11,null],[18,"MS_UNBINDABLE","","",11,null],[18,"MS_PRIVATE","","",11,null],[18,"MS_SLAVE","","",11,null],[18,"MS_SHARED","","",11,null],[18,"MS_RELATIME","","",11,null],[18,"MS_KERNMOUNT","","",11,null],[18,"MS_I_VERSION","","",11,null],[18,"MS_STRICTATIME","","",11,null],[18,"MS_ACTIVE","","",11,null],[18,"MS_NOUSER","","",11,null],[18,"MS_RMT_MASK","","",11,null],[18,"MS_MGC_VAL","","",11,null],[18,"MS_MGC_MSK","","",11,null],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"c_ulong"}],"output":{"generics":["msflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",11,{"inputs":[{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",11,{"inputs":[{"name":"self"},{"name":"msflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitor_assign","","Adds the set of flags.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",11,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",11,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"extend","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"mntflags"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"ordering"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MNT_FORCE","","",12,null],[18,"MNT_DETACH","","",12,null],[18,"MNT_EXPIRE","","",12,null],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"c_int"}],"output":{"generics":["mntflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,{"inputs":[{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,{"inputs":[{"name":"self"},{"name":"mntflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitor_assign","","Adds the set of flags.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",12,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",12,{"inputs":[{"name":"self"}],"output":{"name":"mntflags"}}],[11,"extend","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[5,"mq_open","","Open a message queue",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"generics":["mqattr"],"name":"option"}],"output":{"generics":["mqd_t"],"name":"result"}}],[5,"mq_unlink","","Remove a message queue",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","Close a message queue",null,{"inputs":[{"name":"mqd_t"}],"output":{"name":"result"}}],[5,"mq_receive","","Receive a message from a message queue",null,null],[5,"mq_send","","Send a message to a message queue",null,null],[5,"mq_getattr","","Get message queue attributes",null,{"inputs":[{"name":"mqd_t"}],"output":{"generics":["mqattr"],"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only `O_NONBLOCK` can be set, everything else will be ignored Returns the old attributes It is recommend to use the `mq_set_nonblock()` and `mq_remove_nonblock()` convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd_t"},{"name":"mqattr"}],"output":{"generics":["mqattr"],"name":"result"}}],[5,"mq_set_nonblock","","Convenience function. Sets the `O_NONBLOCK` attribute for a given message queue descriptor Returns the old attributes",null,{"inputs":[{"name":"mqd_t"}],"output":{"generics":["mqattr"],"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function. Removes `O_NONBLOCK` attribute for a given message queue descriptor Returns the old attributes",null,{"inputs":[{"name":"mqd_t"}],"output":{"generics":["mqattr"],"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"mq_oflag"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"O_RDONLY","","",13,null],[18,"O_WRONLY","","",13,null],[18,"O_RDWR","","",13,null],[18,"O_CREAT","","",13,null],[18,"O_EXCL","","",13,null],[18,"O_NONBLOCK","","",13,null],[18,"O_CLOEXEC","","",13,null],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"c_int"}],"output":{"generics":["mq_oflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,{"inputs":[{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitor_assign","","Adds the set of flags.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",13,{"inputs":[{"name":"self"}],"output":{"name":"mq_oflag"}}],[11,"extend","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FD_CLOEXEC","","",14,null],[11,"empty","","Returns an empty set of flags.",14,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",14,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",14,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",14,{"inputs":[{"name":"c_int"}],"output":{"generics":["fdflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",14,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",14,{"inputs":[{"name":"self"},{"name":"fdflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitor_assign","","Adds the set of flags.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",14,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"extend","","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",14,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"mqattr"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"new","","",15,{"inputs":[{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[11,"flags","","",15,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[0,"pty","nix","Create master and slave virtual pseudo-terminals (PTYs)",null,null],[6,"SessionId","nix::pty","",null,null],[3,"Winsize","","",null,null],[12,"ws_row","","",16,null],[12,"ws_col","","",16,null],[12,"ws_xpixel","","",16,null],[12,"ws_ypixel","","",16,null],[3,"OpenptyResult","","Representation of a master/slave pty pair",null,null],[12,"master","","",17,null],[12,"slave","","",17,null],[3,"PtyMaster","","Representation of the Master device in a master/slave pty pair",null,null],[5,"grantpt","","Grant access to a slave pseudoterminal (see `grantpt(3)`)",null,{"inputs":[{"name":"ptymaster"}],"output":{"name":"result"}}],[5,"posix_openpt","","Open a pseudoterminal device (see `posix_openpt(3)`)",null,{"inputs":[{"name":"oflag"}],"output":{"generics":["ptymaster"],"name":"result"}}],[5,"ptsname","","Get the name of the slave pseudoterminal (see `ptsname(3)`)",null,{"inputs":[{"name":"ptymaster"}],"output":{"generics":["string"],"name":"result"}}],[5,"ptsname_r","","Get the name of the slave pseudoterminal (see `ptsname(3)`)",null,{"inputs":[{"name":"ptymaster"}],"output":{"generics":["string"],"name":"result"}}],[5,"unlockpt","","Unlock a pseudoterminal master/slave pseudoterminal pair (see `unlockpt(3)`)",null,{"inputs":[{"name":"ptymaster"}],"output":{"name":"result"}}],[5,"openpty","","Create a new pseudoterminal, returning the slave and master file descriptors in `OpenptyResult` (see `openpty`).",null,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"generics":["openptyresult"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",18,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",18,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"drop","","",18,{"inputs":[{"name":"self"}],"output":null}],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","This is a wrapper around `libc::pollfd`.",null,null],[3,"EventFlags","","These flags define the different events that can be monitored by `poll` and `ppoll`",null,null],[5,"poll","","`poll` waits for one of a set of file descriptors to become ready to perform I/O. (`poll(2)`)",null,null],[5,"ppoll","","`ppoll()` allows an application to safely wait until either a file descriptor becomes ready or until a signal is caught. (`poll(2)`)",null,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"new","","Creates a new `PollFd` specifying the events of interest for a given file descriptor.",19,{"inputs":[{"name":"rawfd"},{"name":"eventflags"}],"output":{"name":"pollfd"}}],[11,"revents","","Returns the events that occured in the last call to `poll` or `ppoll`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["eventflags"],"name":"option"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"eventflags"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"ordering"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"POLLIN","","There is data to read.",20,null],[18,"POLLPRI","","There is some exceptional condition on the file descriptor.",20,null],[18,"POLLOUT","","Writing is now possible, though a write larger that the available space in a socket or pipe will still block (unless `O_NONBLOCK` is set).",20,null],[18,"POLLRDNORM","","Equivalent to `POLLIN`",20,null],[18,"POLLWRNORM","","Equivalent to `POLLOUT`",20,null],[18,"POLLRDBAND","","Priority band data can be read (generally unused on Linux).",20,null],[18,"POLLWRBAND","","Priority data may be written.",20,null],[18,"POLLERR","","Error condition (only returned in `PollFd::revents`; ignored in `PollFd::new`). This bit is also set for a file descriptor referring to the write end of a pipe when the read end has been closed.",20,null],[18,"POLLHUP","","Hang up (only returned in `PollFd::revents`; ignored in `PollFd::new`). Note that when reading from a channel such as a pipe or a stream socket, this event merely indicates that the peer closed its end of the channel.  Subsequent reads from the channel will return 0 (end of file) only after all outstanding data in the channel has been consumed.",20,null],[18,"POLLNVAL","","Invalid request: `fd` not open (only returned in `PollFd::revents`; ignored in `PollFd::new`).",20,null],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"self"}],"output":{"name":"c_short"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"c_short"}],"output":{"generics":["eventflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",20,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",20,{"inputs":[{"name":"self"},{"name":"eventflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitor_assign","","Adds the set of flags.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",20,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"self"}],"output":{"name":"eventflags"}}],[11,"extend","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[3,"InterfaceFlags","nix::net::if_","Standard interface flags, used by `getifaddrs`",null,null],[5,"if_nametoindex","","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"generics":["c_uint"],"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"interfaceflags"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"ordering"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IFF_UP","","Interface is running. (see `netdevice(7)`)",21,null],[18,"IFF_BROADCAST","","Valid broadcast address set. (see `netdevice(7)`)",21,null],[18,"IFF_DEBUG","","Internal debugging flag. (see `netdevice(7)`)",21,null],[18,"IFF_LOOPBACK","","Interface is a loopback interface. (see `netdevice(7)`)",21,null],[18,"IFF_POINTOPOINT","","Interface is a point-to-point link. (see `netdevice(7)`)",21,null],[18,"IFF_NOTRAILERS","","Avoid use of trailers. (see `netdevice(7)`)",21,null],[18,"IFF_RUNNING","","Resources allocated. (see `netdevice(7)`)",21,null],[18,"IFF_NOARP","","No arp protocol, L2 destination address not set. (see `netdevice(7)`)",21,null],[18,"IFF_PROMISC","","Interface is in promiscuous mode. (see `netdevice(7)`)",21,null],[18,"IFF_ALLMULTI","","Receive all multicast packets. (see `netdevice(7)`)",21,null],[18,"IFF_MASTER","","Master of a load balancing bundle. (see `netdevice(7)`)",21,null],[18,"IFF_SLAVE","","Slave of a load balancing bundle. (see `netdevice(7)`)",21,null],[18,"IFF_MULTICAST","","Supports multicast. (see `netdevice(7)`)",21,null],[18,"IFF_PORTSEL","","Is able to select media type via ifmap. (see `netdevice(7)`)",21,null],[18,"IFF_AUTOMEDIA","","Auto media selection active. (see `netdevice(7)`)",21,null],[18,"IFF_DYNAMIC","","The addresses are lost when the interface goes down. (see `netdevice(7)`)",21,null],[18,"IFF_LOWER_UP","","Driver signals L1 up. Volatile.",21,null],[18,"IFF_DORMANT","","Driver signals dormant. Volatile.",21,null],[18,"IFF_ECHO","","Echo sent packets. Volatile.",21,null],[11,"empty","","Returns an empty set of flags.",21,{"inputs":[],"output":{"name":"interfaceflags"}}],[11,"all","","Returns the set containing all flags.",21,{"inputs":[],"output":{"name":"interfaceflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",21,{"inputs":[{"name":"c_int"}],"output":{"generics":["interfaceflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",21,{"inputs":[{"name":"c_int"}],"output":{"name":"interfaceflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"interfaceflags"}}],[11,"bitor_assign","","Adds the set of flags.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"interfaceflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"interfaceflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"interfaceflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",21,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",21,{"inputs":[{"name":"self"}],"output":{"name":"interfaceflags"}}],[11,"extend","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",21,{"inputs":[{"name":"t"}],"output":{"name":"interfaceflags"}}],[0,"ifaddrs","nix","Query network interface addresses",null,null],[3,"InterfaceAddress","nix::ifaddrs","Describes a single address for an interface as returned by `getifaddrs`.",null,null],[12,"interface_name","","Name of the network interface",22,null],[12,"flags","","Flags as from `SIOCGIFFLAGS` ioctl",22,null],[12,"address","","Network address of this interface",22,null],[12,"netmask","","Netmask of this interface",22,null],[12,"broadcast","","Broadcast address of this interface, if applicable",22,null],[12,"destination","","Point-to-point destination address",22,null],[3,"InterfaceAddressIterator","","Holds the results of `getifaddrs`.",null,null],[5,"getifaddrs","","Get interface addresses using libc's `getifaddrs`",null,{"inputs":[],"output":{"generics":["interfaceaddressiterator"],"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"interfaceaddress"}}],[11,"hash","","",22,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"interfaceaddress"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"interfaceaddress"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"interfaceaddressiterator"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"interfaceaddressiterator"}],"output":{"name":"bool"}}],[11,"drop","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[3,"CpuSet","","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"pid"},{"name":"cpuset"}],"output":{"name":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"result"}}],[5,"setns","","",null,{"inputs":[{"name":"rawfd"},{"name":"cloneflags"}],"output":{"name":"result"}}],[6,"CloneCb","","",null,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cloneflags"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"ordering"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CLONE_VM","","",24,null],[18,"CLONE_FS","","",24,null],[18,"CLONE_FILES","","",24,null],[18,"CLONE_SIGHAND","","",24,null],[18,"CLONE_PTRACE","","",24,null],[18,"CLONE_VFORK","","",24,null],[18,"CLONE_PARENT","","",24,null],[18,"CLONE_THREAD","","",24,null],[18,"CLONE_NEWNS","","",24,null],[18,"CLONE_SYSVSEM","","",24,null],[18,"CLONE_SETTLS","","",24,null],[18,"CLONE_PARENT_SETTID","","",24,null],[18,"CLONE_CHILD_CLEARTID","","",24,null],[18,"CLONE_DETACHED","","",24,null],[18,"CLONE_UNTRACED","","",24,null],[18,"CLONE_CHILD_SETTID","","",24,null],[18,"CLONE_NEWCGROUP","","",24,null],[18,"CLONE_NEWUTS","","",24,null],[18,"CLONE_NEWIPC","","",24,null],[18,"CLONE_NEWUSER","","",24,null],[18,"CLONE_NEWPID","","",24,null],[18,"CLONE_NEWNET","","",24,null],[18,"CLONE_IO","","",24,null],[11,"empty","","Returns an empty set of flags.",24,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",24,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",24,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",24,{"inputs":[{"name":"c_int"}],"output":{"generics":["cloneflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",24,{"inputs":[{"name":"c_int"}],"output":{"name":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"bitor_assign","","Adds the set of flags.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",24,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",24,{"inputs":[{"name":"self"}],"output":{"name":"cloneflags"}}],[11,"extend","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",24,{"inputs":[{"name":"t"}],"output":{"name":"cloneflags"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"cpuset"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"cpuset"}}],[11,"is_set","","",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set","","",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"unset","","",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[0,"sys","nix","",null,null],[0,"aio","nix::sys","POSIX Asynchronous I/O",null,null],[3,"AioCb","nix::sys::aio","AIO Control Block.",null,null],[4,"AioFsyncMode","","Mode for `AioCb::fsync`.  Controls whether only data or both data and metadata are synced.",null,null],[13,"O_SYNC","","do it like `fsync`",26,null],[13,"O_DSYNC","","on supported operating systems only, do it like `fdatasync`",26,null],[4,"LioOpcode","","When used with `lio_listio`, determines whether a given `aiocb` should be used for a read operation, a write operation, or ignored.  Has no effect for any other aio functions.",null,null],[13,"LIO_NOP","","",27,null],[13,"LIO_WRITE","","",27,null],[13,"LIO_READ","","",27,null],[4,"LioMode","","Mode for `lio_listio`",null,null],[13,"LIO_WAIT","","Requests that `lio_listio` block until all requested operations have been completed",28,null],[13,"LIO_NOWAIT","","Requests that `lio_listio` return immediately",28,null],[4,"AioCancelStat","","Return values for `AioCb::cancel` and `aio_cancel_all`",null,null],[13,"AioCanceled","","All outstanding requests were canceled",29,null],[13,"AioNotCanceled","","Some requests were not canceled.  Their status should be checked with `AioCb::error`",29,null],[13,"AioAllDone","","All of the requests have already finished",29,null],[4,"Buffer","","Owns (uniquely or shared) a memory buffer to keep it from `Drop`ing while the kernel has a pointer to it.",null,null],[13,"None","","No buffer to own.",30,null],[13,"Bytes","","Immutable shared ownership `Bytes` object",30,null],[13,"BytesMut","","Mutable uniquely owned `BytesMut` object",30,null],[13,"Phantom","","Keeps a reference to a slice",30,null],[5,"aio_cancel_all","","Cancels outstanding AIO requests for a given file descriptor.",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["aiocancelstat"],"name":"result"}}],[5,"aio_suspend","","Suspends the calling process until at least one of the specified `AioCb`s has completed, a signal is delivered, or the timeout has passed.",null,null],[5,"lio_listio","","Submits multiple asynchronous I/O requests with a single system call.",null,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"aiofsyncmode"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"self"},{"name":"aiofsyncmode"}],"output":{"name":"ordering"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"aiofsyncmode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"aiofsyncmode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"lioopcode"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"lioopcode"}],"output":{"name":"ordering"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"lioopcode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"lioopcode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"liomode"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"liomode"}],"output":{"name":"ordering"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"liomode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"liomode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"aiocancelstat"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"aiocancelstat"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bytes","","Return the inner `Bytes`, if any",30,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"bytes_mut","","Return the inner `BytesMut`, if any",30,{"inputs":[{"name":"self"}],"output":{"generics":["bytesmut"],"name":"option"}}],[11,"is_none","","Is this `Buffer` `None`?",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"buffer","","Remove the inner `Buffer` and return it",31,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"fd","","Returns the underlying file descriptor associated with the `AioCb`",31,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_fd","","Constructs a new `AioCb` with no associated buffer.",31,{"inputs":[{"name":"rawfd"},{"name":"c_int"},{"name":"sigevnotify"}],"output":{"name":"aiocb"}}],[11,"from_mut_slice","","Constructs a new `AioCb` from a mutable slice.",31,null],[11,"from_bytes","","Constructs a new `AioCb` from a `Bytes` object.",31,{"inputs":[{"name":"rawfd"},{"name":"off_t"},{"name":"bytes"},{"name":"c_int"},{"name":"sigevnotify"},{"name":"lioopcode"}],"output":{"name":"aiocb"}}],[11,"from_bytes_mut","","Constructs a new `AioCb` from a `BytesMut` object.",31,{"inputs":[{"name":"rawfd"},{"name":"off_t"},{"name":"bytesmut"},{"name":"c_int"},{"name":"sigevnotify"},{"name":"lioopcode"}],"output":{"name":"aiocb"}}],[11,"from_mut_ptr","","Constructs a new `AioCb` from a mutable raw pointer",31,null],[11,"from_ptr","","Constructs a new `AioCb` from a raw pointer.",31,null],[11,"from_slice","","Like `from_mut_slice`, but works on constant slices rather than mutable slices.",31,null],[11,"into_buffer","","Consumes the `aiocb` and returns its inner `Buffer`, if any.",31,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"set_sigev_notify","","Update the notification settings for an existing `aiocb`",31,{"inputs":[{"name":"self"},{"name":"sigevnotify"}],"output":null}],[11,"cancel","","Cancels an outstanding AIO request.",31,{"inputs":[{"name":"self"}],"output":{"generics":["aiocancelstat"],"name":"result"}}],[11,"error","","Retrieve error status of an asynchronous operation.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fsync","","An asynchronous version of `fsync(2)`.",31,{"inputs":[{"name":"self"},{"name":"aiofsyncmode"}],"output":{"name":"result"}}],[11,"lio_opcode","","Returns the `aiocb`'s `LioOpcode` field",31,{"inputs":[{"name":"self"}],"output":{"generics":["lioopcode"],"name":"option"}}],[11,"nbytes","","Returns the requested length of the aio operation in bytes",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"offset","","Returns the file offset stored in the `AioCb`",31,{"inputs":[{"name":"self"}],"output":{"name":"off_t"}}],[11,"priority","","Returns the priority of the `AioCb`",31,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"read","","Asynchronously reads from a file descriptor into a buffer",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"sigevent","","Returns the `SigEvent` stored in the `AioCb`",31,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"aio_return","","Retrieve return status of an asynchronous operation.",31,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[11,"write","","Asynchronously writes from a buffer to a file descriptor",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","If the `AioCb` has no remaining state in the kernel, just drop it. Otherwise, dropping constitutes a resource leak, which is an error",31,{"inputs":[{"name":"self"}],"output":null}],[0,"epoll","nix::sys","",null,null],[3,"EpollFlags","nix::sys::epoll","",null,null],[3,"EpollCreateFlags","","",null,null],[3,"EpollEvent","","",null,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",32,null],[13,"EpollCtlDel","","",32,null],[13,"EpollCtlMod","","",32,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"generics":["rawfd"],"name":"result"}}],[5,"epoll_create1","","",null,{"inputs":[{"name":"epollcreateflags"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"rawfd"},{"name":"epollop"},{"name":"rawfd"},{"name":"t"}],"output":{"name":"result"}}],[5,"epoll_wait","","",null,null],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"epollflags"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"bool"}}],[11,"cmp","","",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"ordering"}}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"EPOLLIN","","",33,null],[18,"EPOLLPRI","","",33,null],[18,"EPOLLOUT","","",33,null],[18,"EPOLLRDNORM","","",33,null],[18,"EPOLLRDBAND","","",33,null],[18,"EPOLLWRNORM","","",33,null],[18,"EPOLLWRBAND","","",33,null],[18,"EPOLLMSG","","",33,null],[18,"EPOLLERR","","",33,null],[18,"EPOLLHUP","","",33,null],[18,"EPOLLRDHUP","","",33,null],[18,"EPOLLEXCLUSIVE","","",33,null],[18,"EPOLLWAKEUP","","",33,null],[18,"EPOLLONESHOT","","",33,null],[18,"EPOLLET","","",33,null],[11,"empty","","Returns an empty set of flags.",33,{"inputs":[],"output":{"name":"epollflags"}}],[11,"all","","Returns the set containing all flags.",33,{"inputs":[],"output":{"name":"epollflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",33,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",33,{"inputs":[{"name":"c_int"}],"output":{"generics":["epollflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",33,{"inputs":[{"name":"c_int"}],"output":{"name":"epollflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",33,{"inputs":[{"name":"self"},{"name":"epollflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"epollflags"}}],[11,"bitor_assign","","Adds the set of flags.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"epollflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"epollflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":{"name":"epollflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",33,{"inputs":[{"name":"self"},{"name":"epollflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",33,{"inputs":[{"name":"self"}],"output":{"name":"epollflags"}}],[11,"extend","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",33,{"inputs":[{"name":"t"}],"output":{"name":"epollflags"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"epollop"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"epollop"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"epollcreateflags"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"bool"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"ordering"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"EPOLL_CLOEXEC","","",34,null],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[],"output":{"name":"epollcreateflags"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[],"output":{"name":"epollcreateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"c_int"}],"output":{"generics":["epollcreateflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",34,{"inputs":[{"name":"c_int"}],"output":{"name":"epollcreateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"epollcreateflags"}}],[11,"bitor_assign","","Adds the set of flags.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"epollcreateflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"epollcreateflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":{"name":"epollcreateflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",34,{"inputs":[{"name":"self"},{"name":"epollcreateflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",34,{"inputs":[{"name":"self"}],"output":{"name":"epollcreateflags"}}],[11,"extend","","",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",34,{"inputs":[{"name":"t"}],"output":{"name":"epollcreateflags"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"epollevent"}}],[11,"new","","",35,{"inputs":[{"name":"epollflags"},{"name":"u64"}],"output":{"name":"self"}}],[11,"empty","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"events","","",35,{"inputs":[{"name":"self"}],"output":{"name":"epollflags"}}],[11,"data","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"eventfd","nix::sys","",null,null],[3,"EfdFlags","nix::sys::eventfd","",null,null],[5,"eventfd","","",null,{"inputs":[{"name":"c_uint"},{"name":"efdflags"}],"output":{"generics":["rawfd"],"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"efdflags"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"bool"}}],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"ordering"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"EFD_CLOEXEC","","",36,null],[18,"EFD_NONBLOCK","","",36,null],[18,"EFD_SEMAPHORE","","",36,null],[11,"empty","","Returns an empty set of flags.",36,{"inputs":[],"output":{"name":"efdflags"}}],[11,"all","","Returns the set containing all flags.",36,{"inputs":[],"output":{"name":"efdflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",36,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",36,{"inputs":[{"name":"c_int"}],"output":{"generics":["efdflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",36,{"inputs":[{"name":"c_int"}],"output":{"name":"efdflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",36,{"inputs":[{"name":"self"},{"name":"efdflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"efdflags"}}],[11,"bitor_assign","","Adds the set of flags.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"efdflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"efdflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":{"name":"efdflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",36,{"inputs":[{"name":"self"},{"name":"efdflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",36,{"inputs":[{"name":"self"}],"output":{"name":"efdflags"}}],[11,"extend","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",36,{"inputs":[{"name":"t"}],"output":{"name":"efdflags"}}],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"inputs":[{"name":"cstr"},{"name":"memfdcreateflag"}],"output":{"generics":["rawfd"],"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"memfdcreateflag"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"cmp","","",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"ordering"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MFD_CLOEXEC","","",37,null],[18,"MFD_ALLOW_SEALING","","",37,null],[11,"empty","","Returns an empty set of flags.",37,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",37,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",37,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",37,{"inputs":[{"name":"c_uint"}],"output":{"generics":["memfdcreateflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",37,{"inputs":[{"name":"c_uint"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitor_assign","","Adds the set of flags.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",37,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",37,{"inputs":[{"name":"self"}],"output":{"name":"memfdcreateflag"}}],[11,"extend","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",37,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls.",null,null],[0,"sendfile","","",null,null],[5,"sendfile","nix::sys::sendfile","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"generics":["off_t"],"name":"option"},{"name":"usize"}],"output":{"generics":["usize"],"name":"result"}}],[0,"signal","nix::sys","",null,null],[3,"SigEvent","nix::sys::signal","Used to request asynchronous notification of the completion of certain events, such as POSIX AIO and timers.",null,null],[3,"SignalIterator","","",null,null],[3,"SaFlags","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"Signal","","",null,null],[13,"SIGHUP","","",38,null],[13,"SIGINT","","",38,null],[13,"SIGQUIT","","",38,null],[13,"SIGILL","","",38,null],[13,"SIGTRAP","","",38,null],[13,"SIGABRT","","",38,null],[13,"SIGBUS","","",38,null],[13,"SIGFPE","","",38,null],[13,"SIGKILL","","",38,null],[13,"SIGUSR1","","",38,null],[13,"SIGSEGV","","",38,null],[13,"SIGUSR2","","",38,null],[13,"SIGPIPE","","",38,null],[13,"SIGALRM","","",38,null],[13,"SIGTERM","","",38,null],[13,"SIGSTKFLT","","",38,null],[13,"SIGCHLD","","",38,null],[13,"SIGCONT","","",38,null],[13,"SIGSTOP","","",38,null],[13,"SIGTSTP","","",38,null],[13,"SIGTTIN","","",38,null],[13,"SIGTTOU","","",38,null],[13,"SIGURG","","",38,null],[13,"SIGXCPU","","",38,null],[13,"SIGXFSZ","","",38,null],[13,"SIGVTALRM","","",38,null],[13,"SIGPROF","","",38,null],[13,"SIGWINCH","","",38,null],[13,"SIGIO","","",38,null],[13,"SIGPWR","","",38,null],[13,"SIGSYS","","",38,null],[4,"SigmaskHow","","",null,null],[13,"SIG_BLOCK","","",39,null],[13,"SIG_UNBLOCK","","",39,null],[13,"SIG_SETMASK","","",39,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",40,null],[13,"SigIgn","","",40,null],[13,"Handler","","",40,null],[13,"SigAction","","",40,null],[4,"SigevNotify","","Used to request asynchronous notification of certain events, for example, with POSIX AIO, POSIX message queues, and POSIX timers.",null,null],[13,"SigevNone","","No notification will be delivered",41,null],[13,"SigevSignal","","The signal given by `signal` will be delivered to the process.  The value in `si_value` will be present in the `si_value` field of the `siginfo_t` structure of the queued signal.",41,null],[12,"signal","nix::sys::signal::SigevNotify","",41,null],[12,"si_value","","",41,null],[13,"SigevThreadId","nix::sys::signal","The signal `signal` is queued to the thread whose LWP ID is given in `thread_id`.  The value stored in `si_value` will be present in the `si_value` of the `siginfo_t` structure of the queued signal.",41,null],[12,"signal","nix::sys::signal::SigevNotify","",41,null],[12,"thread_id","","",41,null],[12,"si_value","","",41,null],[5,"sigaction","nix::sys::signal","",null,{"inputs":[{"name":"signal"},{"name":"sigaction"}],"output":{"generics":["sigaction"],"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigmaskhow"},{"generics":["sigset"],"name":"option"},{"generics":["sigset"],"name":"option"}],"output":{"name":"result"}}],[5,"sigprocmask","","Examine and change blocked signals.",null,{"inputs":[{"name":"sigmaskhow"},{"generics":["sigset"],"name":"option"},{"generics":["sigset"],"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid"},{"name":"t"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signal"}],"output":{"name":"result"}}],[11,"new","","Note: this constructor does not allow the user to set the `sigev_notify_kevent_flags` field.  That's considered ok because on FreeBSD at least those flags don't do anything useful.  That field is part of a union that shares space with the more genuinely useful fields.",42,{"inputs":[{"name":"sigevnotify"}],"output":{"name":"sigevent"}}],[11,"sigevent","","",42,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",42,{"inputs":[{"name":"sigevent"}],"output":{"name":"self"}}],[6,"type_of_thread_id","","",null,null],[17,"NSIG","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGUNUSED","","",null,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"signal"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"signal"}],"output":{"name":"ordering"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"signal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"signal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"next","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["signal"],"name":"option"}}],[11,"iterator","","",38,{"inputs":[],"output":{"name":"signaliterator"}}],[11,"from_c_int","","",38,{"inputs":[{"name":"c_int"}],"output":{"generics":["signal"],"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"saflags"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"ordering"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SA_NOCLDSTOP","","",44,null],[18,"SA_NOCLDWAIT","","",44,null],[18,"SA_NODEFER","","",44,null],[18,"SA_ONSTACK","","",44,null],[18,"SA_RESETHAND","","",44,null],[18,"SA_RESTART","","",44,null],[18,"SA_SIGINFO","","",44,null],[11,"empty","","Returns an empty set of flags.",44,{"inputs":[],"output":{"name":"saflags"}}],[11,"all","","Returns the set containing all flags.",44,{"inputs":[],"output":{"name":"saflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",44,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",44,{"inputs":[{"name":"c_int"}],"output":{"generics":["saflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",44,{"inputs":[{"name":"c_int"}],"output":{"name":"saflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",44,{"inputs":[{"name":"self"},{"name":"saflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"saflags"}}],[11,"bitor_assign","","Adds the set of flags.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"saflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"saflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"saflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",44,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",44,{"inputs":[{"name":"self"}],"output":{"name":"saflags"}}],[11,"extend","","",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",44,{"inputs":[{"name":"t"}],"output":{"name":"saflags"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"sigmaskhow"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"sigmaskhow"}],"output":{"name":"ordering"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"sigmaskhow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"sigmaskhow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"sigset"}}],[11,"all","","",45,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",45,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",45,{"inputs":[{"name":"self"},{"name":"signal"}],"output":null}],[11,"clear","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","",45,{"inputs":[{"name":"self"},{"name":"signal"}],"output":null}],[11,"contains","","",45,{"inputs":[{"name":"self"},{"name":"signal"}],"output":{"name":"bool"}}],[11,"extend","","",45,{"inputs":[{"name":"self"},{"name":"sigset"}],"output":null}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",45,{"inputs":[],"output":{"generics":["sigset"],"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",45,{"inputs":[{"name":"self"},{"name":"sigmaskhow"}],"output":{"generics":["sigset"],"name":"result"}}],[11,"wait","","Suspends execution of the calling thread until one of the signals in the signal mask becomes pending, and returns the accepted signal.",45,{"inputs":[{"name":"self"}],"output":{"generics":["signal"],"name":"result"}}],[11,"as_ref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"sighandler"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the type of the `handler` argument.",46,{"inputs":[{"name":"sighandler"},{"name":"saflags"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[11,"flags","","",46,{"inputs":[{"name":"self"}],"output":{"name":"saflags"}}],[11,"mask","","",46,{"inputs":[{"name":"self"}],"output":{"name":"sigset"}}],[11,"handler","","",46,{"inputs":[{"name":"self"}],"output":{"name":"sighandler"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"sigevnotify"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"sigevnotify"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"sigevnotify"}],"output":{"name":"bool"}}],[0,"signalfd","nix::sys","Interface for the `signalfd` syscall.",null,null],[3,"siginfo","nix::sys::signalfd","",null,null],[12,"ssi_signo","","",47,null],[12,"ssi_errno","","",47,null],[12,"ssi_code","","",47,null],[12,"ssi_pid","","",47,null],[12,"ssi_uid","","",47,null],[12,"ssi_fd","","",47,null],[12,"ssi_tid","","",47,null],[12,"ssi_band","","",47,null],[12,"ssi_overrun","","",47,null],[12,"ssi_trapno","","",47,null],[12,"ssi_status","","",47,null],[12,"ssi_int","","",47,null],[12,"ssi_ptr","","",47,null],[12,"ssi_utime","","",47,null],[12,"ssi_stime","","",47,null],[12,"ssi_addr","","",47,null],[3,"SfdFlags","","",null,null],[3,"SignalFd","","A helper struct for creating, reading and closing a `signalfd` instance.",null,null],[5,"signalfd","","Creates a new file descriptor for reading signals.",null,{"inputs":[{"name":"rawfd"},{"name":"sigset"},{"name":"sfdflags"}],"output":{"generics":["rawfd"],"name":"result"}}],[17,"SIGNALFD_NEW","","",null,null],[17,"SIGNALFD_SIGINFO_SIZE","","",null,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sfdflags"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"cmp","","",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"ordering"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SFD_NONBLOCK","","",48,null],[18,"SFD_CLOEXEC","","",48,null],[11,"empty","","Returns an empty set of flags.",48,{"inputs":[],"output":{"name":"sfdflags"}}],[11,"all","","Returns the set containing all flags.",48,{"inputs":[],"output":{"name":"sfdflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",48,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",48,{"inputs":[{"name":"c_int"}],"output":{"generics":["sfdflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",48,{"inputs":[{"name":"c_int"}],"output":{"name":"sfdflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"bitor_assign","","Adds the set of flags.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",48,{"inputs":[{"name":"self"},{"name":"sfdflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",48,{"inputs":[{"name":"self"}],"output":{"name":"sfdflags"}}],[11,"extend","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",48,{"inputs":[{"name":"t"}],"output":{"name":"sfdflags"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"signalfd"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"signalfd"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"signalfd"}],"output":{"name":"bool"}}],[11,"new","","",49,{"inputs":[{"name":"sigset"}],"output":{"generics":["signalfd"],"name":"result"}}],[11,"with_flags","","",49,{"inputs":[{"name":"sigset"},{"name":"sfdflags"}],"output":{"generics":["signalfd"],"name":"result"}}],[11,"set_mask","","",49,{"inputs":[{"name":"self"},{"name":"sigset"}],"output":{"name":"result"}}],[11,"read_signal","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"drop","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"as_raw_fd","","",49,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"cmsghdr","nix::sys::socket","",null,null],[12,"cmsg_len","","",50,null],[12,"cmsg_level","","",50,null],[12,"cmsg_type","","",50,null],[3,"msghdr","","",null,null],[12,"msg_name","","",51,null],[12,"msg_namelen","","",51,null],[12,"msg_iov","","",51,null],[12,"msg_iovlen","","",51,null],[12,"msg_control","","",51,null],[12,"msg_controllen","","",51,null],[12,"msg_flags","","",51,null],[6,"sa_family_t","","",null,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",52,null],[12,"sa_data","","",52,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",53,null],[12,"sin_port","","",53,null],[12,"sin_addr","","",53,null],[12,"sin_zero","","",53,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",54,null],[12,"sin6_port","","",54,null],[12,"sin6_flowinfo","","",54,null],[12,"sin6_addr","","",54,null],[12,"sin6_scope_id","","",54,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",55,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",56,null],[12,"sun_path","","",56,null],[3,"UnixAddr","","A wrapper around `sockaddr_un`.",null,null],[12,"0","","",57,null],[12,"1","","",57,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",58,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",59,null],[3,"LinkAddr","","Hardware Address",null,null],[12,"0","","",60,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",61,null],[3,"SockFlag","","Additional socket options",null,null],[3,"MsgFlags","","Flags for send/recv and their relatives",null,null],[3,"UnixCredentials","","Unix credentials of the sending process.",null,null],[3,"IpMembershipRequest","","Request for multicast socket operations",null,null],[3,"Ipv6MembershipRequest","","Request for ipv6 multicast socket operations",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The size and alignment match that of a cmsghdr followed by a T, but the fields are not accessible, as the actual types will change on a call to recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",62,null],[12,"address","","",62,null],[12,"flags","","",62,null],[3,"CmsgIterator","","",null,null],[4,"AddressFamily","","These constants specify the protocol family to be used in `socket` and `socketpair`",null,null],[13,"Unix","","Local communication (see `unix(7)`)",63,null],[13,"Inet","","IPv4 Internet protocols (see `ip(7)`)",63,null],[13,"Inet6","","IPv6 Internet protocols (see `ipv6(7)`)",63,null],[13,"Netlink","","Kernel user interface device (see `netlink(7)`)",63,null],[13,"Packet","","Low level packet interface (see `packet(7)`)",63,null],[13,"Ax25","","Amateur radio AX.25 protocol",63,null],[13,"Ipx","","IPX - Novell protocols",63,null],[13,"AppleTalk","","AppleTalk",63,null],[13,"NetRom","","",63,null],[13,"Bridge","","",63,null],[13,"AtmPvc","","Access to raw ATM PVCs",63,null],[13,"X25","","ITU-T X.25 / ISO-8208 protocol (see `x25(7)`)",63,null],[13,"Rose","","",63,null],[13,"Decnet","","",63,null],[13,"NetBeui","","",63,null],[13,"Security","","",63,null],[13,"Key","","",63,null],[13,"Ash","","",63,null],[13,"Econet","","",63,null],[13,"AtmSvc","","",63,null],[13,"Rds","","",63,null],[13,"Sna","","",63,null],[13,"Irda","","",63,null],[13,"Pppox","","",63,null],[13,"Wanpipe","","",63,null],[13,"Llc","","",63,null],[13,"Ib","","",63,null],[13,"Mpls","","",63,null],[13,"Can","","",63,null],[13,"Tipc","","",63,null],[13,"Bluetooth","","",63,null],[13,"Iucv","","",63,null],[13,"RxRpc","","",63,null],[13,"Isdn","","",63,null],[13,"Phonet","","",63,null],[13,"Ieee802154","","",63,null],[13,"Caif","","",63,null],[13,"Alg","","Interface to kernel crypto API",63,null],[13,"Nfc","","",63,null],[13,"Vsock","","",63,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",64,null],[13,"Unix","","",64,null],[13,"Netlink","","",64,null],[13,"Link","","Datalink address (MAC)",64,null],[4,"InetAddr","","",null,null],[13,"V4","","",65,null],[13,"V6","","",65,null],[4,"IpAddr","","",null,null],[13,"V4","","",66,null],[13,"V6","","",66,null],[4,"SockType","","These constants are used to specify the communication semantics when creating a socket with `socket()`",null,null],[13,"Stream","","Provides sequenced, reliable, two-way, connection- based byte streams.  An out-of-band data transmission mechanism may be supported.",67,null],[13,"Datagram","","Supports datagrams (connectionless, unreliable messages of a fixed maximum length).",67,null],[13,"SeqPacket","","Provides a sequenced, reliable, two-way connection- based data transmission path for datagrams of fixed maximum length; a consumer is required to read an entire packet with each input system call.",67,null],[13,"Raw","","Provides raw network protocol access.",67,null],[13,"Rdm","","Provides a reliable datagram layer that does not guarantee ordering.",67,null],[4,"SockProtocol","","Constants used in `socket` and `socketpair` to specify the protocol to use.",null,null],[13,"Tcp","","TCP protocol (ip(7))",68,null],[13,"Udp","","UDP protocol (ip(7))",68,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may be added to this enum; do not exhaustively pattern-match it. Further reading",null,null],[13,"ScmRights","","A message of type `SCM_RIGHTS`, containing an array of file descriptors passed between processes.",69,null],[13,"ScmTimestamp","","A message of type `SCM_TIMESTAMP`, containing the time the packet was received by the kernel.",69,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an argument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",70,null],[13,"Tcp","","",70,null],[13,"Ip","","",70,null],[13,"Ipv6","","",70,null],[13,"Udp","","",70,null],[13,"Netlink","","",70,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",71,null],[13,"Write","","Further  transmissions will be disallowed.",71,null],[13,"Both","","Further receptions and transmissions will be disallowed.",71,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied by ancillary data. Optionally direct the message at the given address, as with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and optionally receive ancillary data into the provided buffer. If no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"t"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"t"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of bytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns the number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","Send a message to a socket",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,null],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"sockaddr_storage_to_addr","","Return the appropriate `SockAddr` type from a `sockaddr_storage` of a certain size.  In C this would usually be done by casting.  The `len` argument should be the number of bytes in the `sockaddr_storage` that are actually allocated and valid.  It must be at least as large as all the useful parts of the structure.  Note that in the case of a `sockaddr_un`, `len` need not include the terminating null.",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"netlinkaddr"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",61,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","",61,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"netlinkaddr"}}],[11,"pid","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"groups","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"linkaddr"}}],[11,"family","","Always AF_PACKET",60,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"protocol","","Physical-layer protocol",60,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"ifindex","","Interface number",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"hatype","","ARP hardware type",60,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"pkttype","","Packet type",60,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"halen","","Length of MAC address",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"addr","","Physical-layer address (MAC)",60,null],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",60,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"from_i32","","Create a new `AddressFamily` from an integer value retrieved from `libc`, usually from the `sa_family` field of a `sockaddr`.",63,{"inputs":[{"name":"i32"}],"output":{"generics":["addressfamily"],"name":"option"}}],[11,"from_std","","",65,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",65,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",65,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",65,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"to_std","","",65,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",65,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",65,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",66,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",66,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",58,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",58,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",58,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",58,null],[11,"to_std","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",58,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"new","","",59,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",59,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",59,null],[11,"to_std","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",57,{"inputs":[{"name":"p"}],"output":{"generics":["unixaddr"],"name":"result"}}],[11,"new_abstract","","Create a new `sockaddr_un` representing an address in the \"abstract namespace\".",57,null],[11,"path","","If this address represents a filesystem path, return that path.",57,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"as_abstract","","If this address represents an abstract socket, return its name.",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",57,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",64,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",64,{"inputs":[{"name":"p"}],"output":{"generics":["sockaddr"],"name":"result"}}],[11,"new_netlink","","",64,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"sockaddr"}}],[11,"family","","",64,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",64,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_libc_sockaddr","","Creates a `SockAddr` struct from libc's sockaddr.",64,null],[11,"as_ffi_pair","","Conversion from nix's SockAddr type to the underlying libc sockaddr type.",64,null],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",64,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[3,"OriginalDst","","",null,null],[3,"ReceiveTimestamp","","",null,null],[3,"IpTransparent","","",null,null],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"reuseaddr"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",72,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",72,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"reuseport"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",73,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",73,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"tcpnodelay"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",74,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",74,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",75,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",75,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["linger"],"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"ipaddmembership"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",76,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipmembershiprequest"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"ipdropmembership"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",77,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipmembershiprequest"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addmembership"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",78,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipv6membershiprequest"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"ipv6dropmembership"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",79,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipv6membershiprequest"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"ipmulticastttl"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",80,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",80,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["u8"],"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"ipmulticastloop"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",81,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",81,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"receivetimeout"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",82,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",82,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["timeval"],"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sendtimeout"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",83,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",83,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["timeval"],"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"broadcast"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",84,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",84,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"oobinline"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",85,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",85,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"socketerror"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",86,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["i32"],"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"keepalive"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",87,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",87,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"peercredentials"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",88,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["unixcredentials"],"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"tcpkeepidle"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",89,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",89,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["u32"],"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"rcvbuf"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",90,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",90,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["usize"],"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"sndbuf"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",91,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",91,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["usize"],"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"rcvbufforce"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",92,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"sndbufforce"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",93,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"socktype"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",94,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["socktype"],"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"acceptconn"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",95,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"originaldst"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",96,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["sockaddr_in"],"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"receivetimestamp"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",97,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",97,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"iptransparent"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",98,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",98,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[8,"GetSockOpt","nix::sys::socket","Represents a socket option that can be accessed or set. Used as an argument to `getsockopt`",null,null],[16,"Val","","",99,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `setsockopt`",null,null],[16,"Val","","",100,null],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"socktype"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"sockprotocol"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"sockprotocol"}],"output":{"name":"bool"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"sockflag"}}],[11,"partial_cmp","","",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"cmp","","",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"hash","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SOCK_NONBLOCK","","Set non-blocking mode on the new socket",101,null],[18,"SOCK_CLOEXEC","","Set close-on-exec on the new descriptor",101,null],[11,"empty","","Returns an empty set of flags.",101,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",101,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",101,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",101,{"inputs":[{"name":"c_int"}],"output":{"generics":["sockflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",101,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",101,{"inputs":[{"name":"self"},{"name":"sockflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitor_assign","","Adds the set of flags.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",101,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",101,{"inputs":[{"name":"self"}],"output":{"name":"sockflag"}}],[11,"extend","","",101,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",101,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"msgflags"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"le","","",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"gt","","",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ge","","",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"cmp","","",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"ordering"}}],[11,"hash","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MSG_OOB","","Sends or requests out-of-band data on sockets that support this notion (e.g., of type `Stream`); the underlying protocol must also support out-of-band data.",102,null],[18,"MSG_PEEK","","Peeks at an incoming message. The data is treated as unread and the next `recv()` or similar function shall still return this data.",102,null],[18,"MSG_DONTWAIT","","Enables nonblocking operation; if the operation would block, `EAGAIN` or `EWOULDBLOCK` is returned.  This provides similar behavior to setting the `O_NONBLOCK` flag (via the `fcntl` `F_SETFL` operation), but differs in that `MSG_DONTWAIT` is a per- call option, whereas `O_NONBLOCK` is a setting on the open file description (see open(2)), which will affect all threads in the calling process and as well as other processes that hold file descriptors referring to the same open file description.",102,null],[18,"MSG_CTRUNC","","Receive flags: Control Data was discarded (buffer too small)",102,null],[18,"MSG_TRUNC","","For raw (`Packet`), Internet datagram (since Linux 2.4.27/2.6.8), netlink (since Linux 2.6.22) and UNIX datagram (since Linux 3.4) sockets: return the real length of the packet or datagram, even when it was longer than the passed buffer. Not implemented for UNIX domain (unix(7)) sockets.",102,null],[18,"MSG_EOR","","Terminates a record (when this notion is supported, as for sockets of type `SeqPacket`).",102,null],[18,"MSG_ERRQUEUE","","This flag specifies that queued errors should be received from the socket error queue. (For more details, see recvfrom(2))",102,null],[18,"MSG_CMSG_CLOEXEC","","Set the `close-on-exec` flag for the file descriptor received via a UNIX domain file descriptor using the `SCM_RIGHTS` operation (described in unix(7)). This flag is useful for the same reasons as the `O_CLOEXEC` flag of open(2).",102,null],[11,"empty","","Returns an empty set of flags.",102,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",102,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",102,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",102,{"inputs":[{"name":"c_int"}],"output":{"generics":["msgflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",102,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",102,{"inputs":[{"name":"self"},{"name":"msgflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitor_assign","","Adds the set of flags.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",102,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",102,{"inputs":[{"name":"self"}],"output":{"name":"msgflags"}}],[11,"extend","","",102,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",102,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"unixcredentials"}}],[11,"pid","","Returns the process identifier",103,{"inputs":[{"name":"self"}],"output":{"name":"pid_t"}}],[11,"uid","","Returns the user identifier",103,{"inputs":[{"name":"self"}],"output":{"name":"uid_t"}}],[11,"gid","","Returns the group identifier",103,{"inputs":[{"name":"self"}],"output":{"name":"gid_t"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"ipmembershiprequest"}}],[11,"new","","Instantiate a new `IpMembershipRequest`",104,{"inputs":[{"name":"ipv4addr"},{"generics":["ipv4addr"],"name":"option"}],"output":{"name":"self"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"ipv6membershiprequest"}}],[11,"new","","Instantiate a new `Ipv6MembershipRequest`",105,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"self"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a CmsgSpace. The structure is used only for space, so the fields are uninitialized.",106,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this msghdr.",62,{"inputs":[{"name":"self"}],"output":{"name":"cmsgiterator"}}],[11,"next","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["controlmessage"],"name":"option"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"socklevel"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"socklevel"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",108,null],[12,"st_ino","","",108,null],[12,"st_nlink","","",108,null],[12,"st_mode","","",108,null],[12,"st_uid","","",108,null],[12,"st_gid","","",108,null],[12,"st_rdev","","",108,null],[12,"st_size","","",108,null],[12,"st_blksize","","",108,null],[12,"st_blocks","","",108,null],[12,"st_atime","","",108,null],[12,"st_atime_nsec","","",108,null],[12,"st_mtime","","",108,null],[12,"st_mtime_nsec","","",108,null],[12,"st_ctime","","",108,null],[12,"st_ctime_nsec","","",108,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"u64"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"u64"}}],[5,"makedev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["filestat"],"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["filestat"],"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["filestat"],"name":"result"}}],[5,"fstatat","","",null,{"inputs":[{"name":"rawfd"},{"name":"p"},{"name":"atflags"}],"output":{"generics":["filestat"],"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"sflag"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"cmp","","",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"hash","","",109,null],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"S_IFIFO","","",109,null],[18,"S_IFCHR","","",109,null],[18,"S_IFDIR","","",109,null],[18,"S_IFBLK","","",109,null],[18,"S_IFREG","","",109,null],[18,"S_IFLNK","","",109,null],[18,"S_IFSOCK","","",109,null],[18,"S_IFMT","","",109,null],[11,"empty","","Returns an empty set of flags.",109,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",109,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",109,{"inputs":[{"name":"self"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",109,{"inputs":[{"name":"mode_t"}],"output":{"generics":["sflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",109,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",109,{"inputs":[{"name":"self"},{"name":"sflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitor_assign","","Adds the set of flags.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",109,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",109,{"inputs":[{"name":"self"}],"output":{"name":"sflag"}}],[11,"extend","","",109,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",109,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"cmp","","",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"hash","","",110,null],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"S_IRWXU","","",110,null],[18,"S_IRUSR","","",110,null],[18,"S_IWUSR","","",110,null],[18,"S_IXUSR","","",110,null],[18,"S_IRWXG","","",110,null],[18,"S_IRGRP","","",110,null],[18,"S_IWGRP","","",110,null],[18,"S_IXGRP","","",110,null],[18,"S_IRWXO","","",110,null],[18,"S_IROTH","","",110,null],[18,"S_IWOTH","","",110,null],[18,"S_IXOTH","","",110,null],[18,"S_ISUID","","",110,null],[18,"S_ISGID","","",110,null],[18,"S_ISVTX","","",110,null],[11,"empty","","Returns an empty set of flags.",110,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",110,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",110,{"inputs":[{"name":"self"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",110,{"inputs":[{"name":"mode_t"}],"output":{"generics":["mode"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",110,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",110,{"inputs":[{"name":"self"},{"name":"mode"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitor_assign","","Adds the set of flags.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor_assign","","Toggles the set of flags.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",110,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",110,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"extend","","",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",110,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"reboot","nix::sys","Reboot/shutdown or enable/disable Ctrl-Alt-Delete.",null,null],[4,"RebootMode","nix::sys::reboot","How exactly should the system be rebooted.",null,null],[13,"RB_HALT_SYSTEM","","",111,null],[13,"RB_KEXEC","","",111,null],[13,"RB_POWER_OFF","","",111,null],[13,"RB_AUTOBOOT","","",111,null],[13,"RB_SW_SUSPEND","","",111,null],[5,"reboot","","",null,{"inputs":[{"name":"rebootmode"}],"output":{"generics":["void"],"name":"result"}}],[5,"set_cad_enabled","","Enable or disable the reboot keystroke (Ctrl-Alt-Delete).",null,{"inputs":[{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"rebootmode"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",111,null],[11,"cmp","","",111,{"inputs":[{"name":"self"},{"name":"rebootmode"}],"output":{"name":"ordering"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"rebootmode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",111,{"inputs":[{"name":"self"},{"name":"rebootmode"}],"output":{"generics":["ordering"],"name":"option"}}],[0,"termios","nix::sys","An interface for controlling asynchronous communication ports",null,null],[17,"NCCS","nix::sys::termios","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[3,"Termios","","Stores settings for the termios API",null,null],[12,"input_flags","","Input mode flags (see `termios.c_iflag` documentation)",112,null],[12,"output_flags","","Output mode flags (see `termios.c_oflag` documentation)",112,null],[12,"control_flags","","Control mode flags (see `termios.c_cflag` documentation)",112,null],[12,"local_flags","","Local mode flags (see `termios.c_lflag` documentation)",112,null],[12,"control_chars","","Control characters (see `termios.c_cc` documentation)",112,null],[3,"InputFlags","","Flags for configuring the input mode of a terminal",null,null],[3,"OutputFlags","","Flags for configuring the output mode of a terminal",null,null],[3,"ControlFlags","","Flags for setting the control mode of a terminal",null,null],[3,"LocalFlags","","Flags for setting any local modes",null,null],[4,"BaudRate","","Baud rates supported by the system.",null,null],[13,"B0","","",113,null],[13,"B50","","",113,null],[13,"B75","","",113,null],[13,"B110","","",113,null],[13,"B134","","",113,null],[13,"B150","","",113,null],[13,"B200","","",113,null],[13,"B300","","",113,null],[13,"B600","","",113,null],[13,"B1200","","",113,null],[13,"B1800","","",113,null],[13,"B2400","","",113,null],[13,"B4800","","",113,null],[13,"B9600","","",113,null],[13,"B19200","","",113,null],[13,"B38400","","",113,null],[13,"B57600","","",113,null],[13,"B115200","","",113,null],[13,"B230400","","",113,null],[13,"B460800","","",113,null],[13,"B500000","","",113,null],[13,"B576000","","",113,null],[13,"B921600","","",113,null],[13,"B1000000","","",113,null],[13,"B1152000","","",113,null],[13,"B1500000","","",113,null],[13,"B2000000","","",113,null],[13,"B2500000","","",113,null],[13,"B3000000","","",113,null],[13,"B3500000","","",113,null],[13,"B4000000","","",113,null],[4,"SetArg","","Specify when a port configuration change should occur.",null,null],[13,"TCSANOW","","The change will occur immediately",114,null],[13,"TCSADRAIN","","The change occurs after all output has been written",114,null],[13,"TCSAFLUSH","","Same as `TCSADRAIN`, but will also flush the input buffer",114,null],[4,"FlushArg","","Specify a combination of the input and output buffers to flush",null,null],[13,"TCIFLUSH","","Flush data that was received but not read",115,null],[13,"TCOFLUSH","","Flush data written but not transmitted",115,null],[13,"TCIOFLUSH","","Flush both received data not read and written data not transmitted",115,null],[4,"FlowArg","","Specify how transmission flow should be altered",null,null],[13,"TCOOFF","","Suspend transmission",116,null],[13,"TCOON","","Resume transmission",116,null],[13,"TCIOFF","","Transmit a STOP character, which should disable a connected terminal device",116,null],[13,"TCION","","Transmit a START character, which should re-enable a connected terminal device",116,null],[4,"SpecialCharacterIndices","","Indices into the `termios.c_cc` array for special characters.",null,null],[13,"VDISCARD","","",117,null],[13,"VEOF","","",117,null],[13,"VEOL","","",117,null],[13,"VEOL2","","",117,null],[13,"VERASE","","",117,null],[13,"VINTR","","",117,null],[13,"VKILL","","",117,null],[13,"VLNEXT","","",117,null],[13,"VMIN","","",117,null],[13,"VQUIT","","",117,null],[13,"VREPRINT","","",117,null],[13,"VSTART","","",117,null],[13,"VSTOP","","",117,null],[13,"VSUSP","","",117,null],[13,"VSWTC","","",117,null],[13,"VTIME","","",117,null],[13,"VWERASE","","",117,null],[5,"cfgetispeed","","Get input baud rate (see cfgetispeed(3p)).",null,{"inputs":[{"name":"termios"}],"output":{"name":"baudrate"}}],[5,"cfgetospeed","","Get output baud rate (see cfgetospeed(3p)).",null,{"inputs":[{"name":"termios"}],"output":{"name":"baudrate"}}],[5,"cfsetispeed","","Set input baud rate (see cfsetispeed(3p)).",null,{"inputs":[{"name":"termios"},{"name":"baudrate"}],"output":{"name":"result"}}],[5,"cfsetospeed","","Set output baud rate (see cfsetospeed(3p)).",null,{"inputs":[{"name":"termios"},{"name":"baudrate"}],"output":{"name":"result"}}],[5,"cfsetspeed","","Set both the input and output baud rates (see termios(3)).",null,{"inputs":[{"name":"termios"},{"name":"baudrate"}],"output":{"name":"result"}}],[5,"cfmakeraw","","Configures the port to something like the \"raw\" mode of the old Version 7 terminal driver (see termios(3)).",null,{"inputs":[{"name":"termios"}],"output":null}],[5,"tcgetattr","","Return the configuration of a port tcgetattr(3p)).",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["termios"],"name":"result"}}],[5,"tcsetattr","","Set the configuration for a terminal (see tcsetattr(3p)).",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","Block until all output data is written (see tcdrain(3p)).",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","Suspend or resume the transmission or reception of data (see tcflow(3p)).",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","Discard data in the output or input queue (see tcflush(3p)).",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","Send a break for a specific duration (see tcsendbreak(3p)).",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[5,"tcgetsid","","Get the session controlled by the given terminal (see tcgetsid(3)).",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["pid"],"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"from","","",112,{"inputs":[{"name":"termios"}],"output":{"name":"self"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"baudrate"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",113,null],[11,"cmp","","",113,{"inputs":[{"name":"self"},{"name":"baudrate"}],"output":{"name":"ordering"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"baudrate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"self"},{"name":"baudrate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"from","","",113,{"inputs":[{"name":"speed_t"}],"output":{"name":"baudrate"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"setarg"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",114,null],[11,"cmp","","",114,{"inputs":[{"name":"self"},{"name":"setarg"}],"output":{"name":"ordering"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"setarg"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"self"},{"name":"setarg"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"flusharg"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",115,null],[11,"cmp","","",115,{"inputs":[{"name":"self"},{"name":"flusharg"}],"output":{"name":"ordering"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"flusharg"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",115,{"inputs":[{"name":"self"},{"name":"flusharg"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"flowarg"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",116,null],[11,"cmp","","",116,{"inputs":[{"name":"self"},{"name":"flowarg"}],"output":{"name":"ordering"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"flowarg"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",116,{"inputs":[{"name":"self"},{"name":"flowarg"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"specialcharacterindices"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",117,null],[11,"cmp","","",117,{"inputs":[{"name":"self"},{"name":"specialcharacterindices"}],"output":{"name":"ordering"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"specialcharacterindices"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",117,{"inputs":[{"name":"self"},{"name":"specialcharacterindices"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"inputflags"}}],[11,"partial_cmp","","",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"cmp","","",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"hash","","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IGNBRK","","",118,null],[18,"BRKINT","","",118,null],[18,"IGNPAR","","",118,null],[18,"PARMRK","","",118,null],[18,"INPCK","","",118,null],[18,"ISTRIP","","",118,null],[18,"INLCR","","",118,null],[18,"IGNCR","","",118,null],[18,"ICRNL","","",118,null],[18,"IXON","","",118,null],[18,"IXOFF","","",118,null],[18,"IXANY","","",118,null],[18,"IMAXBEL","","",118,null],[18,"IUTF8","","",118,null],[11,"empty","","Returns an empty set of flags.",118,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",118,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",118,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",118,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["inputflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",118,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",118,{"inputs":[{"name":"self"},{"name":"inputflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitor_assign","","Adds the set of flags.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",118,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",118,{"inputs":[{"name":"self"}],"output":{"name":"inputflags"}}],[11,"extend","","",118,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",118,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"outputflags"}}],[11,"partial_cmp","","",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"cmp","","",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"hash","","",119,null],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"OPOST","","",119,null],[18,"OLCUC","","",119,null],[18,"ONLCR","","",119,null],[18,"OCRNL","","",119,null],[18,"ONOCR","","",119,null],[18,"ONLRET","","",119,null],[18,"OFILL","","",119,null],[18,"OFDEL","","",119,null],[18,"NL0","","",119,null],[18,"NL1","","",119,null],[18,"CR0","","",119,null],[18,"CR1","","",119,null],[18,"CR2","","",119,null],[18,"CR3","","",119,null],[18,"TAB0","","",119,null],[18,"TAB1","","",119,null],[18,"TAB2","","",119,null],[18,"TAB3","","",119,null],[18,"XTABS","","",119,null],[18,"BS0","","",119,null],[18,"BS1","","",119,null],[18,"VT0","","",119,null],[18,"VT1","","",119,null],[18,"FF0","","",119,null],[18,"FF1","","",119,null],[18,"NLDLY","","",119,null],[18,"CRDLY","","",119,null],[18,"TABDLY","","",119,null],[18,"BSDLY","","",119,null],[18,"VTDLY","","",119,null],[18,"FFDLY","","",119,null],[11,"empty","","Returns an empty set of flags.",119,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",119,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",119,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",119,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["outputflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",119,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",119,{"inputs":[{"name":"self"},{"name":"outputflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitor_assign","","Adds the set of flags.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",119,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",119,{"inputs":[{"name":"self"}],"output":{"name":"outputflags"}}],[11,"extend","","",119,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",119,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"controlflags"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"cmp","","",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"hash","","",120,null],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CS5","","",120,null],[18,"CS6","","",120,null],[18,"CS7","","",120,null],[18,"CS8","","",120,null],[18,"CSTOPB","","",120,null],[18,"CREAD","","",120,null],[18,"PARENB","","",120,null],[18,"PARODD","","",120,null],[18,"HUPCL","","",120,null],[18,"CLOCAL","","",120,null],[18,"CRTSCTS","","",120,null],[18,"CBAUD","","",120,null],[18,"CMSPAR","","",120,null],[18,"CIBAUD","","",120,null],[18,"CBAUDEX","","",120,null],[18,"CSIZE","","",120,null],[11,"empty","","Returns an empty set of flags.",120,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",120,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",120,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",120,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["controlflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",120,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",120,{"inputs":[{"name":"self"},{"name":"controlflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitor_assign","","Adds the set of flags.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",120,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",120,{"inputs":[{"name":"self"}],"output":{"name":"controlflags"}}],[11,"extend","","",120,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",120,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"localflags"}}],[11,"partial_cmp","","",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"cmp","","",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"hash","","",121,null],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ECHOKE","","",121,null],[18,"ECHOE","","",121,null],[18,"ECHOK","","",121,null],[18,"ECHO","","",121,null],[18,"ECHONL","","",121,null],[18,"ECHOPRT","","",121,null],[18,"ECHOCTL","","",121,null],[18,"ISIG","","",121,null],[18,"ICANON","","",121,null],[18,"IEXTEN","","",121,null],[18,"EXTPROC","","",121,null],[18,"TOSTOP","","",121,null],[18,"FLUSHO","","",121,null],[18,"PENDIN","","",121,null],[18,"NOFLSH","","",121,null],[11,"empty","","Returns an empty set of flags.",121,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",121,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",121,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",121,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["localflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",121,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",121,{"inputs":[{"name":"self"},{"name":"localflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitor_assign","","Adds the set of flags.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",121,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",121,{"inputs":[{"name":"self"}],"output":{"name":"localflags"}}],[11,"extend","","",121,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",121,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"sysname","","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"nodename","","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"release","","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"version","","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"machine","","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","Possible return values from `wait()` or `waitpid()`.",null,null],[13,"Exited","","The process exited normally (as with `exit()` or returning from `main`) with the given exit code. This case matches the C macro `WIFEXITED(status)`; the second field is `WEXITSTATUS(status)`.",123,null],[13,"Signaled","","The process was killed by the given signal. The third field indicates whether the signal generated a core dump. This case matches the C macro `WIFSIGNALED(status)`; the last two fields correspond to `WTERMSIG(status)` and `WCOREDUMP(status)`.",123,null],[13,"Stopped","","The process is alive, but was stopped by the given signal. This is only reported if `WaitPidFlag::WUNTRACED` was passed. This case matches the C macro `WIFSTOPPED(status)`; the second field is `WSTOPSIG(status)`.",123,null],[13,"PtraceEvent","","The traced process was stopped by a `PTRACE_EVENT_*` event. See [`nix::sys::ptrace`] and [`ptrace`(2)] for more information. All currently-defined events use `SIGTRAP` as the signal; the third field is the `PTRACE_EVENT_*` value of the event.",123,null],[13,"PtraceSyscall","","The traced process was stopped by execution of a system call, and `PTRACE_O_TRACESYSGOOD` is in effect. See [`ptrace`(2)] for more information.",123,null],[13,"Continued","","The process was previously stopped but has resumed execution after receiving a `SIGCONT` signal. This is only reported if `WaitPidFlag::WCONTINUED` was passed. This case matches the C macro `WIFCONTINUED(status)`.",123,null],[13,"StillAlive","","There are currently no state changes to report in any awaited child process. This is only returned if `WaitPidFlag::WNOHANG` was used (otherwise `wait()` or `waitpid()` would block until there was something to report).",123,null],[5,"waitpid","","",null,{"inputs":[{"name":"p"},{"generics":["waitpidflag"],"name":"option"}],"output":{"generics":["waitstatus"],"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"generics":["waitstatus"],"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"waitpidflag"}}],[11,"partial_cmp","","",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"cmp","","",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"hash","","",124,null],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"WNOHANG","","",124,null],[18,"WUNTRACED","","",124,null],[18,"WEXITED","","",124,null],[18,"WCONTINUED","","",124,null],[18,"WSTOPPED","","",124,null],[18,"WNOWAIT","","Don't reap, just poll status.",124,null],[18,"__WNOTHREAD","","Don't wait on children of other threads in this group",124,null],[18,"__WALL","","Wait on all children, regardless of type",124,null],[18,"__WCLONE","","",124,null],[11,"empty","","Returns an empty set of flags.",124,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",124,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",124,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",124,{"inputs":[{"name":"c_int"}],"output":{"generics":["waitpidflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",124,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitor_assign","","Adds the set of flags.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",124,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",124,{"inputs":[{"name":"self"}],"output":{"name":"waitpidflag"}}],[11,"extend","","",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",124,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"waitstatus"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pid","","Extracts the PID from the WaitStatus unless it equals StillAlive.",123,{"inputs":[{"name":"self"}],"output":{"generics":["pid"],"name":"option"}}],[11,"from_raw","","Convert a raw `wstatus` as returned by `waitpid`/`wait` into a `WaitStatus`",123,{"inputs":[{"name":"pid"},{"name":"i32"}],"output":{"generics":["waitstatus"],"name":"result"}}],[0,"mman","nix::sys","",null,null],[3,"ProtFlags","nix::sys::mman","Desired memory protection of a memory mapping.",null,null],[3,"MapFlags","","Additional parameters for `mmap()`.",null,null],[3,"MsFlags","","Configuration flags for `msync`.",null,null],[4,"MmapAdvise","","Usage information for a range of memory to allow for performance optimizations by the kernel.",null,null],[13,"MADV_NORMAL","","No further special treatment. This is the default.",125,null],[13,"MADV_RANDOM","","Expect random page references.",125,null],[13,"MADV_SEQUENTIAL","","Expect sequential page references.",125,null],[13,"MADV_WILLNEED","","Expect access in the near future.",125,null],[13,"MADV_DONTNEED","","Do not expect access in the near future.",125,null],[13,"MADV_REMOVE","","Free up a given range of pages and its associated backing store.",125,null],[13,"MADV_DONTFORK","","Do not make pages in this range available to the child after a `fork(2)`.",125,null],[13,"MADV_DOFORK","","Undo the effect of `MADV_DONTFORK`.",125,null],[13,"MADV_HWPOISON","","Poison the given pages.",125,null],[13,"MADV_MERGEABLE","","Enable Kernel Samepage Merging (KSM) for the given pages.",125,null],[13,"MADV_UNMERGEABLE","","Undo the effect of `MADV_MERGEABLE`",125,null],[13,"MADV_SOFT_OFFLINE","","Preserve the memory of each page but offline the original page.",125,null],[13,"MADV_HUGEPAGE","","Enable Transparent Huge Pages (THP) for pages in the given range.",125,null],[13,"MADV_NOHUGEPAGE","","Undo the effect of `MADV_HUGEPAGE`.",125,null],[13,"MADV_DONTDUMP","","Exclude the given range from a core dump.",125,null],[13,"MADV_DODUMP","","Undo the effect of an earlier `MADV_DONTDUMP`.",125,null],[13,"MADV_FREE","","Specify that the application no longer needs the pages in the given range.",125,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically a higher-level abstraction will hide the unsafe interactions with the mmap'd region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"protflags"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"le","","",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"gt","","",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ge","","",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"cmp","","",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"ordering"}}],[11,"hash","","",126,null],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"PROT_NONE","","Pages cannot be accessed.",126,null],[18,"PROT_READ","","Pages can be read.",126,null],[18,"PROT_WRITE","","Pages can be written.",126,null],[18,"PROT_EXEC","","Pages can be executed",126,null],[18,"PROT_GROWSDOWN","","Apply protection up to the end of a mapping that grows upwards.",126,null],[18,"PROT_GROWSUP","","Apply protection down to the beginning of a mapping that grows downwards.",126,null],[11,"empty","","Returns an empty set of flags.",126,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",126,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",126,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",126,{"inputs":[{"name":"c_int"}],"output":{"generics":["protflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",126,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",126,{"inputs":[{"name":"self"},{"name":"protflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitor_assign","","Adds the set of flags.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",126,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",126,{"inputs":[{"name":"self"}],"output":{"name":"protflags"}}],[11,"extend","","",126,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",126,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"mapflags"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"le","","",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"gt","","",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ge","","",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"cmp","","",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"ordering"}}],[11,"hash","","",127,null],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MAP_FILE","","Compatibility flag. Ignored.",127,null],[18,"MAP_SHARED","","Share this mapping. Mutually exclusive with `MAP_PRIVATE`.",127,null],[18,"MAP_PRIVATE","","Create a private copy-on-write mapping. Mutually exclusive with `MAP_SHARED`.",127,null],[18,"MAP_FIXED","","Place the mapping at exactly the address specified in `addr`.",127,null],[18,"MAP_ANON","","Synonym for `MAP_ANONYMOUS`.",127,null],[18,"MAP_ANONYMOUS","","The mapping is not backed by any file.",127,null],[18,"MAP_32BIT","","Put the mapping into the first 2GB of the process address space.",127,null],[18,"MAP_GROWSDOWN","","Used for stacks; indicates to the kernel that the mapping should extend downward in memory.",127,null],[18,"MAP_DENYWRITE","","Compatibility flag. Ignored.",127,null],[18,"MAP_EXECUTABLE","","Compatibility flag. Ignored.",127,null],[18,"MAP_LOCKED","","Mark the mmaped region to be locked in the same way as `mlock(2)`.",127,null],[18,"MAP_NORESERVE","","Do not reserve swap space for this mapping.",127,null],[18,"MAP_POPULATE","","Populate page tables for a mapping.",127,null],[18,"MAP_NONBLOCK","","Only meaningful when used with `MAP_POPULATE`. Don't perform read-ahead.",127,null],[18,"MAP_HUGETLB","","Allocate the mapping using \"huge pages.\"",127,null],[18,"MAP_STACK","","Region grows down, like a stack.",127,null],[11,"empty","","Returns an empty set of flags.",127,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",127,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",127,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",127,{"inputs":[{"name":"c_int"}],"output":{"generics":["mapflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",127,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",127,{"inputs":[{"name":"self"},{"name":"mapflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitor_assign","","Adds the set of flags.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",127,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",127,{"inputs":[{"name":"self"}],"output":{"name":"mapflags"}}],[11,"extend","","",127,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",127,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"mmapadvise"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",125,null],[11,"cmp","","",125,{"inputs":[{"name":"self"},{"name":"mmapadvise"}],"output":{"name":"ordering"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"mmapadvise"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",125,{"inputs":[{"name":"self"},{"name":"mmapadvise"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"partial_cmp","","",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"cmp","","",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"hash","","",128,null],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MS_ASYNC","","Schedule an update but return immediately.",128,null],[18,"MS_INVALIDATE","","Invalidate all cached data.",128,null],[18,"MS_SYNC","","Perform an update and wait for it to complete.",128,null],[11,"empty","","Returns an empty set of flags.",128,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",128,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",128,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",128,{"inputs":[{"name":"c_int"}],"output":{"generics":["msflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",128,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",128,{"inputs":[{"name":"self"},{"name":"msflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitor_assign","","Adds the set of flags.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",128,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",128,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"extend","","",128,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",128,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[0,"uio","nix::sys","",null,null],[3,"RemoteIoVec","nix::sys::uio","A slice of memory in a remote process, starting at address `base` and consisting of `len` bytes.",null,null],[12,"base","","The starting address of this slice (`iov_base`).",129,null],[12,"len","","The number of bytes in this slice (`iov_len`).",129,null],[3,"IoVec","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[5,"process_vm_writev","","Write data directly to another process's virtual memory (see [`process_vm_writev`(2)]).",null,null],[5,"process_vm_readv","","Read data directly from another process's virtual memory (see [`process_vm_readv`(2)]).",null,null],[11,"as_slice","","",130,null],[11,"from_slice","","",130,null],[11,"from_mut_slice","","",130,null],[0,"time","nix::sys","",null,null],[3,"TimeSpec","nix::sys::time","",null,null],[3,"TimeVal","","",null,null],[8,"TimeValLike","","",null,null],[11,"zero","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"hours","","",131,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"minutes","","",131,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[10,"seconds","","",131,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[10,"milliseconds","","",131,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[10,"microseconds","","",131,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[10,"nanoseconds","","",131,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"num_hours","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"num_seconds","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"num_milliseconds","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"num_microseconds","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"num_nanoseconds","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"as_ref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",132,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"seconds","","",132,{"inputs":[{"name":"i64"}],"output":{"name":"timespec"}}],[11,"milliseconds","","",132,{"inputs":[{"name":"i64"}],"output":{"name":"timespec"}}],[11,"microseconds","","Makes a new `TimeSpec` with given number of microseconds.",132,{"inputs":[{"name":"i64"}],"output":{"name":"timespec"}}],[11,"nanoseconds","","Makes a new `TimeSpec` with given number of nanoseconds.",132,{"inputs":[{"name":"i64"}],"output":{"name":"timespec"}}],[11,"num_seconds","","",132,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",132,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",132,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_nanoseconds","","",132,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"tv_sec","","",132,{"inputs":[{"name":"self"}],"output":{"name":"time_t"}}],[11,"tv_nsec","","",132,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"as_ref","","",133,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"cmp","","",133,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"seconds","","",133,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",133,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",133,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"nanoseconds","","Makes a new `TimeVal` with given number of nanoseconds.  Some precision will be lost",133,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_seconds","","",133,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",133,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",133,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_nanoseconds","","",133,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"tv_sec","","",133,{"inputs":[{"name":"self"}],"output":{"name":"time_t"}}],[11,"tv_usec","","",133,{"inputs":[{"name":"self"}],"output":{"name":"suseconds_t"}}],[11,"neg","","",133,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"add","","",133,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",133,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",133,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",133,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ptrace","nix::sys","For detailed description of the ptrace requests, consult `man ptrace`.",null,null],[3,"Options","nix::sys::ptrace","Ptrace options used in conjunction with the PTRACE_SETOPTIONS request. See `man ptrace` for more details.",null,null],[4,"Request","","Ptrace Request enum defining the action to be taken.",null,null],[13,"PTRACE_TRACEME","","",134,null],[13,"PTRACE_PEEKTEXT","","",134,null],[13,"PTRACE_PEEKDATA","","",134,null],[13,"PTRACE_PEEKUSER","","",134,null],[13,"PTRACE_POKETEXT","","",134,null],[13,"PTRACE_POKEDATA","","",134,null],[13,"PTRACE_POKEUSER","","",134,null],[13,"PTRACE_CONT","","",134,null],[13,"PTRACE_KILL","","",134,null],[13,"PTRACE_SINGLESTEP","","",134,null],[13,"PTRACE_GETREGS","","",134,null],[13,"PTRACE_SETREGS","","",134,null],[13,"PTRACE_GETFPREGS","","",134,null],[13,"PTRACE_SETFPREGS","","",134,null],[13,"PTRACE_ATTACH","","",134,null],[13,"PTRACE_DETACH","","",134,null],[13,"PTRACE_GETFPXREGS","","",134,null],[13,"PTRACE_SETFPXREGS","","",134,null],[13,"PTRACE_SYSCALL","","",134,null],[13,"PTRACE_SETOPTIONS","","",134,null],[13,"PTRACE_GETEVENTMSG","","",134,null],[13,"PTRACE_GETSIGINFO","","",134,null],[13,"PTRACE_SETSIGINFO","","",134,null],[13,"PTRACE_GETREGSET","","",134,null],[13,"PTRACE_SETREGSET","","",134,null],[13,"PTRACE_SEIZE","","",134,null],[13,"PTRACE_INTERRUPT","","",134,null],[13,"PTRACE_LISTEN","","",134,null],[13,"PTRACE_PEEKSIGINFO","","",134,null],[4,"Event","","Using the ptrace options the tracer can configure the tracee to stop at certain events. This enum is used to define those events as defined in `man ptrace`.",null,null],[13,"PTRACE_EVENT_FORK","","Event that stops before a return from fork or clone.",135,null],[13,"PTRACE_EVENT_VFORK","","Event that stops before a return from vfork or clone.",135,null],[13,"PTRACE_EVENT_CLONE","","Event that stops before a return from clone.",135,null],[13,"PTRACE_EVENT_EXEC","","Event that stops before a return from execve.",135,null],[13,"PTRACE_EVENT_VFORK_DONE","","Event for a return from vfork.",135,null],[13,"PTRACE_EVENT_EXIT","","Event for a stop before an exit. Unlike the waitpid Exit status program. registers can still be examined",135,null],[13,"PTRACE_EVENT_SECCOMP","","STop triggered by a seccomp rule on a tracee.",135,null],[5,"ptrace","","Performs a ptrace request. If the request in question is provided by a specialised function this function will return an unsupported operation error.",null,null],[5,"setoptions","","Set options, as with `ptrace(PTRACE_SETOPTIONS,...)`.",null,{"inputs":[{"name":"pid"},{"name":"options"}],"output":{"name":"result"}}],[5,"getevent","","Gets a ptrace event as described by `ptrace(PTRACE_GETEVENTMSG,...)`",null,{"inputs":[{"name":"pid"}],"output":{"generics":["c_long"],"name":"result"}}],[5,"getsiginfo","","Get siginfo as with `ptrace(PTRACE_GETSIGINFO,...)`",null,{"inputs":[{"name":"pid"}],"output":{"generics":["siginfo_t"],"name":"result"}}],[5,"setsiginfo","","Set siginfo as with `ptrace(PTRACE_SETSIGINFO,...)`",null,{"inputs":[{"name":"pid"},{"name":"siginfo_t"}],"output":{"name":"result"}}],[5,"traceme","","Sets the process as traceable, as with `ptrace(PTRACE_TRACEME, ...)`",null,{"inputs":[],"output":{"name":"result"}}],[5,"syscall","","Ask for next syscall, as with `ptrace(PTRACE_SYSCALL, ...)`",null,{"inputs":[{"name":"pid"}],"output":{"name":"result"}}],[5,"attach","","Attach to a running process, as with `ptrace(PTRACE_ATTACH, ...)`",null,{"inputs":[{"name":"pid"}],"output":{"name":"result"}}],[5,"detach","","Detaches the current running process, as with `ptrace(PTRACE_DETACH, ...)`",null,{"inputs":[{"name":"pid"}],"output":{"name":"result"}}],[5,"cont","","Restart the stopped tracee process, as with `ptrace(PTRACE_CONT, ...)`",null,{"inputs":[{"name":"pid"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"request"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",134,null],[11,"cmp","","",134,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"ordering"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",134,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",135,null],[11,"cmp","","",135,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"ordering"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",135,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"partial_cmp","","",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"le","","",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"gt","","",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"ge","","",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"cmp","","",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"ordering"}}],[11,"hash","","",136,null],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"PTRACE_O_TRACESYSGOOD","","When delivering system call traps set a bit to allow tracer to distinguish between normal stops or syscall stops. May not work on all systems.",136,null],[18,"PTRACE_O_TRACEFORK","","Stop tracee at next fork and start tracing the forked process.",136,null],[18,"PTRACE_O_TRACEVFORK","","Stop tracee at next vfork call and trace the vforked process.",136,null],[18,"PTRACE_O_TRACECLONE","","Stop tracee at next clone call and trace the cloned process.",136,null],[18,"PTRACE_O_TRACEEXEC","","Stop tracee at next execve call.",136,null],[18,"PTRACE_O_TRACEVFORKDONE","","Stop tracee at vfork completion.",136,null],[18,"PTRACE_O_TRACEEXIT","","Stop tracee at next exit call. Stops before exit commences allowing tracer to see location of exit and register states.",136,null],[18,"PTRACE_O_TRACESECCOMP","","Stop tracee when a SECCOMP_RET_TRACE rule is triggered. See `man seccomp` for more details.",136,null],[18,"PTRACE_O_EXITKILL","","Send a SIGKILL to the tracee if the tracer exits.  This is useful for ptrace jailers to prevent tracees from escaping their control.",136,null],[11,"empty","","Returns an empty set of flags.",136,{"inputs":[],"output":{"name":"options"}}],[11,"all","","Returns the set containing all flags.",136,{"inputs":[],"output":{"name":"options"}}],[11,"bits","","Returns the raw value of the flags currently stored.",136,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",136,{"inputs":[{"name":"c_int"}],"output":{"generics":["options"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",136,{"inputs":[{"name":"c_int"}],"output":{"name":"options"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",136,{"inputs":[{"name":"self"},{"name":"options"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"options"}}],[11,"bitor_assign","","Adds the set of flags.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"options"}}],[11,"bitxor_assign","","Toggles the set of flags.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"options"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"options"}}],[11,"sub_assign","","Disables all flags enabled in the set.",136,{"inputs":[{"name":"self"},{"name":"options"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",136,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"extend","","",136,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",136,{"inputs":[{"name":"t"}],"output":{"name":"options"}}],[0,"select","nix::sys","",null,null],[17,"FD_SETSIZE","nix::sys::select","",null,null],[3,"FdSet","","",null,null],[5,"select","","Monitors file descriptors for readiness",null,{"inputs":[{"name":"n"},{"name":"r"},{"name":"w"},{"name":"e"},{"name":"t"}],"output":{"generics":["c_int"],"name":"result"}}],[11,"new","","",137,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",137,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":null}],[11,"remove","","",137,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":null}],[11,"contains","","",137,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"bool"}}],[11,"clear","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"highest","","Finds the highest file descriptor in the set.",137,{"inputs":[{"name":"self"}],"output":{"generics":["rawfd"],"name":"option"}}],[0,"quota","nix::sys","Set and configure disk quotas for users, groups, or projects.",null,null],[3,"QuotaValidFlags","nix::sys::quota","Indicates the quota fields that are valid to read from.",null,null],[3,"Dqblk","","Wrapper type for `if_dqblk`",null,null],[4,"QuotaType","","The scope of the quota.",null,null],[13,"USRQUOTA","","Specify a user quota",138,null],[13,"GRPQUOTA","","Specify a group quota",138,null],[4,"QuotaFmt","","The type of quota format to use.",null,null],[13,"QFMT_VFS_OLD","","Use the original quota format.",139,null],[13,"QFMT_VFS_V0","","Use the standard VFS v0 quota format.",139,null],[13,"QFMT_VFS_V1","","Use the VFS v1 quota format.",139,null],[5,"quotactl_on","","Turn on disk quotas for a block device.",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"quotafmt"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_off","","Disable disk quotas for a block device.",null,{"inputs":[{"name":"quotatype"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_sync","","Update the on-disk copy of quota usages for a filesystem.",null,{"inputs":[{"name":"quotatype"},{"name":"option"}],"output":{"name":"result"}}],[5,"quotactl_get","","Get disk quota limits and current usage for the given user/group id.",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"}],"output":{"generics":["dqblk"],"name":"result"}}],[5,"quotactl_set","","Configure quota values for the specified fields for a given user/group id.",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"},{"name":"quotavalidflags"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"quotatype"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",138,null],[11,"cmp","","",138,{"inputs":[{"name":"self"},{"name":"quotatype"}],"output":{"name":"ordering"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"quotatype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"quotatype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"quotafmt"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",139,null],[11,"cmp","","",139,{"inputs":[{"name":"self"},{"name":"quotafmt"}],"output":{"name":"ordering"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"quotafmt"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"quotafmt"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"quotavalidflags"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"le","","",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"gt","","",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ge","","",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"cmp","","",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"ordering"}}],[11,"hash","","",140,null],[11,"default","","",140,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"QIF_BLIMITS","","The block hard & soft limit fields.",140,null],[18,"QIF_SPACE","","The current space field.",140,null],[18,"QIF_ILIMITS","","The inode hard & soft limit fields.",140,null],[18,"QIF_INODES","","The current inodes field.",140,null],[18,"QIF_BTIME","","The disk use time limit field.",140,null],[18,"QIF_ITIME","","The file quote time limit field.",140,null],[18,"QIF_LIMITS","","All block & inode limits.",140,null],[18,"QIF_USAGE","","The space & inodes usage fields.",140,null],[18,"QIF_TIMES","","The time limit fields.",140,null],[18,"QIF_ALL","","All fields.",140,null],[11,"empty","","Returns an empty set of flags.",140,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",140,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",140,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",140,{"inputs":[{"name":"u32"}],"output":{"generics":["quotavalidflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",140,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitor_assign","","Adds the set of flags.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",140,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",140,{"inputs":[{"name":"self"}],"output":{"name":"quotavalidflags"}}],[11,"extend","","",140,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",140,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"default","","",141,{"inputs":[],"output":{"name":"dqblk"}}],[11,"blocks_hard_limit","","The absolute limit on disk quota blocks allocated.",141,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"set_blocks_hard_limit","","Set the absolute limit on disk quota blocks allocated.",141,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"blocks_soft_limit","","Preferred limit on disk quota blocks",141,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"set_blocks_soft_limit","","Set the preferred limit on disk quota blocks allocated.",141,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"occupied_space","","Current occupied space (bytes).",141,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"inodes_hard_limit","","Maximum number of allocated inodes.",141,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"set_inodes_hard_limit","","Set the maximum number of allocated inodes.",141,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"inodes_soft_limit","","Preferred inode limit",141,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"set_inodes_soft_limit","","Set the preferred limit of allocated inodes.",141,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"allocated_inodes","","Current number of allocated inodes.",141,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"block_time_limit","","Time limit for excessive disk use.",141,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"set_block_time_limit","","Set the time limit for excessive disk use.",141,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"inode_time_limit","","Time limit for excessive files.",141,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"set_inode_time_limit","","Set the time limit for excessive files.",141,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"inputs":[{"name":"p"},{"name":"statfs"}],"output":{"name":"result"}}],[5,"fstatfs","","",null,{"inputs":[{"name":"t"},{"name":"statfs"}],"output":{"name":"result"}}],[0,"statvfs","nix::sys","Get filesystem statistics",null,null],[3,"FsFlags","nix::sys::statvfs","File system mount Flags",null,null],[3,"Statvfs","","Wrapper around the POSIX `statvfs` struct",null,null],[5,"statvfs","","Return a `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"}],"output":{"generics":["statvfs"],"name":"result"}}],[5,"fstatvfs","","Return a `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"}],"output":{"generics":["statvfs"],"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"le","","",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"gt","","",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ge","","",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"cmp","","",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"ordering"}}],[11,"hash","","",142,null],[11,"default","","",142,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ST_RDONLY","","Read Only",142,null],[18,"ST_NOSUID","","Do not allow the set-uid bits to have an effect",142,null],[18,"ST_NODEV","","Do not interpret character or block-special devices",142,null],[18,"ST_NOEXEC","","Do not allow execution of binaries on the filesystem",142,null],[18,"ST_SYNCHRONOUS","","All IO should be done synchronously",142,null],[18,"ST_MANDLOCK","","Allow mandatory locks on the filesystem",142,null],[18,"ST_WRITE","","Write on file/directory/symlink",142,null],[18,"ST_APPEND","","Append-only file",142,null],[18,"ST_IMMUTABLE","","Immutable file",142,null],[18,"ST_NOATIME","","Do not update access times on files",142,null],[18,"ST_NODIRATIME","","Do not update access times on files",142,null],[18,"ST_RELATIME","","Update access time relative to modify/change time",142,null],[11,"empty","","Returns an empty set of flags.",142,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",142,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",142,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",142,{"inputs":[{"name":"c_ulong"}],"output":{"generics":["fsflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",142,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",142,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",142,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",142,{"inputs":[{"name":"self"},{"name":"fsflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitor_assign","","Adds the set of flags.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",142,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",142,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"extend","","",142,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",142,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"block_size","","get the file system block size",143,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"fragment_size","","Get the fundamental file system block size",143,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"blocks","","Get the number of blocks.",143,{"inputs":[{"name":"self"}],"output":{"name":"fsblkcnt_t"}}],[11,"blocks_free","","Get the number of free blocks in the file system",143,{"inputs":[{"name":"self"}],"output":{"name":"fsblkcnt_t"}}],[11,"blocks_available","","Get the number of free blocks for unprivileged users",143,{"inputs":[{"name":"self"}],"output":{"name":"fsblkcnt_t"}}],[11,"files","","Get the total number of file inodes",143,{"inputs":[{"name":"self"}],"output":{"name":"fsfilcnt_t"}}],[11,"files_free","","Get the number of free file inodes",143,{"inputs":[{"name":"self"}],"output":{"name":"fsfilcnt_t"}}],[11,"files_available","","Get the number of free file inodes for unprivileged users",143,{"inputs":[{"name":"self"}],"output":{"name":"fsfilcnt_t"}}],[11,"filesystem_id","","Get the file system id",143,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"flags","","Get the mount flags",143,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"name_max","","Get the maximum filename length",143,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[0,"pthread","nix::sys","",null,null],[5,"pthread_self","nix::sys::pthread","Obtain ID of the calling thread (see `pthread_self(3)`",null,{"inputs":[],"output":{"name":"pthread"}}],[6,"Pthread","","",null,null],[0,"ucontext","nix","",null,null],[3,"UContext","nix::ucontext","",null,null],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"ucontext"}}],[11,"get","","",144,{"inputs":[],"output":{"generics":["ucontext"],"name":"result"}}],[11,"set","","",144,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"sigmask_mut","","",144,{"inputs":[{"name":"self"}],"output":{"name":"sigset"}}],[11,"sigmask","","",144,{"inputs":[{"name":"self"}],"output":{"name":"sigset"}}],[0,"unistd","nix","Safe wrappers around functions found in libc \"unistd.h\" header",null,null],[3,"Uid","nix::unistd","User identifier",null,null],[3,"Gid","","Group identifier",null,null],[3,"Pid","","Process identifier",null,null],[4,"ForkResult","","Represents the successful result of calling `fork`",null,null],[13,"Parent","","",145,null],[12,"child","nix::unistd::ForkResult","",145,null],[13,"Child","nix::unistd","",145,null],[4,"Whence","","Directive that tells [`lseek`] and [`lseek64`] what the offset is relative to.",null,null],[13,"SeekSet","","Specify an offset relative to the start of the file.",146,null],[13,"SeekCur","","Specify an offset relative to the current file location.",146,null],[13,"SeekEnd","","Specify an offset relative to the end of the file.",146,null],[13,"SeekData","","Specify an offset relative to the next location in the file greater than or equal to offset that contains some data. If offset points to some data, then the file offset is set to offset.",146,null],[13,"SeekHole","","Specify an offset relative to the next hole in the file greater than or equal to offset. If offset points into the middle of a hole, then the file offset should be set to offset. If there is no hole past offset, then the file offset should be adjusted to the end of the file (i.e., there is an implicit hole at the end of any file).",146,null],[4,"PathconfVar","","Variable names for `pathconf`",null,null],[13,"FILESIZEBITS","","Minimum number of bits needed to represent, as a signed integer value, the maximum size of a regular file allowed in the specified directory.",147,null],[13,"LINK_MAX","","Maximum number of links to a single file.",147,null],[13,"MAX_CANON","","Maximum number of bytes in a terminal canonical input line.",147,null],[13,"MAX_INPUT","","Minimum number of bytes for which space is available in a terminal input queue; therefore, the maximum number of bytes a conforming application may require to be typed as input before reading them.",147,null],[13,"NAME_MAX","","Maximum number of bytes in a filename (not including the terminating null of a filename string).",147,null],[13,"PATH_MAX","","Maximum number of bytes the implementation will store as a pathname in a user-supplied buffer of unspecified size, including the terminating null character. Minimum number the implementation will accept as the maximum number of bytes in a pathname.",147,null],[13,"PIPE_BUF","","Maximum number of bytes that is guaranteed to be atomic when writing to a pipe.",147,null],[13,"POSIX2_SYMLINKS","","Symbolic links can be created.",147,null],[13,"POSIX_ALLOC_SIZE_MIN","","Minimum number of bytes of storage actually allocated for any portion of a file.",147,null],[13,"POSIX_REC_INCR_XFER_SIZE","","Recommended increment for file transfer sizes between the `POSIX_REC_MIN_XFER_SIZE` and `POSIX_REC_MAX_XFER_SIZE` values.",147,null],[13,"POSIX_REC_MAX_XFER_SIZE","","Maximum recommended file transfer size.",147,null],[13,"POSIX_REC_MIN_XFER_SIZE","","Minimum recommended file transfer size.",147,null],[13,"POSIX_REC_XFER_ALIGN","","Recommended file transfer buffer alignment.",147,null],[13,"SYMLINK_MAX","","Maximum number of bytes in a symbolic link.",147,null],[13,"_POSIX_CHOWN_RESTRICTED","","The use of `chown` and `fchown` is restricted to a process with appropriate privileges, and to changing the group ID of a file only to the effective group ID of the process or to one of its supplementary group IDs.",147,null],[13,"_POSIX_NO_TRUNC","","Pathname components longer than {NAME_MAX} generate an error.",147,null],[13,"_POSIX_VDISABLE","","This symbol shall be defined to be the value of a character that shall disable terminal special character handling.",147,null],[13,"_POSIX_ASYNC_IO","","Asynchronous input or output operations may be performed for the associated file.",147,null],[13,"_POSIX_PRIO_IO","","Prioritized input or output operations may be performed for the associated file.",147,null],[13,"_POSIX_SYNC_IO","","Synchronized input or output operations may be performed for the associated file.",147,null],[4,"SysconfVar","","Variable names for `sysconf`",null,null],[13,"AIO_LISTIO_MAX","","Maximum number of I/O operations in a single list I/O call supported by the implementation.",148,null],[13,"AIO_MAX","","Maximum number of outstanding asynchronous I/O operations supported by the implementation.",148,null],[13,"AIO_PRIO_DELTA_MAX","","The maximum amount by which a process can decrease its asynchronous I/O priority level from its own scheduling priority.",148,null],[13,"ARG_MAX","","Maximum length of argument to the exec functions including environment data.",148,null],[13,"ATEXIT_MAX","","Maximum number of functions that may be registered with `atexit`.",148,null],[13,"BC_BASE_MAX","","Maximum obase values allowed by the bc utility.",148,null],[13,"BC_DIM_MAX","","Maximum number of elements permitted in an array by the bc utility.",148,null],[13,"BC_SCALE_MAX","","Maximum scale value allowed by the bc utility.",148,null],[13,"BC_STRING_MAX","","Maximum length of a string constant accepted by the bc utility.",148,null],[13,"CHILD_MAX","","Maximum number of simultaneous processes per real user ID.",148,null],[13,"COLL_WEIGHTS_MAX","","Maximum number of weights that can be assigned to an entry of the LC_COLLATE order keyword in the locale definition file",148,null],[13,"DELAYTIMER_MAX","","Maximum number of timer expiration overruns.",148,null],[13,"EXPR_NEST_MAX","","Maximum number of expressions that can be nested within parentheses by the expr utility.",148,null],[13,"HOST_NAME_MAX","","Maximum length of a host name (not including the terminating null) as returned from the `gethostname` function",148,null],[13,"IOV_MAX","","Maximum number of iovec structures that one process has available for use with `readv` or `writev`.",148,null],[13,"LINE_MAX","","Unless otherwise noted, the maximum length, in bytes, of a utility's input line (either standard input or another file), when the utility is described as processing text files. The length includes room for the trailing .",148,null],[13,"LOGIN_NAME_MAX","","Maximum length of a login name.",148,null],[13,"NGROUPS_MAX","","Maximum number of simultaneous supplementary group IDs per process.",148,null],[13,"GETGR_R_SIZE_MAX","","Initial size of `getgrgid_r` and `getgrnam_r` data buffers",148,null],[13,"GETPW_R_SIZE_MAX","","Initial size of `getpwuid_r` and `getpwnam_r` data buffers",148,null],[13,"MQ_OPEN_MAX","","The maximum number of open message queue descriptors a process may hold.",148,null],[13,"MQ_PRIO_MAX","","The maximum number of message priorities supported by the implementation.",148,null],[13,"OPEN_MAX","","A value one greater than the maximum value that the system may assign to a newly-created file descriptor.",148,null],[13,"_POSIX_ADVISORY_INFO","","The implementation supports the Advisory Information option.",148,null],[13,"_POSIX_BARRIERS","","The implementation supports barriers.",148,null],[13,"_POSIX_ASYNCHRONOUS_IO","","The implementation supports asynchronous input and output.",148,null],[13,"_POSIX_CLOCK_SELECTION","","The implementation supports clock selection.",148,null],[13,"_POSIX_CPUTIME","","The implementation supports the Process CPU-Time Clocks option.",148,null],[13,"_POSIX_FSYNC","","The implementation supports the File Synchronization option.",148,null],[13,"_POSIX_IPV6","","The implementation supports the IPv6 option.",148,null],[13,"_POSIX_JOB_CONTROL","","The implementation supports job control.",148,null],[13,"_POSIX_MAPPED_FILES","","The implementation supports memory mapped Files.",148,null],[13,"_POSIX_MEMLOCK","","The implementation supports the Process Memory Locking option.",148,null],[13,"_POSIX_MEMLOCK_RANGE","","The implementation supports the Range Memory Locking option.",148,null],[13,"_POSIX_MEMORY_PROTECTION","","The implementation supports memory protection.",148,null],[13,"_POSIX_MESSAGE_PASSING","","The implementation supports the Message Passing option.",148,null],[13,"_POSIX_MONOTONIC_CLOCK","","The implementation supports the Monotonic Clock option.",148,null],[13,"_POSIX_PRIORITIZED_IO","","The implementation supports the Prioritized Input and Output option.",148,null],[13,"_POSIX_PRIORITY_SCHEDULING","","The implementation supports the Process Scheduling option.",148,null],[13,"_POSIX_RAW_SOCKETS","","The implementation supports the Raw Sockets option.",148,null],[13,"_POSIX_READER_WRITER_LOCKS","","The implementation supports read-write locks.",148,null],[13,"_POSIX_REALTIME_SIGNALS","","The implementation supports realtime signals.",148,null],[13,"_POSIX_REGEXP","","The implementation supports the Regular Expression Handling option.",148,null],[13,"_POSIX_SAVED_IDS","","Each process has a saved set-user-ID and a saved set-group-ID.",148,null],[13,"_POSIX_SEMAPHORES","","The implementation supports semaphores.",148,null],[13,"_POSIX_SHARED_MEMORY_OBJECTS","","The implementation supports the Shared Memory Objects option.",148,null],[13,"_POSIX_SHELL","","The implementation supports the POSIX shell.",148,null],[13,"_POSIX_SPAWN","","The implementation supports the Spawn option.",148,null],[13,"_POSIX_SPIN_LOCKS","","The implementation supports spin locks.",148,null],[13,"_POSIX_SPORADIC_SERVER","","The implementation supports the Process Sporadic Server option.",148,null],[13,"_POSIX_SS_REPL_MAX","","",148,null],[13,"_POSIX_SYNCHRONIZED_IO","","The implementation supports the Synchronized Input and Output option.",148,null],[13,"_POSIX_THREAD_ATTR_STACKADDR","","The implementation supports the Thread Stack Address Attribute option.",148,null],[13,"_POSIX_THREAD_ATTR_STACKSIZE","","The implementation supports the Thread Stack Size Attribute option.",148,null],[13,"_POSIX_THREAD_CPUTIME","","The implementation supports the Thread CPU-Time Clocks option.",148,null],[13,"_POSIX_THREAD_PRIO_INHERIT","","The implementation supports the Non-Robust Mutex Priority Inheritance option.",148,null],[13,"_POSIX_THREAD_PRIO_PROTECT","","The implementation supports the Non-Robust Mutex Priority Protection option.",148,null],[13,"_POSIX_THREAD_PRIORITY_SCHEDULING","","The implementation supports the Thread Execution Scheduling option.",148,null],[13,"_POSIX_THREAD_PROCESS_SHARED","","The implementation supports the Thread Process-Shared Synchronization option.",148,null],[13,"_POSIX_THREAD_ROBUST_PRIO_INHERIT","","The implementation supports the Robust Mutex Priority Inheritance option.",148,null],[13,"_POSIX_THREAD_ROBUST_PRIO_PROTECT","","The implementation supports the Robust Mutex Priority Protection option.",148,null],[13,"_POSIX_THREAD_SAFE_FUNCTIONS","","The implementation supports thread-safe functions.",148,null],[13,"_POSIX_THREAD_SPORADIC_SERVER","","The implementation supports the Thread Sporadic Server option.",148,null],[13,"_POSIX_THREADS","","The implementation supports threads.",148,null],[13,"_POSIX_TIMEOUTS","","The implementation supports timeouts.",148,null],[13,"_POSIX_TIMERS","","The implementation supports timers.",148,null],[13,"_POSIX_TRACE","","The implementation supports the Trace option.",148,null],[13,"_POSIX_TRACE_EVENT_FILTER","","The implementation supports the Trace Event Filter option.",148,null],[13,"_POSIX_TRACE_EVENT_NAME_MAX","","",148,null],[13,"_POSIX_TRACE_INHERIT","","The implementation supports the Trace Inherit option.",148,null],[13,"_POSIX_TRACE_LOG","","The implementation supports the Trace Log option.",148,null],[13,"_POSIX_TRACE_NAME_MAX","","",148,null],[13,"_POSIX_TRACE_SYS_MAX","","",148,null],[13,"_POSIX_TRACE_USER_EVENT_MAX","","",148,null],[13,"_POSIX_TYPED_MEMORY_OBJECTS","","The implementation supports the Typed Memory Objects option.",148,null],[13,"_POSIX_VERSION","","Integer value indicating version of this standard (C-language binding) to which the implementation conforms. For implementations conforming to POSIX.1-2008, the value shall be 200809L.",148,null],[13,"_POSIX_V6_ILP32_OFF32","","The implementation provides a C-language compilation environment with 32-bit `int`, `long`, `pointer`, and `off_t` types.",148,null],[13,"_POSIX_V6_ILP32_OFFBIG","","The implementation provides a C-language compilation environment with 32-bit `int`, `long`, and pointer types and an `off_t` type using at least 64 bits.",148,null],[13,"_POSIX_V6_LP64_OFF64","","The implementation provides a C-language compilation environment with 32-bit `int` and 64-bit `long`, `pointer`, and `off_t` types.",148,null],[13,"_POSIX_V6_LPBIG_OFFBIG","","The implementation provides a C-language compilation environment with an `int` type using at least 32 bits and `long`, pointer, and `off_t` types using at least 64 bits.",148,null],[13,"_POSIX2_C_BIND","","The implementation supports the C-Language Binding option.",148,null],[13,"_POSIX2_C_DEV","","The implementation supports the C-Language Development Utilities option.",148,null],[13,"_POSIX2_CHAR_TERM","","The implementation supports the Terminal Characteristics option.",148,null],[13,"_POSIX2_FORT_DEV","","The implementation supports the FORTRAN Development Utilities option.",148,null],[13,"_POSIX2_FORT_RUN","","The implementation supports the FORTRAN Runtime Utilities option.",148,null],[13,"_POSIX2_LOCALEDEF","","The implementation supports the creation of locales by the localedef utility.",148,null],[13,"_POSIX2_PBS","","The implementation supports the Batch Environment Services and Utilities option.",148,null],[13,"_POSIX2_PBS_ACCOUNTING","","The implementation supports the Batch Accounting option.",148,null],[13,"_POSIX2_PBS_CHECKPOINT","","The implementation supports the Batch Checkpoint/Restart option.",148,null],[13,"_POSIX2_PBS_LOCATE","","The implementation supports the Locate Batch Job Request option.",148,null],[13,"_POSIX2_PBS_MESSAGE","","The implementation supports the Batch Job Message Request option.",148,null],[13,"_POSIX2_PBS_TRACK","","The implementation supports the Track Batch Job Request option.",148,null],[13,"_POSIX2_SW_DEV","","The implementation supports the Software Development Utilities option.",148,null],[13,"_POSIX2_UPE","","The implementation supports the User Portability Utilities option.",148,null],[13,"_POSIX2_VERSION","","Integer value indicating version of the Shell and Utilities volume of POSIX.1 to which the implementation conforms.",148,null],[13,"PAGE_SIZE","","The size of a system page in bytes.",148,null],[13,"PTHREAD_DESTRUCTOR_ITERATIONS","","",148,null],[13,"PTHREAD_KEYS_MAX","","",148,null],[13,"PTHREAD_STACK_MIN","","",148,null],[13,"PTHREAD_THREADS_MAX","","",148,null],[13,"RE_DUP_MAX","","",148,null],[13,"RTSIG_MAX","","",148,null],[13,"SEM_NSEMS_MAX","","",148,null],[13,"SEM_VALUE_MAX","","",148,null],[13,"SIGQUEUE_MAX","","",148,null],[13,"STREAM_MAX","","",148,null],[13,"SYMLOOP_MAX","","",148,null],[13,"TIMER_MAX","","",148,null],[13,"TTY_NAME_MAX","","",148,null],[13,"TZNAME_MAX","","",148,null],[13,"_XOPEN_CRYPT","","The implementation supports the X/Open Encryption Option Group.",148,null],[13,"_XOPEN_ENH_I18N","","The implementation supports the Issue 4, Version 2 Enhanced Internationalization Option Group.",148,null],[13,"_XOPEN_LEGACY","","",148,null],[13,"_XOPEN_REALTIME","","The implementation supports the X/Open Realtime Option Group.",148,null],[13,"_XOPEN_REALTIME_THREADS","","The implementation supports the X/Open Realtime Threads Option Group.",148,null],[13,"_XOPEN_SHM","","The implementation supports the Issue 4, Version 2 Shared Memory Option Group.",148,null],[13,"_XOPEN_STREAMS","","The implementation supports the XSI STREAMS Option Group.",148,null],[13,"_XOPEN_UNIX","","The implementation supports the XSI option",148,null],[13,"_XOPEN_VERSION","","Integer value indicating version of the X/Open Portability Guide to which the implementation conforms.",148,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"setresuid","","Sets the real, effective, and saved uid. (see setresuid(2))",null,{"inputs":[{"name":"uid"},{"name":"uid"},{"name":"uid"}],"output":{"name":"result"}}],[5,"setresgid","","Sets the real, effective, and saved gid. (see setresuid(2))",null,{"inputs":[{"name":"gid"},{"name":"gid"},{"name":"gid"}],"output":{"name":"result"}}],[5,"fork","","Create a new child process duplicating the parent process (see fork(2)).",null,{"inputs":[],"output":{"generics":["forkresult"],"name":"result"}}],[5,"getpid","","Get the pid of this process (see getpid(2)).",null,{"inputs":[],"output":{"name":"pid"}}],[5,"getppid","","Get the pid of this processes' parent (see getpid(2)).",null,{"inputs":[],"output":{"name":"pid"}}],[5,"setpgid","","Set a process group ID (see setpgid(2)).",null,{"inputs":[{"name":"pid"},{"name":"pid"}],"output":{"name":"result"}}],[5,"getpgid","","",null,{"inputs":[{"generics":["pid"],"name":"option"}],"output":{"generics":["pid"],"name":"result"}}],[5,"setsid","","Create new session and set process group id (see setsid(2)).",null,{"inputs":[],"output":{"generics":["pid"],"name":"result"}}],[5,"tcgetpgrp","","Get the terminal foreground process group (see tcgetpgrp(3)).",null,{"inputs":[{"name":"c_int"}],"output":{"generics":["pid"],"name":"result"}}],[5,"tcsetpgrp","","Set the terminal foreground process group (see tcgetpgrp(3)).",null,{"inputs":[{"name":"c_int"},{"name":"pid"}],"output":{"name":"result"}}],[5,"getpgrp","","Get the group id of the calling process (see getpgrp(3)).",null,{"inputs":[],"output":{"name":"pid"}}],[5,"gettid","","Get the caller's thread ID (see gettid(2).",null,{"inputs":[],"output":{"name":"pid"}}],[5,"dup","","Create a copy of the specified file descriptor (see dup(2)).",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"dup2","","Create a copy of the specified file descriptor using the specified fd (see dup(2)).",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"dup3","","Create a new copy of the specified file descriptor using the specified fd and flags (see dup(2)).",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"chdir","","Change the current working directory of the calling process (see chdir(2)).",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fchdir","","Change the current working directory of the process to the one given as an open file descriptor (see fchdir(2)).",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"mkdir","","Creates new directory `path` with access rights `mode`.  (see mkdir(2))",null,{"inputs":[{"name":"p"},{"name":"mode"}],"output":{"name":"result"}}],[5,"mkfifo","","Creates new fifo special file (named pipe) with path `path` and access rights `mode`.",null,{"inputs":[{"name":"p"},{"name":"mode"}],"output":{"name":"result"}}],[5,"getcwd","","Returns the current directory as a `PathBuf`",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"chown","","Change the ownership of the file at `path` to be owned by the specified `owner` (user) and `group` (see chown(2)).",null,{"inputs":[{"name":"p"},{"generics":["uid"],"name":"option"},{"generics":["gid"],"name":"option"}],"output":{"name":"result"}}],[5,"execv","","Replace the current process image with a new one (see exec(3)).",null,null],[5,"execve","","Replace the current process image with a new one (see execve(2)).",null,null],[5,"execvp","","Replace the current process image with a new one and replicate shell `PATH` searching behavior (see exec(3)).",null,null],[5,"fexecve","","Replace the current process image with a new one (see fexecve(2)).",null,null],[5,"execveat","","Execute program relative to a directory file descriptor (see execveat(2)).",null,null],[5,"daemon","","Daemonize this process by detaching from the controlling terminal (see daemon(3)).",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","Set the system host name (see sethostname(2)).",null,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[5,"gethostname","","Get the host name and store it in the provided buffer, returning a pointer the `CStr` in that buffer on success (see gethostname(2)).",null,null],[5,"close","","Close a raw file descriptor",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","Read from a raw file descriptor.",null,null],[5,"write","","Write to a raw file descriptor.",null,null],[5,"lseek","","Move the read/write file offset.",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"},{"name":"whence"}],"output":{"generics":["off_t"],"name":"result"}}],[5,"lseek64","","",null,{"inputs":[{"name":"rawfd"},{"name":"off64_t"},{"name":"whence"}],"output":{"generics":["off64_t"],"name":"result"}}],[5,"pipe","","Create an interprocess channel.",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","Like `pipe`, but allows setting certain file descriptor flags.",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","Truncate a file to a specified length",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[5,"unlink","","Remove a directory entry",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","Synchronize changes to a file",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","Synchronize the data of a file",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","Get a real user ID",null,{"inputs":[],"output":{"name":"uid"}}],[5,"geteuid","","Get the effective user ID",null,{"inputs":[],"output":{"name":"uid"}}],[5,"getgid","","Get the real group ID",null,{"inputs":[],"output":{"name":"gid"}}],[5,"getegid","","Get the effective group ID",null,{"inputs":[],"output":{"name":"gid"}}],[5,"setuid","","Set the user ID",null,{"inputs":[{"name":"uid"}],"output":{"name":"result"}}],[5,"setgid","","Set the user ID",null,{"inputs":[{"name":"gid"}],"output":{"name":"result"}}],[5,"getgroups","","Get the list of supplementary group IDs of the calling process.",null,{"inputs":[],"output":{"generics":["vec"],"name":"result"}}],[5,"setgroups","","Set the list of supplementary group IDs for the calling process.",null,null],[5,"getgrouplist","","Calculate the supplementary group access list.",null,{"inputs":[{"name":"cstr"},{"name":"gid"}],"output":{"generics":["vec"],"name":"result"}}],[5,"initgroups","","Initialize the supplementary group access list.",null,{"inputs":[{"name":"cstr"},{"name":"gid"}],"output":{"name":"result"}}],[5,"pause","","Suspend the thread until a signal is received.",null,{"inputs":[],"output":null}],[5,"sleep","","Suspend execution for an interval of time",null,{"inputs":[{"name":"c_uint"}],"output":{"name":"c_uint"}}],[5,"mkstemp","","Creates a regular file which persists even after process termination",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fpathconf","","Like `pathconf`, but works with file descriptors instead of paths (see fpathconf(2))",null,{"inputs":[{"name":"rawfd"},{"name":"pathconfvar"}],"output":{"generics":["option"],"name":"result"}}],[5,"pathconf","","Get path-dependent configurable system variables (see pathconf(2))",null,{"inputs":[{"name":"p"},{"name":"pathconfvar"}],"output":{"generics":["option"],"name":"result"}}],[5,"sysconf","","Get configurable system variables (see sysconf(3))",null,{"inputs":[{"name":"sysconfvar"}],"output":{"generics":["option"],"name":"result"}}],[17,"ROOT","","Constant for UID = 0",null,null],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"uid"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"uid"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"uid"}],"output":{"name":"bool"}}],[11,"hash","","",149,null],[11,"from_raw","","Creates `Uid` from raw `uid_t`.",149,{"inputs":[{"name":"uid_t"}],"output":{"name":"self"}}],[11,"current","","Returns Uid of calling process. This is practically a more Rusty alias for `getuid`.",149,{"inputs":[],"output":{"name":"self"}}],[11,"effective","","Returns effective Uid of calling process. This is practically a more Rusty alias for `geteuid`.",149,{"inputs":[],"output":{"name":"self"}}],[11,"is_root","","Returns true if the `Uid` represents privileged user - root. (If it equals zero.)",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"gid"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"gid"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"gid"}],"output":{"name":"bool"}}],[11,"hash","","",150,null],[11,"from_raw","","Creates `Gid` from raw `gid_t`.",150,{"inputs":[{"name":"gid_t"}],"output":{"name":"self"}}],[11,"current","","Returns Gid of calling process. This is practically a more Rusty alias for `getgid`.",150,{"inputs":[],"output":{"name":"self"}}],[11,"effective","","Returns effective Gid of calling process. This is practically a more Rusty alias for `getgid`.",150,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"pid"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"pid"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"pid"}],"output":{"name":"bool"}}],[11,"hash","","",151,null],[11,"from_raw","","Creates `Pid` from raw `pid_t`.",151,{"inputs":[{"name":"pid_t"}],"output":{"name":"self"}}],[11,"this","","Returns PID of calling process",151,{"inputs":[],"output":{"name":"self"}}],[11,"parent","","Returns PID of parent of calling process",151,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",152,{"inputs":[{"name":"pid"}],"output":{"name":"self"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"forkresult"}}],[11,"is_child","","Return `true` if this is the child process of the `fork()`",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parent","","Returns `true` if this is the parent process of the `fork()`",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"pathconfvar"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",147,null],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"pathconfvar"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"sysconfvar"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",148,null],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"sysconfvar"}],"output":{"name":"bool"}}],[6,"Result","nix","Nix Result Type",null,null],[8,"NixPath","","",null,null],[10,"len","","",153,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"with_nix_path","","",153,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_errno","","Create a nix Error from a given errno",0,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","Get the current errno and convert it to a nix Error",0,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","Create a new invalid argument error (`EINVAL`)",0,{"inputs":[],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"ioctl","","Generates ioctl functions. See `::sys::ioctl`.",null,null],[11,"clone","nix::sys::socket","",56,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","nix::sys::stat","",108,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","nix::pty","",16,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","nix::sys::socket","",53,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","nix::sys::signalfd","",47,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","nix::sys::socket","",52,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}]],"paths":[[4,"Error"],[4,"Errno"],[8,"ErrnoSentinel"],[4,"FcntlArg"],[4,"FlockArg"],[3,"AtFlags"],[3,"OFlag"],[3,"SealFlag"],[3,"FdFlag"],[3,"SpliceFFlags"],[3,"FallocateFlags"],[3,"MsFlags"],[3,"MntFlags"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"MqAttr"],[3,"Winsize"],[3,"OpenptyResult"],[3,"PtyMaster"],[3,"PollFd"],[3,"EventFlags"],[3,"InterfaceFlags"],[3,"InterfaceAddress"],[3,"InterfaceAddressIterator"],[3,"CloneFlags"],[3,"CpuSet"],[4,"AioFsyncMode"],[4,"LioOpcode"],[4,"LioMode"],[4,"AioCancelStat"],[4,"Buffer"],[3,"AioCb"],[4,"EpollOp"],[3,"EpollFlags"],[3,"EpollCreateFlags"],[3,"EpollEvent"],[3,"EfdFlags"],[3,"MemFdCreateFlag"],[4,"Signal"],[4,"SigmaskHow"],[4,"SigHandler"],[4,"SigevNotify"],[3,"SigEvent"],[3,"SignalIterator"],[3,"SaFlags"],[3,"SigSet"],[3,"SigAction"],[3,"siginfo"],[3,"SfdFlags"],[3,"SignalFd"],[3,"cmsghdr"],[3,"msghdr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_storage"],[3,"sockaddr_un"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"LinkAddr"],[3,"NetlinkAddr"],[3,"RecvMsg"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"SockProtocol"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[3,"OriginalDst"],[3,"ReceiveTimestamp"],[3,"IpTransparent"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"MsgFlags"],[3,"UnixCredentials"],[3,"IpMembershipRequest"],[3,"Ipv6MembershipRequest"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"FileStat"],[3,"SFlag"],[3,"Mode"],[4,"RebootMode"],[3,"Termios"],[4,"BaudRate"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[4,"SpecialCharacterIndices"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[4,"MmapAdvise"],[3,"ProtFlags"],[3,"MapFlags"],[3,"MsFlags"],[3,"RemoteIoVec"],[3,"IoVec"],[8,"TimeValLike"],[3,"TimeSpec"],[3,"TimeVal"],[4,"Request"],[4,"Event"],[3,"Options"],[3,"FdSet"],[4,"QuotaType"],[4,"QuotaFmt"],[3,"QuotaValidFlags"],[3,"Dqblk"],[3,"FsFlags"],[3,"Statvfs"],[3,"UContext"],[4,"ForkResult"],[4,"Whence"],[4,"PathconfVar"],[4,"SysconfVar"],[3,"Uid"],[3,"Gid"],[3,"Pid"],[6,"SessionId"],[8,"NixPath"]]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["nom"] = {"doc":"nom, eating data byte by byte","items":[[3,"ProducerRepeat","nom","ProducerRepeat takes a single value, and generates it at each step",null,null],[3,"MemProducer","","A MemProducer generates values from an in memory byte buffer",null,null],[3,"FileProducer","","",null,null],[3,"MapConsumer","","MapConsumer takes a function S -> T and applies it on a consumer producing values of type S",null,null],[3,"ChainConsumer","","ChainConsumer takes a consumer C1 R -> S, and a consumer C2 S -> T, and makes a consumer R -> T by applying C2 on C1's result",null,null],[4,"ErrorKind","","indicates which parser returned an error",null,null],[13,"Custom","","",0,null],[13,"Tag","","",0,null],[13,"MapRes","","",0,null],[13,"MapOpt","","",0,null],[13,"Alt","","",0,null],[13,"IsNot","","",0,null],[13,"IsA","","",0,null],[13,"SeparatedList","","",0,null],[13,"SeparatedNonEmptyList","","",0,null],[13,"Many0","","",0,null],[13,"Many1","","",0,null],[13,"ManyTill","","",0,null],[13,"Count","","",0,null],[13,"TakeUntilAndConsume","","",0,null],[13,"TakeUntil","","",0,null],[13,"TakeUntilEitherAndConsume","","",0,null],[13,"TakeUntilEither","","",0,null],[13,"LengthValue","","",0,null],[13,"TagClosure","","",0,null],[13,"Alpha","","",0,null],[13,"Digit","","",0,null],[13,"HexDigit","","",0,null],[13,"OctDigit","","",0,null],[13,"AlphaNumeric","","",0,null],[13,"Space","","",0,null],[13,"MultiSpace","","",0,null],[13,"LengthValueFn","","",0,null],[13,"Eof","","",0,null],[13,"ExprOpt","","",0,null],[13,"ExprRes","","",0,null],[13,"CondReduce","","",0,null],[13,"Switch","","",0,null],[13,"TagBits","","",0,null],[13,"OneOf","","",0,null],[13,"NoneOf","","",0,null],[13,"Char","","",0,null],[13,"CrLf","","",0,null],[13,"RegexpMatch","","",0,null],[13,"RegexpMatches","","",0,null],[13,"RegexpFind","","",0,null],[13,"RegexpCapture","","",0,null],[13,"RegexpCaptures","","",0,null],[13,"TakeWhile1","","",0,null],[13,"Complete","","",0,null],[13,"Fix","","",0,null],[13,"Escaped","","",0,null],[13,"EscapedTransform","","",0,null],[13,"TagStr","","",0,null],[13,"IsNotStr","","",0,null],[13,"IsAStr","","",0,null],[13,"TakeWhile1Str","","",0,null],[13,"NonEmpty","","",0,null],[13,"ManyMN","","",0,null],[13,"TakeUntilAndConsumeStr","","",0,null],[13,"TakeUntilStr","","",0,null],[13,"Not","","",0,null],[13,"Permutation","","",0,null],[13,"Verify","","",0,null],[13,"TakeTill1","","",0,null],[4,"CompareResult","","indicates wether a comparison was successful, an error, or if more data was needed",null,null],[13,"Ok","","",1,null],[13,"Incomplete","","",1,null],[13,"Error","","",1,null],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",null,null],[13,"Unknown","","needs more data, but we do not know how much",2,null],[13,"Size","","contains the required data size",2,null],[4,"IResult","","Holds the result of parsing functions",null,null],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",3,null],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",3,null],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",3,null],[4,"IError","","This is the same as IResult, but without Done",null,null],[13,"Error","","",4,null],[13,"Incomplete","","",4,null],[4,"Endianness","","Configurable endianness",null,null],[13,"Big","","",5,null],[13,"Little","","",5,null],[4,"Input","","",null,null],[13,"Element","","",6,null],[13,"Empty","","",6,null],[13,"Eof","","",6,null],[4,"ConsumerState","","Stores a consumer's current computation state",null,null],[13,"Done","","A value of type O has been produced",7,null],[13,"Error","","An error of type E has been encountered",7,null],[13,"Continue","","Continue applying, and pass a message of type M to the data source",7,null],[4,"Move","","",null,null],[13,"Consume","","indcates how much data was consumed",8,null],[13,"Seek","","indicates where in the input the consumer must seek",8,null],[13,"Await","","indicates more data is needed",8,null],[4,"FileProducerState","","",null,null],[13,"Normal","","",9,null],[13,"Error","","",9,null],[13,"Eof","","",9,null],[5,"slice_to_offsets","","",null,null],[5,"code_from_offset","","",null,null],[5,"reset_color","","",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"write_color","","",null,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[5,"print_codes","","",null,{"inputs":[{"generics":["u32","u8"],"name":"hashmap"},{"generics":["u32","str"],"name":"hashmap"}],"output":{"name":"string"}}],[5,"error_to_u32","","",null,{"inputs":[{"name":"errorkind"}],"output":{"name":"u32"}}],[5,"tag_cl","","",null,null],[5,"print","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"begin","","",null,null],[5,"crlf","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"not_line_ending","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"line_ending","","Recognizes an end of line (both '\\n' and '\\r\\n')",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"eol","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"is_alphabetic","","Tests if byte is ASCII alphabetic: A-Z, a-z",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_digit","","Tests if byte is ASCII digit: 0-9",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_hex_digit","","Tests if byte is ASCII hex digit: 0-9, A-F, a-f",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_oct_digit","","Tests if byte is ASCII octal digit: 0-7",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_alphanumeric","","Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_space","","Tests if byte is ASCII space or tab",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"alpha","","Recognizes one or more lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"digit","","Recognizes one or more numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"hex_digit","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"oct_digit","","Recognizes one or more octal characters: 0-7",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric","","Recognizes one or more numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space","","Recognizes one or more spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace","","Recognizes one or more spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"sized_buffer","","",null,null],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",null,null],[5,"be_u24","","Recognizes big endian unsigned 3 byte integer",null,null],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",null,null],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",null,null],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",null,null],[5,"be_i24","","Recognizes big endian signed 3 bytes integer",null,null],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",null,null],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",null,null],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",null,null],[5,"le_u24","","Recognizes little endian unsigned 3 byte integer",null,null],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",null,null],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",null,null],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",null,null],[5,"le_i24","","Recognizes little endian signed 3 bytes integer",null,null],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",null,null],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",null,null],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",null,null],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",null,null],[5,"le_f32","","Recognizes little endian 4 bytes floating point number",null,null],[5,"le_f64","","Recognizes little endian 8 bytes floating point number",null,null],[5,"hex_u32","","Recognizes a hex-encoded integer",null,null],[5,"non_empty","","Recognizes non empty buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"rest","","Return the remaining input.",null,null],[5,"rest_s","","Return the remaining input, for strings.",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","str"],"name":"iresult"}}],[5,"float","","Recognizes floating point number in a byte string and returns a f32",null,null],[5,"float_s","","Recognizes floating point number in a string and returns a f32",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","f32"],"name":"iresult"}}],[5,"double","","Recognizes floating point number in a byte string and returns a f64",null,null],[5,"double_s","","Recognizes floating point number in a string and returns a f64",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","f64"],"name":"iresult"}}],[5,"newline","","Matches a newline character '\\n'",null,null],[5,"tab","","Matches a tab character '\\t'",null,null],[5,"anychar","","",null,{"inputs":[{"name":"t"}],"output":{"generics":["char"],"name":"iresult"}}],[5,"shift","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_error_kind","","Convert Err into an ErrorKind.",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"compareresult"}],"output":{"name":"bool"}}],[0,"simple_errors","","Error management",null,null],[6,"Err","nom::simple_errors","",null,null],[11,"map_err","nom","Maps a `IResult<I, O, E>` to `IResult<I, O, N>` by appling a function to a contained `Error` value, leaving `Done` and `Incomplete` value untouched.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"unwrap_err","","Unwrap the contained `Error(E)` value, or panic if the `IResult` is not `Error`.",3,{"inputs":[{"name":"self"}],"output":{"name":"err"}}],[11,"to_full_result","","Convert the IResult to a std::result::Result",3,{"inputs":[{"name":"self"}],"output":{"generics":["ierror"],"name":"result"}}],[11,"to_result","","Convert the IResult to a std::result::Result, or panic if the `IResult` is `Incomplete`",3,{"inputs":[{"name":"self"}],"output":{"generics":["err"],"name":"result"}}],[11,"description","nom::simple_errors","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","nom","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"needed"}}],[11,"is_known","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"needed"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"ierror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"ierror"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"ierror"}}],[11,"is_done","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_incomplete","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"or","","",3,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"iresult"}}],[11,"map","","Maps a `IResult<I, O, E>` to `IResult<I, N, E>` by appling a function to a contained `Done` value, leaving `Error` and `Incomplete` value untouched.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_inc","","Maps a `IResult<I, O, E>` to `IResult<I, O, E>` by appling a function to a contained `Incomplete` value, leaving `Done` and `Error` value untouched.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"unwrap","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not `Done`.",3,null],[11,"unwrap_or","","Unwrap the contained `Done(I, O)` value or a default if the `IResult` is not `Done`.",3,null],[11,"unwrap_inc","","Unwrap the contained `Incomplete(n)` value, or panic if the `IResult` is not `Incomplete`.",3,{"inputs":[{"name":"self"}],"output":{"name":"needed"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[0,"methods","","Method macro combinators",null,null],[0,"bits","","Bit level parsers and combinators",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"endianness"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"endianness"}}],[0,"whitespace","","Support for whitespace delimited formats",null,null],[5,"sp","nom::whitespace","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[11,"fmt","nom","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[11,"map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"flat_map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"apply","","",11,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",12,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"apply","","",12,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"fileproducerstate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"fileproducerstate"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["fileproducer"],"name":"result"}}],[11,"state","","",13,{"inputs":[{"name":"self"}],"output":{"name":"fileproducerstate"}}],[11,"refill","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"resize","","Resize the internal buffer, copy the data to the new one and returned how much data was copied",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"apply","","",13,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",14,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"mapconsumer"}}],[11,"handle","","",14,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",14,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[11,"new","","",15,{"inputs":[{"name":"c1"},{"name":"c2"}],"output":{"name":"chainconsumer"}}],[11,"handle","","",15,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",15,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[8,"Offset","","useful functions to calculate the offset between slices and show a hexdump of a slice",null,null],[10,"offset","","offset between the first byte of self and the first byte of the argument",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[8,"HexDisplay","","",null,null],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned string.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned string.",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[8,"AsBytes","","",null,null],[10,"as_bytes","","",18,null],[8,"InputLength","","abstract method to calculate the input length",null,null],[10,"input_len","","calculates the input length, as indicated by its name, and the name of the trait itself",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"AsChar","","transforms common types to a char for basic token parsing",null,null],[10,"as_char","","makes a char from self",20,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[10,"is_alpha","","tests that self is an alphabetic character",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_alphanum","","tests that self is an alphabetic character or a decimal digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_dec_digit","","tests that self is a decimal digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_hex_digit","","tests that self is an hex digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_oct_digit","","tests that self is an octal digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"len","","gets the len in bytes for self",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"InputIter","","abstracts common iteration operations on the input type",null,null],[16,"Item","","",21,null],[16,"RawItem","","",21,null],[16,"Iter","","",21,null],[16,"IterElem","","",21,null],[10,"iter_indices","","returns an iterator over the elements and their byte offsets",21,null],[10,"iter_elements","","returns an iterator over the elements",21,null],[10,"position","","finds the byte position of the element",21,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[10,"slice_index","","get the byte offset from the element's position in the stream",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[8,"InputTake","","abstracts slicing operations",null,null],[10,"take","","returns a slice of `count` bytes",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[10,"take_split","","split the stream at the `count` byte offset",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Compare","","abstracts comparison operations",null,null],[10,"compare","","compares self to another value for equality",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"compareresult"}}],[10,"compare_no_case","","compares self to another value for equality independently of the case.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"compareresult"}}],[8,"FindToken","","look for self in the given input stream",null,null],[10,"find_token","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[8,"FindSubstring","","look for a substring in self",null,null],[10,"find_substring","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["usize"],"name":"option"}}],[8,"ParseTo","","used to integrate str's parse() method",null,null],[10,"parse_to","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Slice","","slicing operations using ranges",null,null],[10,"slice","","",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[8,"GetInput","","",null,null],[10,"remaining_input","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"GetOutput","","",null,null],[10,"output","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Consumer","","The Consumer trait wraps a computation and its state",null,null],[10,"handle","","implement handle for the current computation, returning the new state of the consumer",30,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"consumerstate"}}],[10,"state","","returns the current state",30,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[8,"Producer","","The producer wraps a data source, like file or network, and applies a consumer on it",null,null],[10,"apply","","Applies a consumer once on the produced data, and return the consumer's state",31,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",31,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"option"}}],[14,"compiler_error","","",null,null],[14,"dbg","","Prints a message if the parser fails",null,null],[14,"dbg_dmp","","Prints a message and the input if the parser fails",null,null],[14,"fix_error","","translate parser result from IResult<I,O,u32> to IResult<I,O,E> with a custom type",null,null],[14,"flat_map","","`flat_map!(R -> IResult<R,S>, S -> IResult<S,T>) => R -> IResult<R, T>`",null,null],[14,"error_code","","creates a parse error from a `nom::ErrorKind`",null,null],[14,"error_node","","creates a parse error from a `nom::ErrorKind` and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",null,null],[14,"error_position","","creates a parse error from a `nom::ErrorKind` and the position in the input if \"verbose-errors\" is not activated, it default to only the error code",null,null],[14,"error_node_position","","creates a parse error from a `nom::ErrorKind`, the position in the input and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",null,null],[14,"closure","","Wraps a parser in a closure",null,null],[14,"named","","Makes a function from a parser combination",null,null],[14,"named_args","","Makes a function from a parser combination with arguments.",null,null],[14,"named_attr","","Makes a function from a parser combination, with attributes",null,null],[14,"call","","Used to wrap common expressions and function as macros",null,null],[14,"apply","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",null,null],[14,"return_error","","Prevents backtracking if the child parser fails",null,null],[14,"add_return_error","","Add an error if the child parser fails",null,null],[14,"complete","","replaces a `Incomplete` returned by the child parser with an `Error`",null,null],[14,"try_parse","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Done`, and will do an early return for `Error` and `Incomplete` this can provide more flexibility than `do_parse!` if needed",null,null],[14,"map","","`map!(I -> IResult<I,O>, O -> P) => I -> IResult<I, P>` maps a function on the result of a parser",null,null],[14,"map_res","","`map_res!(I -> IResult<I,O>, O -> Result<P>) => I -> IResult<I, P>` maps a function returning a Result on the output of a parser",null,null],[14,"map_opt","","`map_opt!(I -> IResult<I,O>, O -> Option<P>) => I -> IResult<I, P>` maps a function returning an Option on the output of a parser",null,null],[14,"parse_to","","`parse_to!(O) => I -> IResult<I, O>` uses the `parse` method from `std::str::FromStr` to convert the current input to the specified type",null,null],[14,"verify","","`verify!(I -> IResult<I,O>, O -> bool) => I -> IResult<I, O>` returns the result of the child parser if it satisfies a verification function",null,null],[14,"value","","`value!(T, R -> IResult<R, S> ) => R -> IResult<R, T>`",null,null],[14,"expr_res","","`expr_res!(Result<E,O>) => I -> IResult<I, O>` evaluate an expression that returns a Result<T,E> and returns a IResult::Done(I,T) if Ok",null,null],[14,"expr_opt","","`expr_opt!(Option<O>) => I -> IResult<I, O>` evaluate an expression that returns a Option and returns a IResult::Done(I,T) if Some",null,null],[14,"opt","","`opt!(I -> IResult<I,O>) => I -> IResult<I, Option<O>>` make the underlying parser optional",null,null],[14,"opt_res","","`opt_res!(I -> IResult<I,O>) => I -> IResult<I, Result<nom::Err,O>>` make the underlying parser optional",null,null],[14,"cond_with_error","","`cond_with_error!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",null,null],[14,"cond","","`cond!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",null,null],[14,"cond_reduce","","`cond_reduce!(bool, I -> IResult<I,O>) => I -> IResult<I, O>` Conditional combinator with error",null,null],[14,"peek","","`peek!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result without consuming the input",null,null],[14,"not","","`not!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result only if the embedded parser returns Error or Incomplete does not consume the input",null,null],[14,"tap","","`tap!(name: I -> IResult<I,O> => { block }) => I -> IResult<I, O>` allows access to the parser's result without affecting it",null,null],[14,"eof","","`eof!()` returns its input if it is at the end of input data",null,null],[14,"recognize","","`recognize!(I -> IResult<I, O> ) => I -> IResult<I, I>` if the child parser was successful, return the consumed input as produced value",null,null],[14,"alt","","Try a list of parsers and return the result of the first successful one",null,null],[14,"alt_complete","","Is equivalent to the `alt!` combinator, except that it will not return `Incomplete` when one of the constituting parsers returns `Incomplete`. Instead, it will try the next alternative in the chain.",null,null],[14,"switch","","`switch!(I -> IResult<I,P>, P => I -> IResult<I,O> | ... | P => I -> IResult<I,O> ) => I -> IResult<I, O>` choose the next parser depending on the result of the first one, if successful, and returns the result of the second parser",null,null],[14,"permutation","","`permutation!(I -> IResult<I,A>, I -> IResult<I,B>, ... I -> IResult<I,X> ) => I -> IResult<I, (A,B,...X)>` applies its sub parsers in a sequence, but independent from their order this parser will only succeed if all of its sub parsers succeed",null,null],[14,"tuple","","`tuple!(I->IResult<I,A>, I->IResult<I,B>, ... I->IResult<I,X>) => I -> IResult<I, (A, B, ..., X)>` chains parsers and assemble the sub results in a tuple.",null,null],[14,"pair","","`pair!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` pair(X,Y), returns (x,y)",null,null],[14,"separated_pair","","`separated_pair!(I -> IResult<I,O>, I -> IResult<I, T>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` separated_pair(X,sep,Y) returns (x,y)",null,null],[14,"preceded","","`preceded!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, O>` preceded(opening, X) returns X",null,null],[14,"terminated","","`terminated!(I -> IResult<I,O>, I -> IResult<I,T>) => I -> IResult<I, O>` terminated(X, closing) returns X",null,null],[14,"delimited","","`delimited!(I -> IResult<I,T>, I -> IResult<I,O>, I -> IResult<I,U>) => I -> IResult<I, O>` delimited(opening, X, closing) returns X",null,null],[14,"do_parse","","`do_parse!(I->IResult<I,A> >> I->IResult<I,B> >> ... I->IResult<I,X> , ( O ) ) => I -> IResult<I, O>` do_parse applies sub parsers in a sequence. it can store intermediary results and make them available for later parsers",null,null],[14,"separated_list","","`separated_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_list(sep, X) returns Vec will return Incomplete if there may be more elements",null,null],[14,"separated_nonempty_list","","`separated_nonempty_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_nonempty_list(sep, X) returns Vec will return Incomplete if there may be more elements",null,null],[14,"separated_list_complete","","`separated_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",null,null],[14,"separated_nonempty_list_complete","","`separated_nonempty_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_nonempty_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",null,null],[14,"many0","","`many0!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 0 or more times and returns the list of results in a Vec",null,null],[14,"many1","","`many1!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 1 or more times and returns the list of results in a Vec",null,null],[14,"many_till","","`many_till!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (Vec<O>, P)>` Applies the first parser until the second applies. Returns a tuple containing the list of results from the first in a Vec and the result of the second.",null,null],[14,"many_m_n","","`many_m_n!(usize, usize, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser between m and n times (n included) and returns the list of results in a Vec",null,null],[14,"count","","`count!(I -> IResult<I,O>, nb) => I -> IResult<I, Vec<O>>` Applies the child parser a specified number of times",null,null],[14,"count_fixed","","`count_fixed!(O, I -> IResult<I,O>, nb) => I -> IResult<I, [O; nb]>` Applies the child parser a fixed number of times and returns a fixed size array The type must be specified and it must be `Copy`",null,null],[14,"length_count","","`length_count!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, then applies the second parser that many times",null,null],[14,"length_data","","`length_data!(I -> IResult<I, nb>) => O`",null,null],[14,"length_value","","`length_value!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, takes a subslice of the input of that size, then applies the second parser on that subslice. If the second parser returns `Incomplete`, `length_value` will return an error",null,null],[14,"fold_many0","","`fold_many0!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 0 or more times and folds the list of return values",null,null],[14,"fold_many1","","`fold_many1!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 1 or more times and folds the list of return values",null,null],[14,"fold_many_m_n","","`fold_many_m_n!(usize, usize, I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser between m and n times (n included) and folds the list of return value",null,null],[14,"method","","Makes a method from a parser combination",null,null],[14,"call_m","","Used to called methods then move self back into self",null,null],[14,"apply_m","","emulate function currying for method calls on structs `apply_m!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",null,null],[14,"tag","","`tag!(&[T]: nom::AsBytes) => &[T] -> IResult<&[T], &[T]>` declares a byte array as a suite to recognize",null,null],[14,"tag_no_case","","`tag_no_case!(&[T]) => &[T] -> IResult<&[T], &[T]>` declares a case insensitive ascii string as a suite to recognize",null,null],[14,"is_not","","`is_not!(&[T:AsBytes]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that do not appear in the provided array",null,null],[14,"is_a","","`is_a!(&[T]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that appear in the provided array",null,null],[14,"escaped","","`escaped!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], &[T]>` matches a byte string with escaped characters.",null,null],[14,"escaped_transform","","`escaped_transform!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], Vec<T>>` matches a byte string with escaped characters.",null,null],[14,"take_while","","`take_while!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function fails.",null,null],[14,"take_while1","","`take_while1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest (non empty) list of bytes until the provided function fails.",null,null],[14,"take_till","","`take_till!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function succeeds",null,null],[14,"take_till1","","`take_till1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest non empty list of bytes until the provided function succeeds",null,null],[14,"take","","`take!(nb) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming the specified number of bytes",null,null],[14,"take_str","","`take_str!(nb) => &[T] -> IResult<&[T], &str>` same as take! but returning a &str",null,null],[14,"take_until_and_consume","","`take_until_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes until the specified byte sequence is found, and consumes it",null,null],[14,"take_until_and_consume1","","`take_until_and_consume1!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes (at least 1) until the specified byte sequence is found, and consumes it",null,null],[14,"take_until","","`take_until!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag",null,null],[14,"take_until1","","`take_until1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag",null,null],[14,"take_until_either_and_consume","","`take_until_either_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters, and consume it",null,null],[14,"take_until_either","","`take_until_either!(tag) => &[T] -> IResult<&[T], &[T]>`",null,null],[14,"length_bytes","","`length_bytes!(&[T] -> IResult<&[T], nb>) => &[T] -> IResult<&[T], &[T]>` Gets a number from the first parser, then extracts that many bytes from the remaining stream",null,null],[14,"bits","","`bits!( parser ) => ( &[u8], (&[u8], usize) -> IResult<(&[u8], usize), T> ) -> IResult<&[u8], T>` transforms its byte slice input into a bit stream for the underlying parsers",null,null],[14,"bytes","","Counterpart to bits, `bytes!( parser ) => ( (&[u8], usize), &[u8] -> IResult<&[u8], T> ) -> IResult<(&[u8], usize), T>`, transforms its bits stream input into a byte slice for the underlying parsers. If we start in the middle of a byte throws away the bits until the end of the byte.",null,null],[14,"take_bits","","`take_bits!(type, nb) => ( (&[T], usize), U, usize) -> IResult<(&[T], usize), U>` generates a parser consuming the specified number of bits.",null,null],[14,"tag_bits","","matches an integer pattern to a bitstream. The number of bits of the input to compare must be specified",null,null],[14,"u16","","if the parameter is nom::Endianness::Big, parse a big endian u16 integer, otherwise a little endian u16 integer",null,null],[14,"u32","","if the parameter is nom::Endianness::Big, parse a big endian u32 integer, otherwise a little endian u32 integer",null,null],[14,"u64","","if the parameter is nom::Endianness::Big, parse a big endian u64 integer, otherwise a little endian u64 integer",null,null],[14,"i16","","if the parameter is nom::Endianness::Big, parse a big endian i16 integer, otherwise a little endian i16 integer",null,null],[14,"i32","","if the parameter is nom::Endianness::Big, parse a big endian i32 integer, otherwise a little endian i32 integer",null,null],[14,"i64","","if the parameter is nom::Endianness::Big, parse a big endian i64 integer, otherwise a little endian i64 integer",null,null],[14,"one_of","","matches one of the provided characters",null,null],[14,"none_of","","matches anything but the provided characters",null,null],[14,"char","","matches one character: `char!(char) => &[u8] -> IResult<&[u8], char>",null,null],[14,"wrap_sep","","",null,null],[14,"eat_separator","","helper macros to build a separator parser",null,null],[14,"sep","","sep is the parser rewriting macro for whitespace separated formats",null,null],[14,"ws","","`ws!(I -> IResult<I,O>) => I -> IResult<I, O>`",null,null],[14,"consumer_from_parser","","",null,null],[14,"tag_s","","`tag_s!(&str) => &str -> IResult<&str, &str>` declares a string as a suite to recognize",null,null],[14,"tag_no_case_s","","`tag_no_case_s!(&str) => &str -> IResult<&str, &str>` declares a case-insensitive string as a suite to recognize",null,null],[14,"take_s","","`take_s!(nb) => &str -> IResult<&str, &str>` generates a parser consuming the specified number of characters",null,null],[14,"is_not_s","","`is_not_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that do not appear in the provided array",null,null],[14,"is_a_s","","`is_a_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that appear in the provided array",null,null],[14,"take_while_s","","`take_while_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function fails.",null,null],[14,"take_while1_s","","`take_while1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest (non empty) list of characters until the provided function fails.",null,null],[14,"take_till_s","","`take_till_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function succeeds",null,null],[14,"take_till1_s","","`take_till1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest non empty list of characters until the provided function succeeds",null,null],[14,"take_until_and_consume_s","","`take_until_and_consume_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and consumes it",null,null],[14,"take_until_s","","`take_until_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and leaves it in the remaining input",null,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",31,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"option"}}]],"paths":[[4,"ErrorKind"],[4,"CompareResult"],[4,"Needed"],[4,"IResult"],[4,"IError"],[4,"Endianness"],[4,"Input"],[4,"ConsumerState"],[4,"Move"],[4,"FileProducerState"],[6,"Err"],[3,"ProducerRepeat"],[3,"MemProducer"],[3,"FileProducer"],[3,"MapConsumer"],[3,"ChainConsumer"],[8,"Offset"],[8,"HexDisplay"],[8,"AsBytes"],[8,"InputLength"],[8,"AsChar"],[8,"InputIter"],[8,"InputTake"],[8,"Compare"],[8,"FindToken"],[8,"FindSubstring"],[8,"ParseTo"],[8,"Slice"],[8,"GetInput"],[8,"GetOutput"],[8,"Consumer"],[8,"Producer"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"pow","num","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",18,null],[10,"pow","","Returns `self` to the power `rhs`.",18,null],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",19,{"inputs":[{"name":"sign"},{"generics":["u32"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",19,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",19,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",19,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",19,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",19,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",19,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",19,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",19,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",19,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",19,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",19,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",19,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",19,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",19,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",19,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",19,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",19,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"generics":["complex"],"name":"result"}}],[11,"hash","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["complex"],"name":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["complex"],"name":"result"}}],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"to_bigint","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"add_assign","","",20,null],[11,"add_assign","","",20,null],[11,"add_assign","","",20,null],[11,"add_assign","","",20,null],[11,"add_assign","","",20,null],[11,"add_assign","","",20,null],[11,"add_assign","","",20,null],[11,"checked_add","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"bitand","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from_i64","","",19,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",19,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",19,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_i64","","",20,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",20,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",20,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"bitor","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"from_str","","",20,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"hash","","",19,null],[11,"hash","","",20,null],[11,"abs","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"to_i64","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"mul_assign","","",20,null],[11,"mul_assign","","",20,null],[11,"mul_assign","","",20,null],[11,"mul_assign","","",20,null],[11,"mul_assign","","",20,null],[11,"mul_assign","","",20,null],[11,"mul_assign","","",20,null],[11,"from_str_radix","","Creates and initializes a `BigUint`.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",19,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"rem_assign","","",20,null],[11,"rem_assign","","",20,null],[11,"rem_assign","","",20,null],[11,"rem_assign","","",20,null],[11,"rem_assign","","",20,null],[11,"rem_assign","","",20,null],[11,"rem_assign","","",20,null],[11,"checked_div","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitor_assign","","",20,null],[11,"bitor_assign","","",20,null],[11,"bitand_assign","","",20,null],[11,"bitand_assign","","",20,null],[11,"zero","","",20,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",19,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"shl_assign","","",20,null],[11,"bitxor_assign","","",20,null],[11,"bitxor_assign","","",20,null],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"one","","",20,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",19,{"inputs":[],"output":{"name":"bigint"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"div_rem","","",20,null],[11,"div_floor","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",20,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",19,null],[11,"div_floor","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",19,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_biguint","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"to_biguint","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"shr_assign","","",20,null],[11,"from","","",19,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",20,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",20,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",20,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",19,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",20,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"shr","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"div_assign","","",20,null],[11,"div_assign","","",20,null],[11,"div_assign","","",20,null],[11,"div_assign","","",20,null],[11,"div_assign","","",20,null],[11,"div_assign","","",20,null],[11,"div_assign","","",20,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitxor","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",20,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"neg","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"bigint"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"biguint"}}],[11,"sub_assign","","",20,null],[11,"sub_assign","","",20,null],[11,"sub_assign","","",20,null],[11,"sub_assign","","",20,null],[11,"sub_assign","","",20,null],[11,"sub_assign","","",20,null],[11,"sub_assign","","",20,null],[11,"checked_sub","","",20,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_sub","","",19,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"shl","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shl","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"new","","Creates and initializes a `BigUint`.",20,{"inputs":[{"generics":["u32"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",20,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",20,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",20,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",20,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",20,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",20,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",20,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",20,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",20,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",20,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",2,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"generics":["sign"],"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",3,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[11,"add","num_bigint::big_digit","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[6,"BigDigit"],[6,"DoubleBigDigit"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["complex"],"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"self"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["ratio"],"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"generics":["bigrational"],"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"checked_div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"checked_add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"approximate_float","","",0,{"inputs":[{"name":"f"}],"output":{"generics":["ratio"],"name":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",21,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",22,null],[13,"Invalid","","",22,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",23,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",24,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",24,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",24,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a real number power.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_degrees","","Converts radians to degrees.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_radians","","Converts degrees to radians.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","num_traits","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null],[3,"OwningRef","","An owning reference.",null,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningref"],"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningref"],"name":"result"}}],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningrefmut"],"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"owningrefmut"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"owner","","A getter for the underlying owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"owningrefmut"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"] = {"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Once","parking_lot","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[4,"OnceState","","Current state of a `Once`.",null,null],[13,"New","","A closure has not been executed yet",0,null],[13,"Poisoned","","A closure was executed but panicked.",0,null],[13,"InProgress","","A thread is currently executing a closure.",0,null],[13,"Done","","A closure has completed sucessfully.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":null}],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"instant"}],"output":{"name":"waittimeoutresult"}}],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"waittimeoutresult"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",3,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"generics":["mutexguard"],"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["mutexguard"],"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["mutexguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"map","","Make a new `MutexGuard` for a component of the locked data.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mutexguard"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",5,{"inputs":[{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"into_inner","","Consumes this reentrant mutex, returning the underlying data.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",5,{"inputs":[{"name":"self"}],"output":{"name":"reentrantmutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",5,{"inputs":[{"name":"self"}],"output":{"generics":["reentrantmutexguard"],"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["reentrantmutexguard"],"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",5,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["reentrantmutexguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"reentrantmutex"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"map","","Make a new `ReentrantMutexGuard` for a component of the locked data.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"reentrantmutexguard"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",7,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_recursive_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_recursive_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard"],"name":"option"}}],[11,"try_write_for","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockwriteguard"],"name":"option"}}],[11,"try_write_until","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockwriteguard"],"name":"option"}}],[11,"upgradable_read","","Locks this rwlock with upgradable read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockupgradablereadguard"}}],[11,"try_upgradable_read","","Attempts to acquire this rwlock with upgradable read access.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockupgradablereadguard"],"name":"option"}}],[11,"try_upgradable_read_for","","Attempts to acquire this rwlock with upgradable read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockupgradablereadguard"],"name":"option"}}],[11,"try_upgradable_read_until","","Attempts to acquire this rwlock with upgradable read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockupgradablereadguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock_read","","Releases shared read access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write","","Releases exclusive write access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_upgradable_read","","Releases upgradable read access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_read_fair","","Releases shared read access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write_fair","","Releases exclusive write access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_upgradable_read_fair","","Releases upgradable read access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_downgrade","","Atomically downgrades a write lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_downgrade_upgradable_read","","Atomically downgrades an upgradable read lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_upgradable_read","","Locks this rwlock with upgradable read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_upgradable_read","","Attempts to acquire this rwlock with upgradable read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_upgrade","","Upgrades this rwlock from upgradable read access to exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_upgrade","","Attempts to upgrade this rwlock from upgradable read access to exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"rwlock"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"map","","Make a new `RwLockReadGuard` for a component of the locked data.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rwlockreadguard"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"map","","Make a new `RwLockWriteGuard` for a component of the locked data.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rwlockwriteguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","Atomically downgrades an upgradable read lock lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",10,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"upgrade","","Atomically upgrades an upgradable read lock lock into a exclusive write lock, blocking the current thread until it can be aquired.",10,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_upgrade","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock.",10,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard"],"name":"result"}}],[11,"try_upgrade_for","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockwriteguard"],"name":"result"}}],[11,"try_upgrade_until","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",10,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockwriteguard"],"name":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"oncestate"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Once` value.",11,{"inputs":[],"output":{"name":"once"}}],[11,"state","","Returns the current state of this `Once`.",11,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"default","","",11,{"inputs":[],"output":{"name":"once"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"MutexGuardRef","","Typedef of an owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"ReentrantMutexGuardRef","","Typedef of an owning reference that uses a `ReentrantMutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"RwLockUpgradableReadGuardRef","","Typedef of an owning reference that uses a `RwLockUpgradableReadGuard` as the owner.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"Once"]]};
searchIndex["parking_lot_core"] = {"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"ParkToken","parking_lot_core","A value associated with a parked thread which can be used by `unpark_filter`.",null,null],[12,"0","","",0,null],[3,"UnparkResult","","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",1,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",1,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",1,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",2,null],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",null,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",3,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",3,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",3,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",4,null],[13,"Invalid","","The validation callback returned false.",4,null],[13,"TimedOut","","The timeout expired.",4,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",5,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",5,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",5,null],[5,"park","","Parks the current thread in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"v"},{"name":"b"},{"name":"t"},{"name":"parktoken"},{"generics":["instant"],"name":"option"}],"output":{"name":"parkresult"}}],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"unparktoken"}],"output":{"name":"usize"}}],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",null,{"inputs":[{"name":"usize"},{"name":"f"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"},{"name":"c"}],"output":{"name":"unparkresult"}}],[11,"new","","Creates a new `SpinWait`.",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"reset","","Resets a `SpinWait` to its initial state.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"spin","","Spins until the sleep threshold has been reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"parkresult"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unparked","","Returns true if we were unparked by another thread.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unparkresult"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"requeueop"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"requeueop"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unparktoken"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"parktoken"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"deadlock","","[Experimental] Deadlock detection",null,null],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",null,{"inputs":[{"name":"usize"}],"output":null}],[17,"DEFAULT_PARK_TOKEN","parking_lot_core","A default park token to use.",null,null],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",null,null]],"paths":[[3,"ParkToken"],[3,"UnparkResult"],[3,"UnparkToken"],[4,"FilterOp"],[4,"ParkResult"],[4,"RequeueOp"],[3,"SpinWait"]]};
searchIndex["pbr"] = {"doc":"Terminal progress bar for Rust","items":[[3,"ProgressBar","pbr","",null,null],[12,"total","","",0,null],[12,"is_finish","","",0,null],[12,"is_multibar","","",0,null],[12,"show_bar","","",0,null],[12,"show_speed","","",0,null],[12,"show_percent","","",0,null],[12,"show_counter","","",0,null],[12,"show_time_left","","",0,null],[12,"show_tick","","",0,null],[12,"show_message","","",0,null],[3,"MultiBar","","",null,null],[3,"Pipe","","",null,null],[3,"PbIter","","",null,null],[4,"Units","","",null,null],[13,"Default","","",1,null],[13,"Bytes","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new ProgressBar with default configuration.",0,{"inputs":[{"name":"u64"}],"output":{"generics":["stdout"],"name":"progressbar"}}],[11,"on","","Create a new ProgressBar with default configuration but pass an arbitrary writer.",0,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"progressbar"}}],[11,"set_units","","Set units, default is simple numbers",0,{"inputs":[{"name":"self"},{"name":"units"}],"output":null}],[11,"format","","Set custom format to the drawing bar, default is `[=>-]`",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"message","","Set message to display in the prefix, call with \"\" to stop printing a message.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"tick_format","","Set tick format for the progressBar, default is \\|/-",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"set_width","","Set width, or `None` for default.",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":null}],[11,"set_max_refresh_rate","","Set max refresh rate, above which the progress bar will not redraw, or `None` for none.",0,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":null}],[11,"tick","","Update progress bar even though no progress are made Useful to see if a program is bricked or just not doing any progress.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"add","","Add to current value",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"set","","Manually set the current value of the bar",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"inc","","Increment current value",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"finish","","Calling finish manually will set current to total and draw the last time",0,{"inputs":[{"name":"self"}],"output":null}],[11,"finish_print","","Call finish and write string `s` that will replace the progress bar.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"finish_println","","Call finish and write string `s` below the progress bar.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new MultiBar with stdout as a writer.",2,{"inputs":[],"output":{"generics":["stdout"],"name":"multibar"}}],[11,"on","","Create a new MultiBar with an arbitrary writer.",2,{"inputs":[{"name":"t"}],"output":{"name":"multibar"}}],[11,"println","","println used to add text lines between the bars. for example: you could add a header to your application, or text separators between bars.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"create_bar","","create_bar creates new `ProgressBar` with `Pipe` as the writer.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["pipe"],"name":"progressbar"}}],[11,"listen","","listen start listen to all bars changes.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"on","","",4,{"inputs":[{"name":"t"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null]],"paths":[[3,"ProgressBar"],[4,"Units"],[3,"MultiBar"],[3,"Pipe"],[3,"PbIter"]]};
searchIndex["pest"] = {"doc":"pest. Elegant, efficient grammars","items":[[3,"StringInput","pest","A `struct` useful for matching in-memory `String`s.",null,null],[3,"Token","","A `struct` representing tokens generated by a parser.",null,null],[12,"rule","","matched `Rule`",0,null],[12,"start","","starting position in `Input`",0,null],[12,"end","","ending position in `Input`",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Token`.",0,{"inputs":[{"name":"rule"},{"name":"usize"},{"name":"usize"}],"output":{"name":"token"}}],[11,"new","","Creates a new `StringInput` from a `&str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"stringinput"}}],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pos","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_pos","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"slice","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"str"}}],[11,"line_col","","",1,null],[11,"match_string","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"match_range","","",1,{"inputs":[{"name":"self"},{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[0,"prelude","","A `mod` that contains `pest::Input`, `pest::Parser`, `pest::StringInput`, and `pest::Token`.",null,null],[3,"StringInput","pest::prelude","A `struct` useful for matching in-memory `String`s.",null,null],[3,"Token","","A `struct` representing tokens generated by a parser.",null,null],[12,"rule","","matched `Rule`",0,null],[12,"start","","starting position in `Input`",0,null],[12,"end","","ending position in `Input`",0,null],[8,"Input","","A `trait` that defines an input for a `Parser`.",null,null],[10,"len","","Returns length of an `Input`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"is_empty","","Returns whether an `Input` is empty.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"pos","","Returns current position of an `Input`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"set_pos","","Set current position of an `Input`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"slice","","Slices an `Input`.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"str"}}],[10,"line_col","","Returns the line and column of a position for an `Input`.",2,null],[10,"match_string","","Matches `string` to an `Input`, returns whether it matched, and advances the position with `string.len()` in case it did.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"match_range","","Matches if an `Input`'s current `char` is between `left` and `right`, and advances the position with one `char` in case it did.",2,{"inputs":[{"name":"self"},{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[8,"Parser","","A `trait` that defines a parser.",null,null],[16,"Rule","","",3,null],[16,"Token","","",3,null],[10,"input","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"input_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"end","","Returns whether a `Parser` has reached its end.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"eoi_matched","","Returns whether a `Parser` has matched end-of-input.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"reset","","Reset a `Parser`.",3,{"inputs":[{"name":"self"}],"output":null}],[10,"queue","","Returns the queue of all matched `Token`s.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"queue_mut","","Returns the mutable queue of all matched `Token`s.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"queue_index","","Returns the current index within the queue. Used in `process!`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"inc_queue_index","","Increments the current index within the queue. Used in `process!`.",3,{"inputs":[{"name":"self"}],"output":null}],[10,"set_queue_index","","Set the current index within the queue. Used in `process!`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"skip_ws","","Skips white-space.",3,{"inputs":[{"name":"self"}],"output":null}],[10,"skip_com","","Skips comments.",3,{"inputs":[{"name":"self"}],"output":null}],[10,"is_atomic","","Returns whether a `Parser` is currently inside an atomic rule.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_atomic","","Sets a `Parser` to atomic rule mode, barring comment & white-space skipping.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"track","","Keeps track of rule failures. It gets called when a `Rule` fails at `pos`.",3,null],[10,"tracked_len","","Returns the length of the tracked `Rule`s.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"expected","","Retuns a `Vec` of all expected `Rule`s at the deepest position where the parsing last stopped. It only returns leafs from the rule tree. Used for error reporting.",3,null],[8,"Input","pest","A `trait` that defines an input for a `Parser`.",null,null],[10,"len","","Returns length of an `Input`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"is_empty","","Returns whether an `Input` is empty.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"pos","","Returns current position of an `Input`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"set_pos","","Set current position of an `Input`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"slice","","Slices an `Input`.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"str"}}],[10,"line_col","","Returns the line and column of a position for an `Input`.",2,null],[10,"match_string","","Matches `string` to an `Input`, returns whether it matched, and advances the position with `string.len()` in case it did.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"match_range","","Matches if an `Input`'s current `char` is between `left` and `right`, and advances the position with one `char` in case it did.",2,{"inputs":[{"name":"self"},{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[8,"Parser","","A `trait` that defines a parser.",null,null],[16,"Rule","","",3,null],[16,"Token","","",3,null],[10,"input","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"input_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"end","","Returns whether a `Parser` has reached its end.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"eoi_matched","","Returns whether a `Parser` has matched end-of-input.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"reset","","Reset a `Parser`.",3,{"inputs":[{"name":"self"}],"output":null}],[10,"queue","","Returns the queue of all matched `Token`s.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"queue_mut","","Returns the mutable queue of all matched `Token`s.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"queue_index","","Returns the current index within the queue. Used in `process!`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"inc_queue_index","","Increments the current index within the queue. Used in `process!`.",3,{"inputs":[{"name":"self"}],"output":null}],[10,"set_queue_index","","Set the current index within the queue. Used in `process!`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"skip_ws","","Skips white-space.",3,{"inputs":[{"name":"self"}],"output":null}],[10,"skip_com","","Skips comments.",3,{"inputs":[{"name":"self"}],"output":null}],[10,"is_atomic","","Returns whether a `Parser` is currently inside an atomic rule.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_atomic","","Sets a `Parser` to atomic rule mode, barring comment & white-space skipping.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"track","","Keeps track of rule failures. It gets called when a `Rule` fails at `pos`.",3,null],[10,"tracked_len","","Returns the length of the tracked `Rule`s.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"expected","","Retuns a `Vec` of all expected `Rule`s at the deepest position where the parsing last stopped. It only returns leafs from the rule tree. Used for error reporting.",3,null],[14,"grammar","","A `macro` that defines each rule as a method on a `Parser` which parses from the current position. Rules are always defined between braces, with an optional symbol marking the type of rule defined.",null,null],[14,"process","","A `macro` for pattern-matching queued `Token`s generated by a `Parser`. It generates a method `process` on `&self` that processes the whole queue of `Token`s, reducing it to one single result.",null,null],[14,"impl_rdp","","A `macro` useful for implementing the `Parser` `trait` as a recursive descent parser. It only accepts `grammar!` and `process!` calls that get implemented on `self`.",null,null]],"paths":[[3,"Token"],[3,"StringInput"],[8,"Input"],[8,"Parser"]]};
searchIndex["prctl"] = {"doc":"Module provides safe abstraction over the prctl interface. Provided functions map to a single `prctl()` call, although some of them may be usable only on a specific architecture or only with root privileges. All known enums that may be used as parameters are provided in this crate.","items":[[4,"PrctlUnalign","prctl","",null,null],[13,"PR_UNALIGN_NOPRINT","","",0,null],[13,"PR_UNALIGN_SIGBUS","","",0,null],[4,"PrctlFpemu","","",null,null],[13,"PR_FPEMU_NOPRINT","","",1,null],[13,"PR_FPEMU_SIGFPE","","",1,null],[4,"PrctlTiming","","",null,null],[13,"PR_TIMING_STATISTICAL","","",2,null],[13,"PR_TIMING_TIMESTAMP","","",2,null],[4,"PrctlEndian","","",null,null],[13,"PR_ENDIAN_BIG","","",3,null],[13,"PR_ENDIAN_LITTLE","","",3,null],[13,"PR_ENDIAN_PPC_LITTLE","","",3,null],[4,"PrctlSeccomp","","",null,null],[13,"SECCOMP_MODE_DISABLED","","",4,null],[13,"SECCOMP_MODE_STRICT","","",4,null],[13,"SECCOMP_MODE_FILTER","","",4,null],[4,"PrctlTsc","","",null,null],[13,"PR_TSC_ENABLE","","",5,null],[13,"PR_TSC_SIGSEGV","","",5,null],[4,"PrctlMceKill","","",null,null],[13,"PR_MCE_KILL_LATE","","",6,null],[13,"PR_MCE_KILL_EARLY","","",6,null],[13,"PR_MCE_KILL_DEFAULT","","",6,null],[4,"PrctlCap","","",null,null],[13,"CAP_CHOWN","","",7,null],[13,"CAP_DAC_OVERRIDE","","",7,null],[13,"CAP_DAC_READ_SEARCH","","",7,null],[13,"CAP_FOWNER","","",7,null],[13,"CAP_FSETID","","",7,null],[13,"CAP_KILL","","",7,null],[13,"CAP_SETGID","","",7,null],[13,"CAP_SETUID","","",7,null],[13,"CAP_SETPCAP","","",7,null],[13,"CAP_LINUX_IMMUTABLE","","",7,null],[13,"CAP_NET_BIND_SERVICE","","",7,null],[13,"CAP_NET_BROADCAST","","",7,null],[13,"CAP_NET_ADMIN","","",7,null],[13,"CAP_NET_RAW","","",7,null],[13,"CAP_IPC_LOCK","","",7,null],[13,"CAP_IPC_OWNER","","",7,null],[13,"CAP_SYS_MODULE","","",7,null],[13,"CAP_SYS_RAWIO","","",7,null],[13,"CAP_SYS_CHROOT","","",7,null],[13,"CAP_SYS_PTRACE","","",7,null],[13,"CAP_SYS_PACCT","","",7,null],[13,"CAP_SYS_ADMIN","","",7,null],[13,"CAP_SYS_BOOT","","",7,null],[13,"CAP_SYS_NICE","","",7,null],[13,"CAP_SYS_RESOURCE","","",7,null],[13,"CAP_SYS_TIME","","",7,null],[13,"CAP_SYS_TTY_CONFIG","","",7,null],[13,"CAP_MKNOD","","",7,null],[13,"CAP_LEASE","","",7,null],[13,"CAP_AUDIT_WRITE","","",7,null],[13,"CAP_AUDIT_CONTROL","","",7,null],[13,"CAP_SETFCAP","","",7,null],[13,"CAP_MAC_OVERRIDE","","",7,null],[13,"CAP_MAC_ADMIN","","",7,null],[13,"CAP_SYSLOG","","",7,null],[13,"CAP_WAKE_ALARM","","",7,null],[13,"CAP_BLOCK_SUSPEND","","",7,null],[13,"CAP_AUDIT_READ","","",7,null],[4,"PrctlSecurebits","","",null,null],[13,"SECBIT_NOROOT","","",8,null],[13,"SECBIT_NOROOT_LOCKED","","",8,null],[13,"SECBIT_NO_SETUID_FIXUP","","",8,null],[13,"SECBIT_NO_SETUID_FIXUP_LOCKED","","",8,null],[13,"SECBIT_KEEP_CAPS","","",8,null],[13,"SECBIT_KEEP_CAPS_LOCKED","","",8,null],[4,"PrctlMM","","",null,null],[13,"PR_SET_MM_START_CODE","","",9,null],[13,"PR_SET_MM_END_CODE","","",9,null],[13,"PR_SET_MM_START_DATA","","",9,null],[13,"PR_SET_MM_END_DATA","","",9,null],[13,"PR_SET_MM_START_STACK","","",9,null],[13,"PR_SET_MM_START_BRK","","",9,null],[13,"PR_SET_MM_BRK","","",9,null],[13,"PR_SET_MM_ARG_START","","",9,null],[13,"PR_SET_MM_ARG_END","","",9,null],[13,"PR_SET_MM_ENV_START","","",9,null],[13,"PR_SET_MM_ENV_END","","",9,null],[13,"PR_SET_MM_AUXV","","",9,null],[13,"PR_SET_MM_EXE_FILE","","",9,null],[5,"get_death_signal","","",null,{"inputs":[],"output":{"generics":["isize","i32"],"name":"result"}}],[5,"set_death_signal","","",null,{"inputs":[{"name":"isize"}],"output":{"generics":["i32"],"name":"result"}}],[5,"get_dumpable","","",null,{"inputs":[],"output":{"generics":["bool","i32"],"name":"result"}}],[5,"set_dumpable","","",null,{"inputs":[{"name":"bool"}],"output":{"generics":["i32"],"name":"result"}}],[5,"get_name","","",null,{"inputs":[],"output":{"generics":["cstring","i32"],"name":"result"}}],[5,"set_name","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["i32"],"name":"result"}}],[5,"set_no_new_privileges","","",null,{"inputs":[{"name":"bool"}],"output":{"generics":["i32"],"name":"result"}}],[5,"get_no_new_privileges","","",null,{"inputs":[],"output":{"generics":["bool","i32"],"name":"result"}}],[5,"set_unaligned_access","","",null,{"inputs":[{"name":"prctlunalign"}],"output":{"generics":["i32"],"name":"result"}}],[5,"get_unaligned_access","","",null,{"inputs":[],"output":{"generics":["prctlunalign","i32"],"name":"result"}}],[5,"set_keep_capabilities","","",null,{"inputs":[{"name":"bool"}],"output":{"generics":["i32"],"name":"result"}}],[5,"get_keep_capabilities","","",null,{"inputs":[],"output":{"generics":["bool","i32"],"name":"result"}}],[5,"get_fpemu","","",null,{"inputs":[],"output":{"generics":["prctlfpemu","i32"],"name":"result"}}],[5,"set_fpemu","","",null,{"inputs":[{"name":"prctlfpemu"}],"output":{"generics":["i32"],"name":"result"}}],[5,"get_timing","","",null,{"inputs":[],"output":{"generics":["prctltiming","i32"],"name":"result"}}],[5,"set_timing","","",null,{"inputs":[{"name":"prctltiming"}],"output":{"generics":["i32"],"name":"result"}}],[5,"get_endian","","",null,{"inputs":[],"output":{"generics":["prctlendian","i32"],"name":"result"}}],[5,"set_endian","","",null,{"inputs":[{"name":"prctlendian"}],"output":{"generics":["i32"],"name":"result"}}],[5,"get_seccomp","","",null,{"inputs":[],"output":{"generics":["prctlseccomp","i32"],"name":"result"}}],[5,"set_seccomp_strict","","",null,{"inputs":[],"output":{"generics":["i32"],"name":"result"}}],[5,"get_tsc","","",null,{"inputs":[],"output":{"generics":["prctltsc","i32"],"name":"result"}}],[5,"set_tsc","","",null,{"inputs":[{"name":"prctltsc"}],"output":{"generics":["i32"],"name":"result"}}],[5,"disable_perf_events","","",null,{"inputs":[],"output":{"generics":["i32"],"name":"result"}}],[5,"enable_perf_events","","",null,{"inputs":[],"output":{"generics":["i32"],"name":"result"}}],[5,"get_child_subreaper","","",null,{"inputs":[],"output":{"generics":["bool","i32"],"name":"result"}}],[5,"set_child_subreaper","","",null,{"inputs":[{"name":"bool"}],"output":{"generics":["i32"],"name":"result"}}],[5,"get_thp_disable","","",null,{"inputs":[],"output":{"generics":["bool","i32"],"name":"result"}}],[5,"set_thp_disable","","",null,{"inputs":[{"name":"bool"}],"output":{"generics":["i32"],"name":"result"}}],[5,"read_capability","","",null,{"inputs":[{"name":"prctlcap"}],"output":{"generics":["bool","i32"],"name":"result"}}],[5,"drop_capability","","",null,{"inputs":[{"name":"prctlcap"}],"output":{"generics":["i32"],"name":"result"}}],[5,"set_securebits","","",null,{"inputs":[{"generics":["prctlsecurebits"],"name":"vec"}],"output":{"generics":["i32"],"name":"result"}}],[5,"get_securebits","","",null,{"inputs":[],"output":{"generics":["vec","i32"],"name":"result"}}],[5,"get_timer_slack","","",null,{"inputs":[],"output":{"generics":["usize","i32"],"name":"result"}}],[5,"set_timer_slack","","",null,{"inputs":[{"name":"usize"}],"output":{"generics":["i32"],"name":"result"}}],[5,"clear_mce_kill","","",null,{"inputs":[],"output":{"generics":["i32"],"name":"result"}}],[5,"set_mce_kill","","",null,{"inputs":[{"name":"prctlmcekill"}],"output":{"generics":["i32"],"name":"result"}}],[5,"get_mce_kill","","",null,{"inputs":[],"output":{"generics":["prctlmcekill","i32"],"name":"result"}}],[5,"set_mm","","",null,{"inputs":[{"name":"prctlmm"},{"name":"c_ulong"}],"output":{"generics":["i32"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"prctlunalign"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"prctlunalign"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"prctlfpemu"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"prctlfpemu"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"prctltiming"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"prctltiming"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"prctlendian"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"prctlendian"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"prctlseccomp"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"prctlseccomp"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"prctltsc"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"prctltsc"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"prctlmcekill"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"prctlmcekill"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"prctlcap"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"prctlsecurebits"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"prctlsecurebits"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"prctlmm"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"prctlmm"}}]],"paths":[[4,"PrctlUnalign"],[4,"PrctlFpemu"],[4,"PrctlTiming"],[4,"PrctlEndian"],[4,"PrctlSeccomp"],[4,"PrctlTsc"],[4,"PrctlMceKill"],[4,"PrctlCap"],[4,"PrctlSecurebits"],[4,"PrctlMM"]]};
searchIndex["prettytable"] = {"doc":"A formatted and aligned table printer written in rust","items":[[3,"Table","prettytable","An owned printable table",null,null],[3,"TableSlice","","A borrowed immutable `Table` slice A `TableSlice` is obtained by slicing a `Table` with the `Slice::slice` method.",null,null],[3,"ColumnIter","","Iterator over immutable cells in a column",null,null],[3,"ColumnIterMut","","Iterator over mutable cells in a column",null,null],[0,"cell","","This module contains definition of table/row cells stuff",null,null],[3,"Cell","prettytable::cell","Represent a table cell containing a string.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_align","","Create a new `Cell` initialized with content from `string`. Text alignment in cell is configurable with the `align` argument",0,{"inputs":[{"name":"str"},{"name":"alignment"}],"output":{"name":"cell"}}],[11,"new","","Create a new `Cell` initialized with content from `string`. By default, content is align to `LEFT`",0,{"inputs":[{"name":"str"}],"output":{"name":"cell"}}],[11,"align","","Set text alignment in the cell",0,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":null}],[11,"style","","Add a style attribute to the cell",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":null}],[11,"with_style","","Add a style attribute to the cell. Can be chained",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"cell"}}],[11,"reset_style","","Remove all style attributes and reset alignment to default (LEFT)",0,{"inputs":[{"name":"self"}],"output":null}],[11,"style_spec","","Set the cell's style by applying the given specifier string",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"cell"}}],[11,"get_height","","Return the height of the cell",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_width","","Return the width of the cell",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_content","","Return a copy of the full string contained in the cell",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"print","","Print a partial cell to `out`. Since the cell may be multi-lined, `idx` is the line index to print. `col_width` is the column width used to fill the cells with blanks so it fits in the table. If `ìdx` is higher than this cell's height, it will print empty content",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_term","","Apply style then call `print` to print the cell into a terminal",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"to_string","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","Return a cell initialized with a single empty `String`, with LEFT alignment",0,{"inputs":[],"output":{"name":"cell"}}],[0,"row","prettytable","This module contains definition of table rows stuff",null,null],[3,"Row","prettytable::row","Represent a table row made of cells",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Row` backed with `cells` vector",1,{"inputs":[{"generics":["cell"],"name":"vec"}],"output":{"name":"row"}}],[11,"empty","","Create an row of length `size`, with empty strings stored",1,{"inputs":[],"output":{"name":"row"}}],[11,"len","","Get the number of cells in this row",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Check if the row is empty (has no cell)",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_height","","Get the height of this row",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_cell_width","","Get the minimum width required by the cell in the column `column`. Return 0 if the cell does not exist in this row",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"get_cell","","Get the cell at index `idx`",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["cell"],"name":"option"}}],[11,"get_mut_cell","","Get the mutable cell at index `idx`",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["cell"],"name":"option"}}],[11,"set_cell","","Set the `cell` in the row at the given `column`",1,{"inputs":[{"name":"self"},{"name":"cell"},{"name":"usize"}],"output":{"generics":["str"],"name":"result"}}],[11,"add_cell","","Append a `cell` at the end of the row",1,{"inputs":[{"name":"self"},{"name":"cell"}],"output":null}],[11,"insert_cell","","Insert `cell` at position `index`. If `index` is higher than the row length, the cell will be appended at the end",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cell"}],"output":null}],[11,"remove_cell","","Remove the cell at position `index`. Silently skip if this cell does not exist",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"iter","","Returns an immutable iterator over cells",1,{"inputs":[{"name":"self"}],"output":{"generics":["cell"],"name":"iter"}}],[11,"iter_mut","","Returns an mutable iterator over cells",1,{"inputs":[{"name":"self"}],"output":{"generics":["cell"],"name":"itermut"}}],[11,"print","","Print the row to `out`, with `separator` as column separator, and `col_width` specifying the width of each columns",1,null],[11,"print_term","","Print the row to terminal `out`, with `separator` as column separator, and `col_width` specifying the width of each columns. Apply style when needed",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"row"}}],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"from_iter","","",1,{"inputs":[{"name":"t"}],"output":{"name":"row"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"row"}}],[0,"format","prettytable","Define table formatting utilities",null,null],[3,"LineSeparator","prettytable::format","Contains the character used for printing a line separator",null,null],[3,"TableFormat","","Contains the table formatting rules",null,null],[3,"FormatBuilder","","A builder to create a `TableFormat`",null,null],[4,"Alignment","","Alignment for cell's content",null,null],[13,"LEFT","","Align left",2,null],[13,"CENTER","","Align in the center",2,null],[13,"RIGHT","","Align right",2,null],[4,"LinePosition","","Position of a line separator in a table",null,null],[13,"Top","","Table's border on top",3,null],[13,"Title","","Line separator between the titles row, and the first data row",3,null],[13,"Intern","","Line separator between data rows",3,null],[13,"Bottom","","Bottom table's border",3,null],[4,"ColumnPosition","","Position of a column separator in a row",null,null],[13,"Left","","Left table's border",4,null],[13,"Intern","","Internal column separators",4,null],[13,"Right","","Rigth table's border",4,null],[0,"consts","","Predifined formats. Those constants are lazily evaluated when the corresponding struct is dereferenced",null,null],[3,"FORMAT_DEFAULT","prettytable::format::consts","Default table format",null,null],[3,"FORMAT_NO_TITLE","","Similar to `FORMAT_DEFAULT` but without special separator after title line",null,null],[3,"FORMAT_NO_LINESEP_WITH_TITLE","","With no line separator, but with title separator",null,null],[3,"FORMAT_NO_LINESEP","","With no line or title separator",null,null],[3,"FORMAT_NO_COLSEP","","No column separator",null,null],[3,"FORMAT_CLEAN","","Format for printing a table without any separators (only alignment)",null,null],[3,"FORMAT_BORDERS_ONLY","","Format for a table with only external borders and title separator",null,null],[3,"FORMAT_NO_BORDER","","A table with no external border",null,null],[3,"FORMAT_NO_BORDER_LINE_SEPARATOR","","A table with no external border and no line separation",null,null],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","prettytable::format","",2,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lineposition"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"lineposition"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"columnposition"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"columnposition"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"lineseparator"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new line separator instance where `line` is the character used to separate 2 lines and `junc` is the one used for junctions between columns and lines",14,{"inputs":[{"name":"char"},{"name":"char"},{"name":"char"},{"name":"char"}],"output":{"name":"lineseparator"}}],[11,"print","","Print a full line separator to `out`. `col_width` is a slice containing the width of each column",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new empty TableFormat.",15,{"inputs":[],"output":{"name":"tableformat"}}],[11,"get_padding","","Return a tuple with left and right padding",15,null],[11,"padding","","Set left and right padding",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"column_separator","","Set the character used for internal column separation",15,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"borders","","Set the character used for table borders",15,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"separator","","Set a line separator",15,{"inputs":[{"name":"self"},{"name":"lineposition"},{"name":"lineseparator"}],"output":null}],[11,"separators","","Set format for multiple kind of line separator",15,null],[11,"indent","","Set global indentation in spaces used when rendering a table",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_indent","","Get global indentation in spaces used when rendering a table",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"print_line_separator","","Print a full line separator to `out`. `col_width` is a slice containing the width of each column",15,null],[11,"get_column_separator","","Returns the character used to separate columns. `pos` specify if the separator is left/right final or internal to the table",15,{"inputs":[{"name":"self"},{"name":"columnposition"}],"output":{"generics":["char"],"name":"option"}}],[11,"print_column_separator","","Print a column separator or a table border",15,{"inputs":[{"name":"self"},{"name":"t"},{"name":"columnposition"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new builder",16,{"inputs":[],"output":{"name":"formatbuilder"}}],[11,"padding","","Set left and right padding",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"column_separator","","Set the character used for internal column separation",16,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"self"}}],[11,"borders","","Set the character used for table borders",16,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"self"}}],[11,"separator","","Set a line separator format",16,{"inputs":[{"name":"self"},{"name":"lineposition"},{"name":"lineseparator"}],"output":{"name":"self"}}],[11,"separators","","Set separator format for multiple kind of line separators",16,null],[11,"indent","","Set global indentation in spaces used when rendering a table",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"build","","Return the generated `TableFormat`",16,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"into","","",16,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"from","","",16,{"inputs":[{"name":"tableformat"}],"output":{"name":"self"}}],[8,"Slice","prettytable","Trait implemented by types which can be sliced",null,null],[16,"Output","","Type output after slicing",17,null],[10,"slice","","Get a slice from self",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"tableslice"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_column_num","","Compute and return the number of column",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","Get the number of rows",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Check if the table slice is empty",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_row","","Get an immutable reference to a row",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["row"],"name":"option"}}],[11,"column_iter","","Returns an iterator over the immutable cells of the column specified by `column`",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"columniter"}}],[11,"row_iter","","Returns an iterator over immutable rows",19,{"inputs":[{"name":"self"}],"output":{"generics":["row"],"name":"iter"}}],[11,"print","","Print the table to `out`",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_term","","Print the table to terminal `out`, applying styles when needed",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_tty","","Print the table to standard output. Colors won't be displayed unless stdout is a tty terminal, or `force_colorize` is set to `true`. In ANSI terminals, colors are displayed using ANSI escape characters. When for example the output is redirected to a file, or piped to another program, the output is considered as not beeing tty, and ANSI escape characters won't be displayed unless `force colorize` is set to `true`. # Panic Panic if writing to standard output fails",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"printstd","","Print the table to standard output. Colors won't be displayed unless stdout is a tty terminal. This means that if stdout is redirected to a file, or piped to another program, no color will be displayed. To force colors rendering, use `print_tty()` method. Calling `printstd()` is equivalent to calling `print_tty(false)` # Panic Panic if writing to standard output fails",19,{"inputs":[{"name":"self"}],"output":null}],[11,"to_csv","","Write the table to the specified writer.",19,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["writer"],"name":"result"}}],[11,"to_csv_writer","","Write the table to the specified writer.",19,{"inputs":[{"name":"self"},{"name":"writer"}],"output":{"generics":["writer"],"name":"result"}}],[11,"new","","Create an empty table",18,{"inputs":[],"output":{"name":"table"}}],[11,"init","","Create a table initialized with `rows`",18,{"inputs":[{"generics":["row"],"name":"vec"}],"output":{"name":"table"}}],[11,"from_csv_string","","Create a table from a CSV string",18,{"inputs":[{"name":"str"}],"output":{"generics":["table"],"name":"result"}}],[11,"from_csv_file","","Create a table from a CSV file",18,{"inputs":[{"name":"p"}],"output":{"generics":["table"],"name":"result"}}],[11,"from_csv","","Create a table from a CSV reader",18,{"inputs":[{"name":"reader"}],"output":{"name":"table"}}],[11,"set_format","","Change the table format. Eg : Separators",18,{"inputs":[{"name":"self"},{"name":"tableformat"}],"output":null}],[11,"get_format","","Get a mutable reference to the internal format",18,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"get_column_num","","Compute and return the number of column",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","Get the number of rows",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Check if the table is empty",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_titles","","Set the optional title lines",18,{"inputs":[{"name":"self"},{"name":"row"}],"output":null}],[11,"unset_titles","","Unset the title line",18,{"inputs":[{"name":"self"}],"output":null}],[11,"get_mut_row","","Get a mutable reference to a row",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["row"],"name":"option"}}],[11,"get_row","","Get an immutable reference to a row",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["row"],"name":"option"}}],[11,"add_row","","Append a row in the table, transferring ownership of this row to the table and returning a mutable reference to the row",18,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"row"}}],[11,"add_empty_row","","Append an empty row in the table. Return a mutable reference to this new row.",18,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"insert_row","","Insert `row` at the position `index`, and return a mutable reference to this row. If index is higher than current numbers of rows, `row` is appended at the end of the table",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"row"}],"output":{"name":"row"}}],[11,"set_element","","Modify a single element in the table",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["str"],"name":"result"}}],[11,"remove_row","","Remove the row at position `index`. Silently skip if the row does not exist",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"column_iter","","Return an iterator over the immutable cells of the column specified by `column`",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"columniter"}}],[11,"column_iter_mut","","Return an iterator over the mutable cells of the column specified by `column`",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"columnitermut"}}],[11,"row_iter","","Returns an iterator over immutable rows",18,{"inputs":[{"name":"self"}],"output":{"generics":["row"],"name":"iter"}}],[11,"row_iter_mut","","Returns an iterator over mutable rows",18,{"inputs":[{"name":"self"}],"output":{"generics":["row"],"name":"itermut"}}],[11,"print","","Print the table to `out`",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_term","","Print the table to terminal `out`, applying styles when needed",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_tty","","Print the table to standard output. Colors won't be displayed unless stdout is a tty terminal, or `force_colorize` is set to `true`. In ANSI terminals, colors are displayed using ANSI escape characters. When for example the output is redirected to a file, or piped to another program, the output is considered as not beeing tty, and ANSI escape characters won't be displayed unless `force colorize` is set to `true`. # Panic Panic if writing to standard output fails",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"printstd","","Print the table to standard output. Colors won't be displayed unless stdout is a tty terminal. This means that if stdout is redirected to a file, or piped to another program, no color will be displayed. To force colors rendering, use `print_tty()` method. Calling `printstd()` is equivalent to calling `print_tty(false)` # Panic Panic if writing to standard output fails",18,{"inputs":[{"name":"self"}],"output":null}],[11,"to_csv","","Write the table to the specified writer.",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["writer"],"name":"result"}}],[11,"to_csv_writer","","Write the table to the specified writer.",18,{"inputs":[{"name":"self"},{"name":"writer"}],"output":{"generics":["writer"],"name":"result"}}],[11,"index","","",18,null],[11,"index","","",19,null],[11,"index_mut","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"table"}}],[11,"from","","",18,{"inputs":[{"name":"t"}],"output":{"name":"table"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["cell"],"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["cell"],"name":"option"}}],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"tableslice"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"tableslice"}}],[14,"cell","","This macro simplifies `Cell` creation",null,null],[14,"row","","This macro simplifies `Row` creation",null,null],[14,"table","","Create a table filled with some values",null,null],[14,"ptable","","Create a table with `table!` macro, print it to standard output, then return this table for future usage.",null,null]],"paths":[[3,"Cell"],[3,"Row"],[4,"Alignment"],[4,"LinePosition"],[4,"ColumnPosition"],[3,"FORMAT_DEFAULT"],[3,"FORMAT_NO_TITLE"],[3,"FORMAT_NO_LINESEP_WITH_TITLE"],[3,"FORMAT_NO_LINESEP"],[3,"FORMAT_NO_COLSEP"],[3,"FORMAT_CLEAN"],[3,"FORMAT_BORDERS_ONLY"],[3,"FORMAT_NO_BORDER"],[3,"FORMAT_NO_BORDER_LINE_SEPARATOR"],[3,"LineSeparator"],[3,"TableFormat"],[3,"FormatBuilder"],[8,"Slice"],[3,"Table"],[3,"TableSlice"],[3,"ColumnIter"],[3,"ColumnIterMut"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",0,null],[13,"Ident","","An identifier.",0,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",1,null],[13,"Brace","","`{ ... }`",1,null],[13,"Bracket","","`[ ... ]`",1,null],[13,"None","","`Ø ... Ø`",1,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",null,null],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,null],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,null],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",null,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","proc_macro2","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"new","","Returns an empty `TokenStream` containing no token trees.",4,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","Checks if this `TokenStream` is empty.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"call_site","","The span of the invocation of the current procedural macro.",6,{"inputs":[],"output":{"name":"span"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Configures the span for only this token.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"group"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"ident"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"punct"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"literal"}],"output":{"name":"tokentree"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,{"inputs":[{"name":"delimiter"},{"name":"tokenstream"}],"output":{"name":"group"}}],[11,"delimiter","","Returns the delimiter of this `Group`",7,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"punct"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,{"inputs":[{"name":"char"},{"name":"spacing"}],"output":{"name":"punct"}}],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"span","","Returns the span for this punctuation character.",8,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Configure the span for this punctuation character.",8,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"ident"}}],[11,"span","","Returns the span of this `Ident`.",9,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"f64_unsuffixed","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64_suffixed","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"f32_suffixed","","",10,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",10,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",10,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",10,null],[11,"span","","",10,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",10,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","Result extension trait adding a `context` method",null,null],[10,"context","","The method is use to add context information to current operation",1,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"generics":["context"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"quick_error","","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",null,null],[10,"append","","",0,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[10,"append_all","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[10,"append_separated","","",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[10,"append_terminated","","",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"IsaacRng","rand","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"jitter","rand","Non-physical true random number generator based on timing jitter.",null,null],[3,"JitterRng","rand::jitter","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",null,null],[4,"TimerError","","An error that can occur when `test_timer` fails.",null,null],[13,"NoTimer","","No timer available.",18,null],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",18,null],[13,"NotMonotonic","","Timer is not monotonically increasing.",18,null],[13,"TinyVariantions","","Variations of deltas of time too small.",18,null],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",18,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"timererror"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"timererror"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Create a new `JitterRng`. Makes use of `std::time` for a timer.",19,{"inputs":[],"output":{"generics":["jitterrng","timererror"],"name":"result"}}],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",19,null],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u32","timererror"],"name":"result"}}],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterEntropy` entropy collector.",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"i64"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",20,{"inputs":[],"output":{"generics":["osrng"],"name":"result"}}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",21,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",22,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",22,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",22,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",22,null],[11,"reseed","","",22,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",22,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",24,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",null,null],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"generics":["vec","vec"],"name":"result"}}],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",null,null],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",null,null],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",null,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["usize"],"name":"vec"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",25,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",25,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",25,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",25,null],[11,"rand","","",25,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",26,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",26,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",26,null],[11,"rand","","",26,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",27,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",27,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",27,null],[11,"rand","","",27,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",28,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"rand","","",28,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",29,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",30,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",30,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",30,null],[11,"gen","","Return a random value of a `Rand` type.",30,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",30,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",30,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",30,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",30,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",30,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",30,null],[11,"shuffle","","Shuffle a mutable slice in place.",30,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",31,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",31,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"generics":["stdrng"],"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[4,"TimerError"],[3,"JitterRng"],[3,"OsRng"],[3,"ReadRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"XorShiftRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rawpointer"] = {"doc":"","items":[[5,"ptrdistance","rawpointer","Return the number of elements of `T` from `start` to `end`. Return the arithmetic difference if `T` is zero size.",null,null],[8,"PointerExt","","Extension methods for raw pointers",null,null],[10,"offset","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"pre_inc","","Increment the pointer by 1, and return its new value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"post_inc","","Increment the pointer by 1, but return its old value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pre_dec","","Decrement the pointer by 1, and return its new value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"post_dec","","Decrement the pointer by 1, but return its old value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inc","","Increment by 1",0,{"inputs":[{"name":"self"}],"output":null}],[11,"dec","","Decrement by 1",0,{"inputs":[{"name":"self"}],"output":null}],[11,"stride_offset","","Offset the pointer by `s` multiplied by `index`.",0,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"usize"}],"output":{"name":"self"}}]],"paths":[[8,"PointerExt"]]};
searchIndex["rayon"] = {"doc":"Data-parallelism library that makes it easy to convert sequential computations into parallel","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[3,"ThreadPool","","Represents a user created [thread-pool].",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,null],[0,"collections","","Parallel iterator types for [standard collections][std::collections]",null,null],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",0,null],[11,"opt_len","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",0,null],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",1,null],[11,"opt_len","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",1,null],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",1,null],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",2,null],[11,"opt_len","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",4,null],[11,"opt_len","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",6,null],[11,"opt_len","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",7,null],[11,"opt_len","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",8,null],[11,"opt_len","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",9,null],[11,"opt_len","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",null,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",10,null],[11,"opt_len","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",11,null],[11,"opt_len","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",12,null],[11,"opt_len","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",13,null],[11,"opt_len","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",14,null],[11,"opt_len","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",15,null],[11,"opt_len","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",15,null],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",15,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",16,null],[11,"opt_len","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",16,null],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",17,null],[11,"opt_len","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",17,null],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",17,null],[0,"iter","rayon","Traits for writing parallel programs using an iterator-style interface",null,null],[4,"Either","rayon::iter","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",18,null],[13,"Right","","A value of type `R`.",18,null],[3,"Chain","","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",null,null],[3,"Chunks","","`Chunks` is an iterator that groups elements of an underlying iterator.",null,null],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]",null,null],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",null,null],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",null,null],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",null,null],[3,"Flatten","","`Flatten` turns each element to an iterator, then flattens these iterators together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].",null,null],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",null,null],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",null,null],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]",null,null],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",null,null],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`IndexedParallelIterator`]",null,null],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"Zip","","`Zip` is an iterator that zips up `a` and `b` into a single iterator of pairs. This struct is created by the [`zip()`] method on [`IndexedParallelIterator`]",null,null],[3,"ZipEq","","An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal length simultaneously.",null,null],[3,"Interleave","","`Interleave` is an iterator that interleaves elements of iterators `i` and `j` in one continuous iterator. This struct is created by the [`interleave()`] method on [`IndexedParallelIterator`]",null,null],[3,"InterleaveShortest","","`InterleaveShortest` is an iterator that works similarly to `Interleave`, but this version stops returning elements once one of the iterators run out.",null,null],[3,"Intersperse","","`Intersperse` is an iterator that inserts a particular item between each item of the adapted iterator.  This struct is created by the [`intersperse()`] method on [`ParallelIterator`]",null,null],[3,"Update","","`Update` is an iterator that mutates the elements of an underlying iterator before they are yielded.",null,null],[3,"Rev","","`Rev` is an iterator that produces elements in reverse order. This struct is created by the [`rev()`] method on [`IndexedParallelIterator`]",null,null],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",null,null],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",null,null],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",null,null],[3,"Repeat","","Iterator adaptor for the `repeat()` function.",null,null],[3,"RepeatN","","Iterator adaptor for the `repeatn()` function.",null,null],[3,"Empty","","Iterator adaptor for the `empty()` function.",null,null],[3,"Once","","Iterator adaptor for the `once()` function.",null,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"inputs":[{"name":"d"},{"name":"s"}],"output":{"name":"split"}}],[5,"repeat","","Creates a parallel iterator that endlessly repeats `elt` (by cloning it). Note that this iterator has \"infinite\" length, so typically you would want to use `zip` or `take` or some other means to shorten it, or consider using the `repeatn()` function instead.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"repeatn","","Creates a parallel iterator that produces `n` repeats of `elt` (by cloning it).",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"empty","","Creates a parallel iterator that produces nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a parallel iterator that produces an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"drive_unindexed","","",19,null],[11,"opt_len","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",19,null],[11,"len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",19,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"drive_unindexed","","",20,null],[11,"opt_len","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",20,null],[11,"len","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",20,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"drive_unindexed","","",21,null],[11,"opt_len","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",21,null],[11,"len","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",23,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",24,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"drive_unindexed","","",25,null],[0,"plumbing","","Traits and functions used to implement parallel iteration.  These are low-level details -- users of parallel iterators should not need to interact with them directly.  See [the `plumbing` README][r] for a high-level overview.",null,null],[5,"bridge","rayon::iter::plumbing","This helper function is used to \"connect\" a parallel iterator to a consumer. It will convert the `par_iter` into a producer P and then pull items from P and feed them to `consumer`, splitting and creating parallel threads as needed.",null,null],[5,"bridge_producer_consumer","","This helper function is used to \"connect\" a producer and a consumer. You may prefer to call [`bridge`], which wraps this function. This function will draw items from `producer` and feed them to `consumer`, splitting and creating parallel tasks when needed.",null,null],[5,"bridge_unindexed","","A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.",null,null],[8,"ProducerCallback","","The `ProducerCallback` trait is a kind of generic closure, [analogous to `FnOnce`][FnOnce]. See [the corresponding section in the plumbing README][r] for more details.",null,null],[16,"Output","","The type of value returned by this callback. Analogous to [`Output` from the `FnOnce` trait][Output].",26,null],[10,"callback","","Invokes the callback with the given producer as argument. The key point of this trait is that this method is generic over `P`, and hence implementors must be defined for any producer.",26,null],[8,"Producer","","A `Producer` is effectively a \"splittable `IntoIterator`\". That is, a producer is a value which can be converted into an iterator at any time: at that point, it simply produces items on demand, like any iterator. But what makes a `Producer` special is that, before we convert to an iterator, we can also split it at a particular point using the `split_at` method. This will yield up two producers, one producing the items before that point, and one producing the items after that point (these two producers can then independently be split further, or be converted into iterators). In Rayon, this splitting is used to divide between threads. See [the `plumbing` README][r] for further details.",null,null],[16,"Item","","The type of item that will be produced by this producer once it is converted into an iterator.",27,null],[16,"IntoIter","","The type of iterator we will become.",27,null],[10,"into_iter","","Convert `self` into an iterator; at this point, no more parallel splits are possible.",27,null],[11,"min_len","","The minimum number of items that we will process sequentially. Defaults to 1, which means that we will split all the way down to a single item. This can be raised higher using the [`with_min_len`] method, which will force us to create sequential tasks at a larger granularity. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","The maximum number of items that we will process sequentially. Defaults to MAX, which means that we can choose not to split at all. This can be lowered using the [`with_max_len`] method, which will force us to create more parallel tasks. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",27,null],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[8,"Consumer","","A consumer is effectively a [generalized \"fold\" operation][fold], and in fact each consumer will eventually be converted into a [`Folder`]. What makes a consumer special is that, like a [`Producer`], it can be split into multiple consumers using the `split_at` method. When a consumer is split, it produces two consumers, as well as a reducer. The two consumers can be fed items independently, and when they are done the reducer is used to combine their two results into one. See [the `plumbing` README][r] for further details.",null,null],[16,"Folder","","The type of folder that this consumer can be converted into.",28,null],[16,"Reducer","","The type of reducer that is produced if this consumer is split.",28,null],[16,"Result","","The type of result that this consumer will ultimately produce.",28,null],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",28,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",28,null],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Folder","","The `Folder` trait encapsulates [the standard fold operation][fold].  It can be fed many items using the `consume` method. At the end, once all items have been consumed, it can then be converted (using `complete`) into a final value.",null,null],[16,"Result","","The type of result that will ultimately be produced by the folder.",29,null],[10,"consume","","Consume next item and return new sequential state.",29,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",29,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[10,"complete","","Finish consuming items, produce final result.",29,null],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Reducer","","The reducer is the final step of a `Consumer` -- after a consumer has been split into two parts, and each of those parts has been fully processed, we are left with two results. The reducer is then used to combine those two results into one. See [the `plumbing` README][r] for further details.",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",30,{"inputs":[{"name":"self"},{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied. These consumers can be used like regular consumers, but they also support a `split_off_left` method that does not take an index to split, but simply splits at some arbitrary point (`for_each`, for example, produces an unindexed consumer).",null,null],[10,"split_off_left","","Splits off a \"left\" consumer and returns it. The `self` consumer should then be used to consume the \"right\" portion of the data. (The ordering matters for methods like find_first -- values produced by the returned value are given precedence over values produced by `self`.) Once the left and right halves have been fully consumed, you should reduce the results with the result of `to_reducer`.",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_reducer","","Creates a reducer that can be used to combine the results from a split consumer.",31,null],[8,"UnindexedProducer","","A variant on `Producer` which does not know its exact length or cannot represent it in a `usize`. These producers act like ordinary producers except that they cannot be told to split at a particular point. Instead, you just ask them to split 'somewhere'.",null,null],[16,"Item","","The type of item returned by this producer.",32,null],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",32,null],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"clone","rayon::iter","",33,{"inputs":[{"name":"self"}],"output":{"name":"fold"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",33,null],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"foldwith"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",34,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"drive_unindexed","","",35,null],[11,"opt_len","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",35,null],[11,"with_producer","","",35,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"drive_unindexed","","",37,null],[11,"opt_len","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",37,null],[11,"with_producer","","",37,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",38,null],[11,"opt_len","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",38,null],[11,"len","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",38,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"mapwith"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",39,null],[11,"opt_len","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",39,null],[11,"len","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"drive_unindexed","","",40,null],[11,"opt_len","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",40,null],[11,"len","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",40,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"drive_unindexed","","",41,null],[11,"opt_len","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",41,null],[11,"len","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",42,null],[11,"len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",42,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"drive_unindexed","","",43,null],[11,"opt_len","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",43,null],[11,"len","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",43,null],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",44,null],[11,"opt_len","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",44,null],[11,"len","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",44,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"update"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",45,null],[11,"opt_len","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",45,null],[11,"len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",45,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"drive_unindexed","","",46,null],[11,"opt_len","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",46,null],[11,"len","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"minlen"}}],[11,"drive_unindexed","","",47,null],[11,"opt_len","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",47,null],[11,"len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",47,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"maxlen"}}],[11,"drive_unindexed","","",48,null],[11,"opt_len","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",48,null],[11,"len","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",48,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",50,null],[11,"opt_len","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",50,null],[11,"len","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",50,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"drive_unindexed","","",51,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"take","","Take only `n` repeats of the element, similar to the general `take()`.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"repeatn"}}],[11,"zip","","Iterate tuples repeating the element with items from another iterator, similar to the general `zip()`.",52,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"generics":["repeatn"],"name":"zip"}}],[11,"drive_unindexed","","",52,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"repeatn"}}],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",53,null],[11,"with_producer","","",53,null],[11,"len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",54,null],[11,"opt_len","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",54,null],[11,"len","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",54,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[8,"IntoParallelIterator","","`IntoParallelIterator` implements the conversion to a [`ParallelIterator`].",null,null],[16,"Iter","","The parallel iterator type that will be created.",56,null],[16,"Item","","The type of item that the parallel iterator will produce.",56,null],[10,"into_par_iter","","Converts `self` into a parallel iterator.",56,null],[8,"IntoParallelRefIterator","","`IntoParallelRefIterator` implements the conversion to a [`ParallelIterator`], providing shared references to the data.",null,null],[16,"Iter","","The type of the parallel iterator that will be returned.",57,null],[16,"Item","","The type of item that the parallel iterator will produce. This will typically be an `&'data T` reference type.",57,null],[10,"par_iter","","Converts `self` into a parallel iterator.",57,null],[8,"IntoParallelRefMutIterator","","`IntoParallelRefMutIterator` implements the conversion to a [`ParallelIterator`], providing mutable references to the data.",null,null],[16,"Iter","","The type of iterator that will be created.",58,null],[16,"Item","","The type of item that will be produced; this is typically an `&'data mut T` reference.",58,null],[10,"par_iter_mut","","Creates the parallel iterator from `self`.",58,null],[8,"ParallelIterator","","Parallel version of the standard iterator trait.",null,null],[16,"Item","","The type of item that this parallel iterator produces. For example, if you use the [`for_each`] method, this is the type of item that your closure will be invoked with.",59,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",59,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",59,{"inputs":[{"name":"self"},{"name":"t"},{"name":"op"}],"output":null}],[11,"count","","Counts the number of items in this parallel iterator.",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",59,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"mapwith"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",59,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",59,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"inspect"}}],[11,"update","","Mutates each item of this iterator before yielding it.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"update"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",59,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",59,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",59,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",59,{"inputs":[{"name":"self"},{"name":"id"},{"name":"f"}],"output":{"name":"fold"}}],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",59,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"foldwith"}}],[11,"sum","","Sums up the items in the iterator.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Multiplies all the items in the iterator.",59,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",59,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"chain"}}],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",59,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",59,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",59,null],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",59,null],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",59,null],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",59,null],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",59,null],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",59,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"collect_into_vec","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",60,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"unzip_into_vecs","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",60,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",60,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"zip"}}],[11,"zip_eq","","The same as `Zip`, but requires that both iterators have the same length.",60,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"zipeq"}}],[11,"interleave","","Interleave elements of this iterator and the other given iterator. Alternately yields elements from this iterator and the given iterator, until both are exhausted. If one iterator is exhausted before the other, the last elements are provided from the other.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Interleave elements of this iterator and the other given iterator, until one is exhausted.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"interleaveshortest"}}],[11,"chunks","","Split an iterator up into fixed-size chunks.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"enumerate","","Yields an index along with each item.",60,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",60,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",60,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",60,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",60,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"minlen"}}],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"maxlen"}}],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",60,null],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",60,null],[8,"FromParallelIterator","","`FromParallelIterator` implements the creation of a collection from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a given type, you define how it will be created from an iterator.",null,null],[10,"from_par_iter","","Creates an instance of the collection from the parallel iterator `par_iter`.",61,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",null,null],[10,"par_extend","","Extends an instance of the collection with the elements drawn from the parallel iterator `par_iter`.",62,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"option","rayon","Parallel iterator types for [options][std::option]",null,null],[3,"IntoIter","rayon::option","A parallel iterator over the value in [`Some`] variant of an [`Option`].",null,null],[3,"Iter","","A parallel iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IterMut","","A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",63,null],[11,"opt_len","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",63,null],[11,"len","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",63,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",64,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",65,null],[11,"opt_len","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",65,null],[11,"len","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",65,null],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null],[0,"range","","Parallel iterator types for [ranges][std::range], the type for values created by `a..b` expressions",null,null],[3,"Iter","rayon::range","Parallel iterator over a range, implemented for all integer types.",null,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"drive_unindexed","","",66,null],[0,"result","rayon","Parallel iterator types for [results][std::result]",null,null],[3,"IntoIter","rayon::result","Parallel iterator over a result",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a result",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a result",null,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",67,null],[11,"opt_len","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",67,null],[11,"len","","",67,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",67,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",68,null],[11,"opt_len","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",68,null],[11,"len","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",68,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",69,null],[11,"opt_len","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",69,null],[11,"len","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",69,null],[0,"slice","rayon","Parallel iterator types for [slices][std::slice]",null,null],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",null,null],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",null,null],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",null,null],[3,"IterMut","","Parallel iterator over mutable items in a slice",null,null],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",null,null],[3,"Split","","Parallel iterator over slices separated by a predicate",null,null],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",null,null],[8,"ParallelSlice","","Parallel extensions for slices.",null,null],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",70,null],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",70,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `size`. The windows overlap.",70,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"par_chunks","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks do not overlap.",70,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",null,null],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",71,null],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",71,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[11,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks are mutable and do not overlap.",71,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"par_sort","","Sorts the slice in parallel.",71,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",71,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",72,null],[11,"opt_len","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",72,null],[11,"len","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",72,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",73,null],[11,"opt_len","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",73,null],[11,"len","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",73,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",74,null],[11,"opt_len","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",74,null],[11,"len","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",74,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",75,null],[11,"opt_len","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",75,null],[11,"len","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",75,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",76,null],[11,"opt_len","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",76,null],[11,"len","","",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",76,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",77,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",78,null],[0,"str","rayon","Parallel iterator types for [strings][std::str]",null,null],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",null,null],[3,"Split","","Parallel iterator over substrings separated by a pattern",null,null],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",null,null],[3,"Lines","","Parallel iterator over lines in a string",null,null],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",null,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",79,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",79,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitterminator"}}],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",79,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",79,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"drive_unindexed","","",80,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"drive_unindexed","","",81,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"drive_unindexed","","",82,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"drive_unindexed","","",83,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"drive_unindexed","","",84,null],[0,"vec","rayon","Parallel iterator types for [vectors][std::vec] (`Vec<T>`)",null,null],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",null,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",85,null],[11,"opt_len","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",85,null],[11,"len","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",85,null],[11,"drive_unindexed","rayon::iter","",18,null],[11,"opt_len","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",18,null],[11,"len","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",18,null],[11,"par_extend","","",18,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"new","rayon","Deprecated in favor of `ThreadPoolBuilder::build`.",86,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",86,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",86,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",86,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",86,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",86,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",86,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"description","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",86,null],[11,"partial_cmp","rayon::iter","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"from","","",18,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"deref_mut","","",18,null],[11,"into","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",18,null],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"extend","","",18,null],[11,"read","","",18,null],[11,"read_to_end","","",18,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"fold","","",18,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",18,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",18,null],[11,"fill_buf","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"as_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"new","rayon","Creates and returns a valid rayon thread pool builder, but does not initialize it.",90,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",90,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","threadpoolbuilderror"],"name":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",90,{"inputs":[{"name":"self"}],"output":{"generics":["threadpoolbuilderror"],"name":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",90,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"threadpoolbuilder"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",90,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",90,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",90,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",90,{"inputs":[{"name":"self"}],"output":{"name":"threadpoolbuilder"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",90,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",90,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",89,null],[11,"is_left","rayon::iter","Return true if the value is the `Left` variant.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",18,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",18,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"Chain"],[3,"Chunks"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"ZipEq"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"Update"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[3,"Repeat"],[3,"RepeatN"],[3,"Empty"],[3,"Once"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"IntoIter"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"FnContext"],[3,"Scope"],[3,"ThreadPoolBuilder"]]};
searchIndex["rayon_core"] = {"doc":"Under construction","items":[[3,"ThreadPool","rayon_core","Represents a user created [thread-pool].",null,null],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",null,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",null,{"inputs":[],"output":{"generics":["bool"],"name":"option"}}],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",null,{"inputs":[{"name":"configuration"}],"output":{"generics":["box"],"name":"result"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",0,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Deprecated in favor of `ThreadPoolBuilder::build`.",1,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"configuration"}}],[11,"new","","Creates and returns a valid rayon thread pool builder, but does not initialize it.",3,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",3,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","threadpoolbuilderror"],"name":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",3,{"inputs":[{"name":"self"}],"output":{"generics":["threadpoolbuilderror"],"name":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",4,{"inputs":[],"output":{"name":"configuration"}}],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Scope"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is heavily based on RE2 both in syntax and in implementation. Notably, backreferences and arbitrary lookahead/lookbehind assertions are not provided. In return, regular expression searching provided by this package has excellent worst-case performance. The specific syntax supported is documented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[13,"InvalidSet","","DEPRECATED: Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",6,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original byte string matched.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","regex","",16,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",17,null],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",20,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",21,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",24,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["captures"],"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",24,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"generics":["str"],"name":"cow"}}],[11,"no_expand","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["str"],"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",34,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"generics":["str"],"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",null,null],[3,"ParserBuilder","","A builder for a regular expression parser.",null,null],[4,"Error","","This error type encompasses any error that can be returned by this crate.",null,null],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,null],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",null,{"inputs":[{"name":"str"},{"name":"string"}],"output":null}],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[0,"ast","","Defines an abstract syntax for regular expressions.",null,null],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",null,null],[3,"Span","","Span represents the position information of a single AST item.",null,null],[12,"start","","The start byte offset.",1,null],[12,"end","","The end byte offset.",1,null],[3,"Position","","A single position in a regular expression.",null,null],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,null],[12,"line","","The line number, starting at `1`.",2,null],[12,"column","","The approximate column number, starting at `1`.",2,null],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",null,null],[12,"ast","","The actual ast.",3,null],[12,"comments","","All comments found in the original regular expression.",3,null],[3,"Comment","","A comment from a regular expression with an associated span.",null,null],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,null],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,null],[3,"Alternation","","An alternation of regular expressions.",null,null],[12,"span","","The span of this alternation.",5,null],[12,"asts","","The alternate regular expressions.",5,null],[3,"Concat","","A concatenation of regular expressions.",null,null],[12,"span","","The span of this concatenation.",6,null],[12,"asts","","The concatenation regular expressions.",6,null],[3,"Literal","","A single literal expression.",null,null],[12,"span","","The span of this literal.",7,null],[12,"kind","","The kind of this literal.",7,null],[12,"c","","The Unicode scalar value corresponding to this literal.",7,null],[3,"ClassPerl","","A Perl character class.",null,null],[12,"span","","The span of this class.",8,null],[12,"kind","","The kind of Perl class.",8,null],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,null],[3,"ClassAscii","","An ASCII character class.",null,null],[12,"span","","The span of this class.",9,null],[12,"kind","","The kind of ASCII class.",9,null],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,null],[3,"ClassUnicode","","A Unicode character class.",null,null],[12,"span","","The span of this class.",10,null],[12,"negated","","Whether this class is negated or not.",10,null],[12,"kind","","The kind of Unicode class.",10,null],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",null,null],[12,"span","","The span of this class.",11,null],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,null],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,null],[3,"ClassSetRange","","A single character class range in a set.",null,null],[12,"span","","The span of this range.",12,null],[12,"start","","The start of this range.",12,null],[12,"end","","The end of this range.",12,null],[3,"ClassSetUnion","","A union of items inside a character class set.",null,null],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,null],[12,"items","","The sequence of items that make up this union.",13,null],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",null,null],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,null],[12,"kind","","The type of this set operation.",14,null],[12,"lhs","","The left hand side of the operation.",14,null],[12,"rhs","","The right hand side of the operation.",14,null],[3,"Assertion","","A single zero-width assertion.",null,null],[12,"span","","The span of this assertion.",15,null],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,null],[3,"Repetition","","A repetition operation applied to a regular expression.",null,null],[12,"span","","The span of this operation.",16,null],[12,"op","","The actual operation.",16,null],[12,"greedy","","Whether this operation was applied greedily or not.",16,null],[12,"ast","","The regular expression under repetition.",16,null],[3,"RepetitionOp","","The repetition operator itself.",null,null],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,null],[12,"kind","","The type of operation.",17,null],[3,"Group","","A grouped regular expression.",null,null],[12,"span","","The span of this group.",18,null],[12,"kind","","The kind of this group.",18,null],[12,"ast","","The regular expression in this group.",18,null],[3,"CaptureName","","A capture name.",null,null],[12,"span","","The span of this capture name.",19,null],[12,"name","","The capture name.",19,null],[12,"index","","The capture index.",19,null],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",null,null],[12,"span","","The span of these flags, including the grouping parentheses.",20,null],[12,"flags","","The actual sequence of flags.",20,null],[3,"Flags","","A group of flags.",null,null],[12,"span","","The span of this group of flags.",21,null],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,null],[3,"FlagsItem","","A single item in a group of flags.",null,null],[12,"span","","The span of this item.",22,null],[12,"kind","","The kind of this item.",22,null],[4,"ErrorKind","","The type of an error that occurred while building an AST.",null,null],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,null],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,null],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,null],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,null],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,null],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,null],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,null],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,null],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,null],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,null],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,null],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,null],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,null],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,null],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,null],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,null],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,null],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,null],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,null],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,null],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,null],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,null],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,null],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,null],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,null],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,null],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,null],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,null],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,null],[4,"Ast","","An abstract syntax tree for a single regular expression.",null,null],[13,"Empty","","An empty regex that matches everything.",24,null],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,null],[13,"Literal","","A single character literal, which includes escape sequences.",24,null],[13,"Dot","","The \"any character\" class.",24,null],[13,"Assertion","","A single zero-width assertion.",24,null],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,null],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,null],[13,"Group","","A grouped regular expression.",24,null],[13,"Alternation","","An alternation of regular expressions.",24,null],[13,"Concat","","A concatenation of regular expressions.",24,null],[4,"LiteralKind","","The kind of a single literal expression.",null,null],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,null],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,null],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,null],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,null],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,null],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,null],[4,"SpecialLiteralKind","","The type of a special literal.",null,null],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,null],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,null],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,null],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,null],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,null],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,null],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,null],[4,"HexLiteralKind","","The type of a Unicode hex literal.",null,null],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,null],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,null],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,null],[4,"Class","","A single character class expression.",null,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,null],[4,"ClassPerlKind","","The available Perl character classes.",null,null],[13,"Digit","","Decimal numbers.",29,null],[13,"Space","","Whitespace.",29,null],[13,"Word","","Word characters.",29,null],[4,"ClassAsciiKind","","The available ASCII character classes.",null,null],[13,"Alnum","","`[0-9A-Za-z]`",30,null],[13,"Alpha","","`[A-Za-z]`",30,null],[13,"Ascii","","`[\\x00-\\x7F]`",30,null],[13,"Blank","","`[ \\t]`",30,null],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,null],[13,"Digit","","`[0-9]`",30,null],[13,"Graph","","`[!-~]`",30,null],[13,"Lower","","`[a-z]`",30,null],[13,"Print","","`[ -~]`",30,null],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,null],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,null],[13,"Upper","","`[A-Z]`",30,null],[13,"Word","","`[0-9A-Za-z_]`",30,null],[13,"Xdigit","","`[0-9A-Fa-f]`",30,null],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",null,null],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,null],[13,"Named","","A binary property, general category or script. The string may be empty.",31,null],[13,"NamedValue","","A property name and an associated value.",31,null],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,null],[12,"name","","The property name (which may be empty).",31,null],[12,"value","","The property value (which may be empty).",31,null],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",null,null],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,null],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,null],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,null],[4,"ClassSet","","A character class set.",null,null],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,null],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,null],[4,"ClassSetItem","","A single component of a character class set.",null,null],[13,"Empty","","An empty item.",34,null],[13,"Literal","","A single literal.",34,null],[13,"Range","","A range between two literals.",34,null],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,null],[13,"Union","","A union of items.",34,null],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",null,null],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,null],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,null],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,null],[4,"AssertionKind","","An assertion kind.",null,null],[13,"StartLine","","`^`",36,null],[13,"EndLine","","`$`",36,null],[13,"StartText","","`\\A`",36,null],[13,"EndText","","`\\z`",36,null],[13,"WordBoundary","","`\\b`",36,null],[13,"NotWordBoundary","","`\\B`",36,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","`?`",37,null],[13,"ZeroOrMore","","`*`",37,null],[13,"OneOrMore","","`+`",37,null],[13,"Range","","`{m,n}`",37,null],[4,"RepetitionRange","","A range repetition operator.",null,null],[13,"Exactly","","`{m}`",38,null],[13,"AtLeast","","`{m,}`",38,null],[13,"Bounded","","`{m,n}`",38,null],[4,"GroupKind","","The kind of a group.",null,null],[13,"CaptureIndex","","`(a)`",39,null],[13,"CaptureName","","`(?P<name>a)`",39,null],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,null],[4,"FlagsItemKind","","The kind of an item in a group of flags.",null,null],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,null],[13,"Flag","","A single flag in a group.",40,null],[4,"Flag","","A single flag.",null,null],[13,"CaseInsensitive","","`i`",41,null],[13,"MultiLine","","`m`",41,null],[13,"DotMatchesNewLine","","`s`",41,null],[13,"SwapGreed","","`U`",41,null],[13,"Unicode","","`u`",41,null],[13,"IgnoreWhitespace","","`x`",41,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"ast"},{"name":"v"}],"output":{"name":"result"}}],[0,"parse","","This module provides a regular expression parser.",null,null],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",null,null],[3,"Parser","","A regular expression parser.",null,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",42,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",43,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ast","error"],"name":"result"}}],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["withcomments","error"],"name":"result"}}],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",null,null],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",null,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",44,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,{"inputs":[{"name":"self"},{"name":"ast"},{"name":"w"}],"output":{"name":"result"}}],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",null,null],[16,"Output","","The result of visiting an AST.",45,null],[16,"Err","","An error that visiting an AST might return.",45,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",46,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,{"inputs":[{"name":"self"}],"output":{"generics":["span"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"new","","Create a new span with the given positions.",1,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"span"}}],[11,"splat","","Create a new span using the given position as the start and end.",1,{"inputs":[{"name":"position"}],"output":{"name":"span"}}],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new position with the given information.",2,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"position"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"withcomments"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"comment"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this abstract syntax tree.",24,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_empty","","Return true if and only if this Ast is empty.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"alternation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this alternation as an AST.",5,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this concatenation as an AST.",6,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"literalkind"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"specialliteralkind"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"specialliteralkind"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hexliteralkind"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"hexliteralkind"}],"output":{"name":"bool"}}],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class.",28,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"classperl"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"classperlkind"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"classperlkind"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"classascii"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"classasciikind"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"classasciikind"}],"output":{"name":"bool"}}],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,{"inputs":[{"name":"str"}],"output":{"generics":["classasciikind"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if this class has been negated.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"classunicodekind"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeopkind"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"classunicodeopkind"}],"output":{"name":"bool"}}],[11,"is_equal","","Whether the op is an equality op or not.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"classbracketed"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"classset"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"union","","Build a set from a union.",33,{"inputs":[{"name":"classsetunion"}],"output":{"name":"classset"}}],[11,"span","","Return the span of this character class set.",33,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class set item.",34,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"classsetrange"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetunion"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"push","","Push a new item in this union.",13,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":null}],[11,"into_item","","Return this union as a character class set item.",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryop"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryopkind"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"classsetbinaryopkind"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"assertion"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"assertionkind"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"assertionkind"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"repetitionop"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,{"inputs":[{"name":"self"}],"output":{"generics":["flags"],"name":"option"}}],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"capturename"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"setflags"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"add_item","","Add the given item to this sequence of flags.",21,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"generics":["usize"],"name":"option"}}],[11,"flag_state","","Returns the state of the given flag in this set.",21,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"generics":["bool"],"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"flagsitem"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"flagsitemkind"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",null,null],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",null,null],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",null,null],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",null,null],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",null,null],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",null,null],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",null,null],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",null,null],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",null,null],[3,"Group","","The high-level intermediate representation for a group.",null,null],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,null],[12,"hir","","The expression inside the capturing group, which may be empty.",47,null],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",null,null],[12,"kind","","The kind of this repetition operator.",48,null],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,null],[12,"hir","","The expression being repeated.",48,null],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",null,null],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,null],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,null],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,null],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,null],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,null],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",null,null],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,null],[13,"Literal","","A single literal character that matches exactly this character.",50,null],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,null],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,null],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,null],[13,"Repetition","","A repetition operation applied to a child expression.",50,null],[13,"Group","","A possibly capturing group, which contains a child expression.",50,null],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,null],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,null],[4,"Literal","","The high-level intermediate representation of a literal.",null,null],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,null],[13,"Byte","","A single character represented by an arbitrary byte.",51,null],[4,"Class","","The high-level intermediate representation of a character class.",null,null],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,null],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,null],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",null,null],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,null],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,null],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,null],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,null],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",null,null],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,null],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,null],[4,"GroupKind","","The kind of group.",null,null],[13,"CaptureIndex","","A normal unnamed capturing group.",55,null],[13,"CaptureName","","A named capturing group.",55,null],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,null],[12,"index","","The capture index of the group.",55,null],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,null],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,null],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,null],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,null],[4,"RepetitionRange","","The kind of a counted repetition operator.",null,null],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,null],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,null],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"hir"},{"name":"v"}],"output":{"name":"result"}}],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",null,null],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",null,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",58,{"inputs":[],"output":{"name":"literals"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,null],[11,"min_len","","Returns the length of the smallest literal.",58,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["literals"],"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,null],[11,"add","","Adds the given literal to this set.",58,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",59,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"literal"}}],[11,"empty","","Returns a new complete empty literal.",59,{"inputs":[],"output":{"name":"literal"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",59,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",59,null],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",null,null],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",null,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",60,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,{"inputs":[{"name":"self"},{"name":"hir"},{"name":"w"}],"output":{"name":"result"}}],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",null,null],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",null,null],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"translatorbuilder"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"new","","Create a new translator builder with a default c onfiguration.",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"build","","Build a translator using the current configuration.",61,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new translator using the default configuration.",62,{"inputs":[],"output":{"name":"translator"}}],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,{"inputs":[{"name":"self"},{"name":"str"},{"name":"ast"}],"output":{"generics":["hir","error"],"name":"result"}}],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",null,null],[16,"Output","","The result of visiting an HIR.",63,null],[16,"Err","","An error that visiting an HIR might return.",63,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",64,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"hir"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"kind","","Returns a reference to the underlying HIR kind.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"empty","","Returns an empty HIR expression.",65,{"inputs":[],"output":{"name":"hir"}}],[11,"literal","","Creates a literal HIR expression.",65,{"inputs":[{"name":"literal"}],"output":{"name":"hir"}}],[11,"class","","Creates a class HIR expression.",65,{"inputs":[{"name":"class"}],"output":{"name":"hir"}}],[11,"anchor","","Creates an anchor assertion HIR expression.",65,{"inputs":[{"name":"anchor"}],"output":{"name":"hir"}}],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,{"inputs":[{"name":"wordboundary"}],"output":{"name":"hir"}}],[11,"repetition","","Creates a repetition HIR expression.",65,{"inputs":[{"name":"repetition"}],"output":{"name":"hir"}}],[11,"group","","Creates a group HIR expression.",65,{"inputs":[{"name":"group"}],"output":{"name":"hir"}}],[11,"concat","","Returns the concatenation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"alternation","","Returns the alternation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"dot","","Build an HIR expression for `.`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"any","","Build an HIR expression for `(?s).`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class in place.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",66,{"inputs":[{"name":"i"}],"output":{"name":"classunicode"}}],[11,"empty","","Create a new class with no ranges.",66,{"inputs":[],"output":{"name":"classunicode"}}],[11,"push","","Add a new range to this set.",66,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",66,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"intersect","","Intersect this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"difference","","Subtract the given character class from this character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["classunicoderange"],"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"classunicoderange"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"classunicoderange"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"ordering"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Unicode scalar value range for a character class.",68,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"classunicoderange"}}],[11,"start","","Return the start of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"end","","Return the end of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytes"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",69,{"inputs":[{"name":"i"}],"output":{"name":"classbytes"}}],[11,"empty","","Create a new class with no ranges.",69,{"inputs":[],"output":{"name":"classbytes"}}],[11,"push","","Add a new range to this set.",69,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytesiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",69,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this byte class.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["classbytesrange"],"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"classbytesrange"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"classbytesrange"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"ordering"}}],[11,"new","","Create a new byte range for a character class.",71,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"classbytesrange"}}],[11,"start","","Return the start of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"end","","Return the end of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"wordboundary"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"wordboundary"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"drop","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",72,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",72,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",72,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",73,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["hir"],"name":"result"}}],[6,"Result","","A type alias for dealing with errors returned by this crate.",null,null],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["rpds"] = {"doc":"Rust Persistent Data Structures","items":[[0,"list","rpds","",null,null],[3,"List","rpds::list","A persistent list with structural sharing.",null,null],[3,"IterArc","","",null,null],[6,"Iter","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"list"}}],[11,"first","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_first","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["list"],"name":"option"}}],[11,"drop_first_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push_front","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"list"}}],[11,"push_front_mut","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"reverse","","",0,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"reverse_mut","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"list"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"list"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"size_hint","","",1,null],[0,"map","rpds","",null,null],[0,"hash_trie_map","rpds::map","",null,null],[3,"HashTrieMap","rpds::map::hash_trie_map","A persistent map with structural sharing.  This implementation uses a hash array mapped trie.",null,null],[3,"IterArc","","",null,null],[6,"Iter","","",null,null],[6,"IterKeys","","",null,null],[6,"IterValues","","",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"hashtriemap"}}],[11,"new_with_degree","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"hashtriemap"}}],[11,"new_with_hasher","","",2,{"inputs":[{"name":"h"}],"output":{"name":"hashtriemap"}}],[11,"new_with_hasher_and_degree","","",2,{"inputs":[{"name":"h"},{"name":"u8"}],"output":{"name":"hashtriemap"}}],[11,"get","","",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","",2,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"hashtriemap"}}],[11,"insert_mut","","",2,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"remove","","",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"hashtriemap"}}],[11,"remove_mut","","",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"contains_key","","",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"size","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"keys","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iterkeys"}}],[11,"values","","",2,{"inputs":[{"name":"self"}],"output":{"name":"itervalues"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hashtriemap"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"hashtriemap"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"hashtriemap"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"hashtriemap"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"size_hint","","",3,null],[0,"red_black_tree_map","rpds::map","",null,null],[3,"RedBlackTreeMap","rpds::map::red_black_tree_map","A persistent map with structural sharing.  This implementation uses a red-black tree.",null,null],[3,"IterArc","","",null,null],[6,"Iter","","",null,null],[6,"IterKeys","","",null,null],[6,"IterValues","","",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[],"output":{"name":"redblacktreemap"}}],[11,"get","","",4,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"first","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert","","",4,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redblacktreemap"}}],[11,"insert_mut","","",4,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"remove","","",4,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"redblacktreemap"}}],[11,"remove_mut","","",4,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"contains_key","","",4,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"size","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"keys","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iterkeys"}}],[11,"values","","",4,{"inputs":[{"name":"self"}],"output":{"name":"itervalues"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"redblacktreemap"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"redblacktreemap"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"redblacktreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"redblacktreemap"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"redblacktreemap"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"redblacktreemap"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[0,"queue","rpds","",null,null],[3,"Queue","rpds::queue","A persistent queue with structural sharing.",null,null],[4,"LazilyReversedListIter","","",null,null],[13,"Uninitialized","","",6,null],[12,"list","rpds::queue::LazilyReversedListIter","",6,null],[13,"Initialized","rpds::queue","",6,null],[12,"vec","rpds::queue::LazilyReversedListIter","",6,null],[12,"current","","",6,null],[6,"Iter","rpds::queue","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"queue"}}],[11,"peek","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"dequeue","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["queue"],"name":"option"}}],[11,"dequeue_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enqueue","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"queue"}}],[11,"enqueue_mut","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"queue"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"queue"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"queue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"queue"}],"output":{"name":"ordering"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"queue"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"queue"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"size_hint","","",6,null],[0,"set","rpds","",null,null],[0,"hash_trie_set","rpds::set","",null,null],[3,"HashTrieSet","rpds::set::hash_trie_set","A persistent set with structural sharing.  This implementation uses a hash array mapped trie.",null,null],[6,"Iter","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"hashtrieset"}}],[11,"new_with_degree","","",8,{"inputs":[{"name":"u8"}],"output":{"name":"hashtrieset"}}],[11,"new_with_hasher","","",8,{"inputs":[{"name":"h"}],"output":{"name":"hashtrieset"}}],[11,"new_with_hasher_and_degree","","",8,{"inputs":[{"name":"h"},{"name":"u8"}],"output":{"name":"hashtrieset"}}],[11,"insert","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hashtrieset"}}],[11,"insert_mut","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"remove","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"hashtrieset"}}],[11,"remove_mut","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"contains","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"is_disjoint","","",8,{"inputs":[{"name":"self"},{"name":"hashtrieset"}],"output":{"name":"bool"}}],[11,"is_subset","","",8,{"inputs":[{"name":"self"},{"name":"hashtrieset"}],"output":{"name":"bool"}}],[11,"is_superset","","",8,{"inputs":[{"name":"self"},{"name":"hashtrieset"}],"output":{"name":"bool"}}],[11,"size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"hashtrieset"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"hashtrieset"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"hashtrieset"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",8,{"inputs":[{"name":"i"}],"output":{"name":"hashtrieset"}}],[0,"red_black_tree_set","rpds::set","",null,null],[3,"RedBlackTreeSet","rpds::set::red_black_tree_set","A persistent set with structural sharing.  This implementation uses a red-black tree.",null,null],[6,"Iter","","",null,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"redblacktreeset"}}],[11,"insert","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"redblacktreeset"}}],[11,"insert_mut","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"remove","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"redblacktreeset"}}],[11,"remove_mut","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"contains","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"first","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_disjoint","","",9,{"inputs":[{"name":"self"},{"name":"redblacktreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","",9,{"inputs":[{"name":"self"},{"name":"redblacktreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","",9,{"inputs":[{"name":"self"},{"name":"redblacktreeset"}],"output":{"name":"bool"}}],[11,"size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",9,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"redblacktreeset"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"redblacktreeset"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"redblacktreeset"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",9,{"inputs":[{"name":"i"}],"output":{"name":"redblacktreeset"}}],[0,"stack","rpds","",null,null],[3,"Stack","rpds::stack","A persistent stack with structural sharing.",null,null],[6,"Iter","","",null,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"stack"}}],[11,"peek","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["stack"],"name":"option"}}],[11,"pop_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"stack"}}],[11,"push_mut","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",10,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"stack"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"stack"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"stack"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"stack"}],"output":{"name":"ordering"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"stack"}}],[0,"vector","rpds","",null,null],[3,"Vector","rpds::vector","A persistent vector with structural sharing.",null,null],[3,"IterArc","","",null,null],[6,"Iter","","",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"vector"}}],[11,"new_with_bits","","",11,{"inputs":[{"name":"u8"}],"output":{"name":"vector"}}],[11,"first","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":{"generics":["vector"],"name":"option"}}],[11,"set_mut","","Returns `true` if the operation was successful.",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":{"name":"bool"}}],[11,"push_back","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"vector"}}],[11,"push_back_mut","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"drop_last","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["vector"],"name":"option"}}],[11,"drop_last_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"vector"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"ordering"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",11,{"inputs":[{"name":"i"}],"output":{"name":"vector"}}],[11,"extend","","",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[14,"list","rpds","Creates a `List` containing the given arguments:",null,null],[14,"ht_map","","Creates a `HashTrieMap` containing the given arguments:",null,null],[14,"rbt_map","","Creates a `RedBlackTreeMap` containing the given arguments:",null,null],[14,"queue","","Creates a `Queue` containing the given arguments:",null,null],[14,"ht_set","","Creates a `HashTrieSet` containing the given arguments:",null,null],[14,"rbt_set","","Creates a `RedBlackTreeSet` containing the given arguments:",null,null],[14,"stack","","Creates a `Stack` containing the given arguments:",null,null],[14,"vector","","Creates a `Vector` containing the given arguments:",null,null]],"paths":[[3,"List"],[3,"IterArc"],[3,"HashTrieMap"],[3,"IterArc"],[3,"RedBlackTreeMap"],[3,"IterArc"],[4,"LazilyReversedListIter"],[3,"Queue"],[3,"HashTrieSet"],[3,"RedBlackTreeSet"],[3,"Stack"],[3,"Vector"],[3,"IterArc"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"generics":["vec","frombase64error"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec","fromhexerror"],"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"generics":["stackelement"],"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["jsonevent"],"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["json","parsererror"],"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rustfmt"] = {"doc":"","items":[[3,"Summary","rustfmt","",null,null],[12,"has_diff","","",0,null],[3,"Indent","","",null,null],[12,"block_indent","","",1,null],[12,"alignment","","",1,null],[3,"Shape","","",null,null],[12,"width","","",2,null],[12,"indent","","",2,null],[12,"offset","","",2,null],[3,"FormattingError","","",null,null],[3,"FormatReport","","",null,null],[4,"ErrorKind","","",null,null],[13,"LineOverflow","","",3,null],[13,"TrailingWhitespace","","",3,null],[13,"BadIssue","","",3,null],[4,"Input","","",null,null],[13,"File","","",4,null],[13,"Text","","",4,null],[5,"format_input","","",null,{"inputs":[{"name":"input"},{"name":"config"},{"name":"option"}],"output":{"name":"result"}}],[5,"run","","",null,{"inputs":[{"name":"input"},{"name":"config"}],"output":{"name":"summary"}}],[0,"config","","",null,null],[3,"ConfigHelpItem","rustfmt::config","",null,null],[3,"Config","","",null,null],[3,"PartialConfig","","",null,null],[12,"verbose","","",5,null],[12,"disable_all_formatting","","",5,null],[12,"skip_children","","",5,null],[12,"file_lines","","",5,null],[12,"max_width","","",5,null],[12,"error_on_line_overflow","","",5,null],[12,"tab_spaces","","",5,null],[12,"fn_call_width","","",5,null],[12,"struct_lit_width","","",5,null],[12,"struct_variant_width","","",5,null],[12,"force_explicit_abi","","",5,null],[12,"newline_style","","",5,null],[12,"fn_brace_style","","",5,null],[12,"item_brace_style","","",5,null],[12,"control_style","","",5,null],[12,"control_brace_style","","",5,null],[12,"impl_empty_single_line","","",5,null],[12,"trailing_comma","","",5,null],[12,"fn_empty_single_line","","",5,null],[12,"fn_single_line","","",5,null],[12,"fn_return_indent","","",5,null],[12,"fn_args_paren_newline","","",5,null],[12,"fn_args_density","","",5,null],[12,"fn_args_layout","","",5,null],[12,"array_layout","","",5,null],[12,"array_width","","",5,null],[12,"type_punctuation_density","","",5,null],[12,"where_style","","",5,null],[12,"where_density","","",5,null],[12,"where_layout","","",5,null],[12,"where_pred_indent","","",5,null],[12,"generics_indent","","",5,null],[12,"struct_lit_style","","",5,null],[12,"struct_lit_multiline_style","","",5,null],[12,"fn_call_style","","",5,null],[12,"report_todo","","",5,null],[12,"report_fixme","","",5,null],[12,"chain_indent","","",5,null],[12,"chain_one_line_max","","",5,null],[12,"chain_split_single_child","","",5,null],[12,"reorder_imports","","",5,null],[12,"reorder_imports_in_group","","",5,null],[12,"reorder_imported_names","","",5,null],[12,"single_line_if_else_max_width","","",5,null],[12,"format_strings","","",5,null],[12,"force_format_strings","","",5,null],[12,"take_source_hints","","",5,null],[12,"hard_tabs","","",5,null],[12,"wrap_comments","","",5,null],[12,"comment_width","","",5,null],[12,"normalize_comments","","",5,null],[12,"wrap_match_arms","","",5,null],[12,"match_block_trailing_comma","","",5,null],[12,"indent_match_arms","","",5,null],[12,"closure_block_indent_threshold","","",5,null],[12,"space_before_type_annotation","","",5,null],[12,"space_after_type_annotation_colon","","",5,null],[12,"space_before_struct_lit_field_colon","","",5,null],[12,"space_after_struct_lit_field_colon","","",5,null],[12,"space_before_bound","","",5,null],[12,"space_after_bound_colon","","",5,null],[12,"spaces_around_ranges","","",5,null],[12,"spaces_within_angle_brackets","","",5,null],[12,"spaces_within_square_brackets","","",5,null],[12,"spaces_within_parens","","",5,null],[12,"use_try_shorthand","","",5,null],[12,"write_mode","","",5,null],[12,"condense_wildcard_suffixes","","",5,null],[12,"combine_control_expr","","",5,null],[3,"ConfigSetter","","",null,null],[4,"Style","","",null,null],[13,"Rfc","","",6,null],[13,"Legacy","","",6,null],[4,"NewlineStyle","","",null,null],[13,"Windows","","",7,null],[13,"Unix","","",7,null],[13,"Native","","",7,null],[4,"BraceStyle","","",null,null],[13,"AlwaysNextLine","","",8,null],[13,"PreferSameLine","","",8,null],[13,"SameLineWhere","","",8,null],[4,"ControlBraceStyle","","",null,null],[13,"AlwaysSameLine","","",9,null],[13,"ClosingNextLine","","",9,null],[13,"AlwaysNextLine","","",9,null],[4,"ReturnIndent","","",null,null],[13,"WithArgs","","",10,null],[13,"WithWhereClause","","",10,null],[4,"IndentStyle","","",null,null],[13,"Visual","","",11,null],[13,"Block","","",11,null],[4,"Density","","",null,null],[13,"Compressed","","",12,null],[13,"Tall","","",12,null],[13,"CompressedIfEmpty","","",12,null],[13,"Vertical","","",12,null],[4,"TypeDensity","","",null,null],[13,"Compressed","","",13,null],[13,"Wide","","",13,null],[4,"LicensePolicy","","",null,null],[13,"NoLicense","","",14,null],[13,"TextLicense","","",14,null],[13,"FileLicense","","",14,null],[4,"MultilineStyle","","",null,null],[13,"PreferSingle","","",15,null],[13,"ForceMulti","","",15,null],[4,"ReportTactic","","",null,null],[13,"Always","","",16,null],[13,"Unnumbered","","",16,null],[13,"Never","","",16,null],[4,"WriteMode","","",null,null],[13,"Replace","","",17,null],[13,"Overwrite","","",17,null],[13,"Display","","",17,null],[13,"Diff","","",17,null],[13,"Coverage","","",17,null],[13,"Plain","","",17,null],[13,"Checkstyle","","",17,null],[5,"get_toml_path","","Check for the presence of known config file names (`rustfmt.toml,`.rustfmt.toml`) in`dir`",null,{"inputs":[{"name":"path"}],"output":{"generics":["option","error"],"name":"result"}}],[8,"ConfigType","","Trait for types that can be used in `Config`.",null,null],[10,"doc_hint","","Returns hint text for use in `Config::print_docs()`. For enum types, this is a pipe-separated list of variants; for other types it returns \"\".",18,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",6,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"newlinestyle"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"newlinestyle"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",7,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bracestyle"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"bracestyle"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",8,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"controlbracestyle"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"controlbracestyle"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",9,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"returnindent"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"returnindent"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",10,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"indentstyle"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"indentstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",11,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"density"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"density"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",12,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"typedensity"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"typedensity"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",13,{"inputs":[],"output":{"name":"string"}}],[11,"to_list_tactic","","",12,{"inputs":[{"name":"self"}],"output":{"name":"listtactic"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"licensepolicy"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"licensepolicy"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",14,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",14,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"multilinestyle"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"multilinestyle"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",15,{"inputs":[],"output":{"name":"string"}}],[11,"to_list_tactic","","",15,{"inputs":[{"name":"self"}],"output":{"name":"listtactic"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"reporttactic"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"reporttactic"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",16,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",16,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"writemode"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"writemode"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",17,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",17,{"inputs":[],"output":{"name":"string"}}],[11,"option_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"doc_string","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"variant_names","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"partialconfig"}}],[11,"to_toml","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["string","string"],"name":"result"}}],[11,"verbose","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"disable_all_formatting","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"skip_children","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"file_lines","","",21,{"inputs":[{"name":"self"},{"name":"filelines"}],"output":null}],[11,"max_width","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"error_on_line_overflow","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"tab_spaces","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fn_call_width","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"struct_lit_width","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"struct_variant_width","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"force_explicit_abi","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"newline_style","","",21,{"inputs":[{"name":"self"},{"name":"newlinestyle"}],"output":null}],[11,"fn_brace_style","","",21,{"inputs":[{"name":"self"},{"name":"bracestyle"}],"output":null}],[11,"item_brace_style","","",21,{"inputs":[{"name":"self"},{"name":"bracestyle"}],"output":null}],[11,"control_style","","",21,{"inputs":[{"name":"self"},{"name":"style"}],"output":null}],[11,"control_brace_style","","",21,{"inputs":[{"name":"self"},{"name":"controlbracestyle"}],"output":null}],[11,"impl_empty_single_line","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"trailing_comma","","",21,{"inputs":[{"name":"self"},{"name":"separatortactic"}],"output":null}],[11,"fn_empty_single_line","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fn_single_line","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fn_return_indent","","",21,{"inputs":[{"name":"self"},{"name":"returnindent"}],"output":null}],[11,"fn_args_paren_newline","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fn_args_density","","",21,{"inputs":[{"name":"self"},{"name":"density"}],"output":null}],[11,"fn_args_layout","","",21,{"inputs":[{"name":"self"},{"name":"indentstyle"}],"output":null}],[11,"array_layout","","",21,{"inputs":[{"name":"self"},{"name":"indentstyle"}],"output":null}],[11,"array_width","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"type_punctuation_density","","",21,{"inputs":[{"name":"self"},{"name":"typedensity"}],"output":null}],[11,"where_style","","",21,{"inputs":[{"name":"self"},{"name":"style"}],"output":null}],[11,"where_density","","",21,{"inputs":[{"name":"self"},{"name":"density"}],"output":null}],[11,"where_layout","","",21,{"inputs":[{"name":"self"},{"name":"listtactic"}],"output":null}],[11,"where_pred_indent","","",21,{"inputs":[{"name":"self"},{"name":"indentstyle"}],"output":null}],[11,"generics_indent","","",21,{"inputs":[{"name":"self"},{"name":"indentstyle"}],"output":null}],[11,"struct_lit_style","","",21,{"inputs":[{"name":"self"},{"name":"indentstyle"}],"output":null}],[11,"struct_lit_multiline_style","","",21,{"inputs":[{"name":"self"},{"name":"multilinestyle"}],"output":null}],[11,"fn_call_style","","",21,{"inputs":[{"name":"self"},{"name":"indentstyle"}],"output":null}],[11,"report_todo","","",21,{"inputs":[{"name":"self"},{"name":"reporttactic"}],"output":null}],[11,"report_fixme","","",21,{"inputs":[{"name":"self"},{"name":"reporttactic"}],"output":null}],[11,"chain_indent","","",21,{"inputs":[{"name":"self"},{"name":"indentstyle"}],"output":null}],[11,"chain_one_line_max","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"chain_split_single_child","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"reorder_imports","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"reorder_imports_in_group","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"reorder_imported_names","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"single_line_if_else_max_width","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"format_strings","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"force_format_strings","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"take_source_hints","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"hard_tabs","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"wrap_comments","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"comment_width","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"normalize_comments","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"wrap_match_arms","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"match_block_trailing_comma","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"indent_match_arms","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"closure_block_indent_threshold","","",21,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"space_before_type_annotation","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"space_after_type_annotation_colon","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"space_before_struct_lit_field_colon","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"space_after_struct_lit_field_colon","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"space_before_bound","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"space_after_bound_colon","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"spaces_around_ranges","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"spaces_within_angle_brackets","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"spaces_within_square_brackets","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"spaces_within_parens","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"use_try_shorthand","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"write_mode","","",21,{"inputs":[{"name":"self"},{"name":"writemode"}],"output":null}],[11,"condense_wildcard_suffixes","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"combine_control_expr","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"verbose","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"disable_all_formatting","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_children","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"file_lines","","",20,{"inputs":[{"name":"self"}],"output":{"name":"filelines"}}],[11,"max_width","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_on_line_overflow","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"tab_spaces","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fn_call_width","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"struct_lit_width","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"struct_variant_width","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"force_explicit_abi","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"newline_style","","",20,{"inputs":[{"name":"self"}],"output":{"name":"newlinestyle"}}],[11,"fn_brace_style","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bracestyle"}}],[11,"item_brace_style","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bracestyle"}}],[11,"control_style","","",20,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"control_brace_style","","",20,{"inputs":[{"name":"self"}],"output":{"name":"controlbracestyle"}}],[11,"impl_empty_single_line","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trailing_comma","","",20,{"inputs":[{"name":"self"}],"output":{"name":"separatortactic"}}],[11,"fn_empty_single_line","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fn_single_line","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fn_return_indent","","",20,{"inputs":[{"name":"self"}],"output":{"name":"returnindent"}}],[11,"fn_args_paren_newline","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fn_args_density","","",20,{"inputs":[{"name":"self"}],"output":{"name":"density"}}],[11,"fn_args_layout","","",20,{"inputs":[{"name":"self"}],"output":{"name":"indentstyle"}}],[11,"array_layout","","",20,{"inputs":[{"name":"self"}],"output":{"name":"indentstyle"}}],[11,"array_width","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"type_punctuation_density","","",20,{"inputs":[{"name":"self"}],"output":{"name":"typedensity"}}],[11,"where_style","","",20,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"where_density","","",20,{"inputs":[{"name":"self"}],"output":{"name":"density"}}],[11,"where_layout","","",20,{"inputs":[{"name":"self"}],"output":{"name":"listtactic"}}],[11,"where_pred_indent","","",20,{"inputs":[{"name":"self"}],"output":{"name":"indentstyle"}}],[11,"generics_indent","","",20,{"inputs":[{"name":"self"}],"output":{"name":"indentstyle"}}],[11,"struct_lit_style","","",20,{"inputs":[{"name":"self"}],"output":{"name":"indentstyle"}}],[11,"struct_lit_multiline_style","","",20,{"inputs":[{"name":"self"}],"output":{"name":"multilinestyle"}}],[11,"fn_call_style","","",20,{"inputs":[{"name":"self"}],"output":{"name":"indentstyle"}}],[11,"report_todo","","",20,{"inputs":[{"name":"self"}],"output":{"name":"reporttactic"}}],[11,"report_fixme","","",20,{"inputs":[{"name":"self"}],"output":{"name":"reporttactic"}}],[11,"chain_indent","","",20,{"inputs":[{"name":"self"}],"output":{"name":"indentstyle"}}],[11,"chain_one_line_max","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"chain_split_single_child","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reorder_imports","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reorder_imports_in_group","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reorder_imported_names","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"single_line_if_else_max_width","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"format_strings","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"force_format_strings","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take_source_hints","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hard_tabs","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"wrap_comments","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"comment_width","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"normalize_comments","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"wrap_match_arms","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"match_block_trailing_comma","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"indent_match_arms","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"closure_block_indent_threshold","","",20,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"space_before_type_annotation","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"space_after_type_annotation_colon","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"space_before_struct_lit_field_colon","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"space_after_struct_lit_field_colon","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"space_before_bound","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"space_after_bound_colon","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spaces_around_ranges","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spaces_within_angle_brackets","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spaces_within_square_brackets","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spaces_within_parens","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"use_try_shorthand","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"write_mode","","",20,{"inputs":[{"name":"self"}],"output":{"name":"writemode"}}],[11,"condense_wildcard_suffixes","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"combine_control_expr","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set","","",20,{"inputs":[{"name":"self"}],"output":{"name":"configsetter"}}],[11,"from_toml","","",20,{"inputs":[{"name":"str"}],"output":{"generics":["config","string"],"name":"result"}}],[11,"used_options","","",20,{"inputs":[{"name":"self"}],"output":{"name":"partialconfig"}}],[11,"all_options","","",20,{"inputs":[{"name":"self"}],"output":{"name":"partialconfig"}}],[11,"override_value","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"from_toml_path","","Construct a `Config` from the toml file specified at `file_path`.",20,{"inputs":[{"name":"path"}],"output":{"generics":["config","error"],"name":"result"}}],[11,"from_resolved_toml_path","","Resolve the config for input in `dir`.",20,{"inputs":[{"name":"path"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_docs","","",20,{"inputs":[],"output":null}],[11,"default","","",20,{"inputs":[],"output":{"name":"config"}}],[0,"codemap","rustfmt","This module contains utilities that work with the `CodeMap` from libsyntax / syntex_syntax. This includes extension traits and methods for looking up spans and line ranges for AST nodes.",null,null],[3,"LineRange","rustfmt::codemap","A range of lines in a file, inclusive of both ends.",null,null],[12,"file","","",22,null],[12,"lo","","",22,null],[12,"hi","","",22,null],[8,"SpanUtils","","",null,null],[10,"span_after","","",23,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"bytepos"}}],[10,"span_after_last","","",23,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"bytepos"}}],[10,"span_before","","",23,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"bytepos"}}],[8,"LineRangeUtils","","",null,null],[10,"lookup_line_range","","Returns the `LineRange` that corresponds to `span` in `self`.",24,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"linerange"}}],[11,"file_name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"filemap","rustfmt","",null,null],[5,"append_newline","rustfmt::filemap","",null,{"inputs":[{"name":"stringbuffer"}],"output":null}],[5,"write_all_files","","",null,{"inputs":[{"name":"filemap"},{"name":"t"},{"name":"config"}],"output":{"generics":["error"],"name":"result"}}],[5,"write_system_newlines","","",null,{"inputs":[{"name":"t"},{"name":"stringbuffer"},{"name":"config"}],"output":{"generics":["error"],"name":"result"}}],[5,"write_file","","",null,{"inputs":[{"name":"stringbuffer"},{"name":"str"},{"name":"t"},{"name":"config"}],"output":{"generics":["bool","error"],"name":"result"}}],[6,"FileMap","","",null,null],[6,"FileRecord","","",null,null],[0,"file_lines","rustfmt","This module contains types and functions to support formatting specific line ranges.",null,null],[3,"FileLines","rustfmt::file_lines","A set of lines in files.",null,null],[3,"Files","","FileLines files iterator.",null,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"filelines"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"filelines"}}],[11,"all","","Creates a `FileLines` that contains all lines in all files.",25,{"inputs":[],"output":{"name":"filelines"}}],[11,"files","","Returns an iterator over the files contained in `self`.",25,{"inputs":[{"name":"self"}],"output":{"name":"files"}}],[11,"contains","","Returns true if `range` is fully contained in `self`.",25,{"inputs":[{"name":"self"},{"name":"linerange"}],"output":{"name":"bool"}}],[11,"intersects","","Returns true if any lines in `range` are in `self`.",25,{"inputs":[{"name":"self"},{"name":"linerange"}],"output":{"name":"bool"}}],[11,"contains_line","","Returns true if `line` from `file_name` is in `self`.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"intersects_range","","Returns true if any of the lines between `lo` and `hi` from `file_name` are in `self`.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"from_str","","",25,{"inputs":[{"name":"str"}],"output":{"generics":["filelines","string"],"name":"result"}}],[11,"deserialize","","",25,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",25,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"visitor","rustfmt","",null,null],[3,"FmtVisitor","rustfmt::visitor","",null,null],[12,"parse_session","","",27,null],[12,"codemap","","",27,null],[12,"buffer","","",27,null],[12,"last_pos","","",27,null],[12,"block_indent","","",27,null],[12,"config","","",27,null],[12,"failed","","",27,null],[12,"is_if_else_block","","",27,null],[11,"visit_block","","",27,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_item","","",27,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_trait_item","","",27,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",27,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"from_codemap","","",27,{"inputs":[{"name":"parsesess"},{"name":"config"}],"output":{"name":"fmtvisitor"}}],[11,"snippet","","",27,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"visit_attrs","","",27,null],[11,"format_separate_mod","","",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"get_context","","",27,{"inputs":[{"name":"self"}],"output":{"name":"rewritecontext"}}],[11,"format_foreign_mod","","",27,{"inputs":[{"name":"self"},{"name":"foreignmod"},{"name":"span"}],"output":null}],[11,"rewrite_fn","","",27,{"inputs":[{"name":"self"},{"name":"indent"},{"name":"ident"},{"name":"fndecl"},{"name":"generics"},{"name":"unsafety"},{"name":"constness"},{"name":"defaultness"},{"name":"abi"},{"name":"visibility"},{"name":"span"},{"name":"block"}],"output":{"generics":["string"],"name":"option"}}],[11,"rewrite_required_fn","","",27,{"inputs":[{"name":"self"},{"name":"indent"},{"name":"ident"},{"name":"methodsig"},{"name":"span"}],"output":{"generics":["string"],"name":"option"}}],[11,"visit_enum","","",27,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"visibility"},{"name":"enumdef"},{"name":"generics"},{"name":"span"}],"output":null}],[11,"format_missing","","",27,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":null}],[11,"format_missing_with_indent","","",27,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":null}],[11,"format_missing_no_indent","","",27,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":null}],[11,"format_imports","","",27,null],[11,"format_import","","",27,{"inputs":[{"name":"self"},{"name":"visibility"},{"name":"viewpath"},{"name":"span"}],"output":null}],[0,"modules","rustfmt","",null,null],[5,"list_files","rustfmt::modules","List all the files containing modules of a crate. If a file is used twice in a crate, it appears only once.",null,{"inputs":[{"name":"crate"},{"name":"codemap"}],"output":{"generics":["pathbuf","mod"],"name":"btreemap"}}],[0,"rustfmt_diff","rustfmt","",null,null],[3,"Mismatch","rustfmt::rustfmt_diff","",null,null],[12,"line_number","","",28,null],[12,"lines","","",28,null],[4,"DiffLine","","",null,null],[13,"Context","","",29,null],[13,"Expected","","",29,null],[13,"Resulting","","",29,null],[5,"make_diff","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"usize"}],"output":{"generics":["mismatch"],"name":"vec"}}],[5,"print_diff","","",null,{"inputs":[{"generics":["mismatch"],"name":"vec"},{"name":"f"}],"output":null}],[5,"print_diff_basic","","",null,{"inputs":[{"generics":["mismatch"],"name":"vec"},{"name":"f"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"diffline"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"diffline"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"mismatch"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"mismatch"}],"output":{"name":"bool"}}],[11,"fmt","rustfmt","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"summary"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"summary"}}],[11,"has_operational_errors","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_parsing_errors","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_formatting_errors","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add_operational_error","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"add_parsing_error","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"add_formatting_error","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"add_diff","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"has_no_errors","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"summary"}],"output":null}],[11,"print_exit_codes","","",0,{"inputs":[],"output":null}],[8,"Spanned","","",null,null],[10,"span","","",30,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"indent"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"indent"}}],[11,"empty","","",1,{"inputs":[],"output":{"name":"indent"}}],[11,"block_only","","",1,{"inputs":[{"name":"self"}],"output":{"name":"indent"}}],[11,"block_indent","","",1,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"indent"}}],[11,"block_unindent","","",1,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"indent"}}],[11,"width","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_string","","",1,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"indent"}],"output":{"name":"indent"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"indent"}],"output":{"name":"indent"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"indent"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"indent"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"legacy","","`indent` is the indentation of the first line. The next lines should begin with at least `indent` spaces (except backwards indentation). The first line should not begin with indentation. `width` is the maximum number of characters on the last line (excluding `indent`). The width of other lines is not limited by `width`. Note that in reality, we sometimes use width for lines other than the last (i.e., we are conservative).",2,{"inputs":[{"name":"usize"},{"name":"indent"}],"output":{"name":"shape"}}],[11,"indented","","",2,{"inputs":[{"name":"indent"},{"name":"config"}],"output":{"name":"shape"}}],[11,"with_max_width","","",2,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"shape"}}],[11,"offset","","",2,{"inputs":[{"name":"usize"},{"name":"indent"},{"name":"usize"}],"output":{"name":"shape"}}],[11,"visual_indent","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"shape"}}],[11,"block_indent","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"shape"}}],[11,"block_left","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["shape"],"name":"option"}}],[11,"add_offset","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"shape"}}],[11,"block","","",2,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"sub_width","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["shape"],"name":"option"}}],[11,"shrink_left","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["shape"],"name":"option"}}],[11,"offset_left","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["shape"],"name":"option"}}],[11,"used_width","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"warning_count","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_warnings","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"impl_enum_serialize_and_deserialize","","",null,null],[14,"try_opt","","",null,null],[11,"doc_hint","rustfmt::file_lines","",25,{"inputs":[],"output":{"name":"string"}}]],"paths":[[3,"Summary"],[3,"Indent"],[3,"Shape"],[4,"ErrorKind"],[4,"Input"],[3,"PartialConfig"],[4,"Style"],[4,"NewlineStyle"],[4,"BraceStyle"],[4,"ControlBraceStyle"],[4,"ReturnIndent"],[4,"IndentStyle"],[4,"Density"],[4,"TypeDensity"],[4,"LicensePolicy"],[4,"MultilineStyle"],[4,"ReportTactic"],[4,"WriteMode"],[8,"ConfigType"],[3,"ConfigHelpItem"],[3,"Config"],[3,"ConfigSetter"],[3,"LineRange"],[8,"SpanUtils"],[8,"LineRangeUtils"],[3,"FileLines"],[3,"Files"],[3,"FmtVisitor"],[3,"Mismatch"],[4,"DiffLine"],[8,"Spanned"],[3,"FormatReport"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",null,null],[4,"Always","","Always run on scope exit.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"generics":["always"],"name":"scopeguard"}}],[8,"Strategy","","",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_run","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"scopeguard"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",null,null]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",0,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,null],[13,"Char","","The input contained a `char` that was not expected.",0,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,null],[13,"Unit","","The input contained a unit `()` that was not expected.",0,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,null],[13,"Seq","","The input contained a sequence that was not expected.",0,null],[13,"Map","","The input contained a map that was not expected.",0,null],[13,"Enum","","The input contained an enum that was not expected.",0,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",3,null],[11,"deserialize_enum","","",3,null],[11,"deserialize_identifier","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",4,null],[11,"deserialize_enum","","",4,null],[11,"deserialize_identifier","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_identifier","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_identifier","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_identifier","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_identifier","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_identifier","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_identifier","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_identifier","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_identifier","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",18,null],[11,"variant_seed","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",19,null],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Create a new borrowed deserializer from the given string.",20,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,null],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",23,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",26,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_element_seed","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_enum","","",27,null],[11,"deserialize_identifier","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",28,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",28,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",28,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",28,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",28,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",28,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",28,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",28,null],[11,"deserialize","","",28,{"inputs":[{"name":"d"}],"output":{"generics":["ignoredany"],"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",34,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",34,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",34,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",34,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",34,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_i128","","The input contains a `i128`.",34,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",34,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",34,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",34,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_u128","","The input contains a `u128`.",34,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",34,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",34,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",34,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",34,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",34,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",34,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,null],[10,"unit_variant","","Called when deserializing a variant with no values.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",39,null],[10,"into_deserializer","","Convert this value into a deserializer.",39,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a sequence element.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_element","","Serialize a tuple element.",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple struct field.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_field","","Serialize a tuple variant field.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_key","","Serialize a map key.",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct field.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",49,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,null],[10,"serialize_field","","Serialize a struct variant field.",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",null,null]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_hjson"] = {"doc":"JSON and serialization - TODO/hjson","items":[[0,"builder","serde_hjson","JSON Builders",null,null],[3,"ArrayBuilder","serde_hjson::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"unwrap","","Return the constructed `Value`.",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"push","","Insert a value into the array.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"arraybuilder"}}],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into this array.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into this array.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"unwrap","","Return the constructed `Value`.",1,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Insert a key-value pair into the object.",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"v"}],"output":{"name":"objectbuilder"}}],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into this object.",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into this object.",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[0,"de","serde_hjson","Hjson Deserialization",null,null],[3,"Deserializer","serde_hjson::de","A structure that deserializes Hjson into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple Hjson values.",null,null],[5,"from_iter","","Decodes a Hjson value from an iterator over an iterator `Iterator<Item=u8>`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a Hjson value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a Hjson value from a byte slice `&[u8]`.",null,null],[5,"from_str","","Decodes a Hjson value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the Hjson parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"new_for_root","","Creates the Hjson parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","Parses an enum as an object like `{\"$KEY\":$VALUE}`, where $VALUE is either a straight value, a `[..]`, or a `{..}`.",2,null],[11,"deserialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_struct_field","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_variant","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",2,null],[11,"new","","Returns an `Iterator` of decoded Hjson values from an iterator over `Iterator<Item=u8>`.",3,{"inputs":[{"name":"iter"}],"output":{"name":"streamdeserializer"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"error","serde_hjson","JSON Errors",null,null],[4,"ErrorCode","serde_hjson::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"Custom","","Catchall for syntax error messages",4,null],[13,"InvalidType","","Incorrect type from value",4,null],[13,"InvalidValue","","Incorrect value",4,null],[13,"InvalidLength","","Invalid length",4,null],[13,"UnknownVariant","","Unknown variant in an enum.",4,null],[13,"UnknownField","","Unknown field in struct.",4,null],[13,"MissingField","","Struct is missing a field.",4,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,null],[13,"ExpectedColon","","Expected this character to be a `':'`.",4,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `','` or a `]`.",4,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `','` or a `}`.",4,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,null],[13,"InvalidEscape","","Invalid hex escape code.",4,null],[13,"InvalidNumber","","Invalid number.",4,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,null],[13,"KeyMustBeAString","","Object key is not a string.",4,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,null],[13,"PunctuatorInQlString","","Found a punctuator character when excpecting a quoteless string.",4,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a value into JSON.",null,null],[13,"Syntax","","The JSON value had some syntatic error.",5,null],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,null],[13,"FromUtf8","","Some UTF8 error occurred while serializing or deserializing a value.",5,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",5,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","Raised when there is general error when deserializing a type.",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_hjson","Hjson Serialization",null,null],[3,"Serializer","serde_hjson::ser","A structure for serializing Rust values into Hjson.",null,null],[5,"escape_bytes","","Serializes and escapes a `&[u8]` into a Hjson string.",null,null],[5,"quote_str","","Serializes and escapes a `&str` into a Hjson string.",null,{"inputs":[{"name":"w"},{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[5,"ml_str","","Serializes and escapes a `&str` into a multiline Hjson string.",null,{"inputs":[{"name":"w"},{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[5,"escape_key","","Serializes and escapes a `&str` into a Hjson key.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a Hjson `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a Hjson `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_string","","Encode the specified struct into a Hjson `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters",null,null],[10,"open","","Called when serializing a '{' or '['.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[10,"comma","","Called when serializing a ','.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[10,"colon","","Called when serializing a ':'.",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[10,"close","","Called when serializing a '}' or ']'.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[10,"newline","","Newline with indent.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[10,"start_value","","Start a value.",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new Hjson serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new Hjson visitor whose output will be written to the writer specified.",7,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"serialize_bool","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_isize","","",7,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"serialize_i8","","",7,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","",7,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"serialize_i64","","",7,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_usize","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_u8","","",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","",7,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"serialize_u64","","",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","",7,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"serialize_f64","","",7,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_str","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","",7,null],[11,"serialize_unit","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","Serialize newtypes without an object wrapper.",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_none","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_some","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_seq","","",7,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_seq_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_seq_fixed_size","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_tuple_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_tuple_struct_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_tuple_variant_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_map","","",7,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_map_key","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_map_value","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_map_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_struct_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_struct_variant_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[0,"value","serde_hjson","JSON Value",null,null],[3,"Serializer","serde_hjson::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",8,null],[13,"Bool","","Represents a JSON Boolean",8,null],[13,"I64","","Represents a JSON signed integer",8,null],[13,"U64","","Represents a JSON unsigned integer",8,null],[13,"F64","","Represents a JSON floating point number",8,null],[13,"String","","Represents a JSON string",8,null],[13,"Array","","Represents a JSON array",8,null],[13,"Object","","Represents a JSON object",8,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[6,"Map","","Represents a key/value type.",null,null],[6,"MapIntoIter","","Represents the IntoIter type.",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key. Otherwise, returns None.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the `Value` associated with the final key.",8,null],[11,"lookup","","Deprecated: Use `Value.pointer()` and pointer syntax instead.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"search","","If the `Value` is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the `Value` is not an Object, returns None.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"fmt","","Serializes a json value into a string",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"new","","Construct a new `Serializer`.",10,{"inputs":[],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",10,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"serialize_bool","","",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_isize","","",10,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i8","","",10,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i16","","",10,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i32","","",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i64","","",10,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_usize","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u8","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u16","","",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u32","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u64","","",10,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f32","","",10,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f64","","",10,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_char","","",10,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_str","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_bytes","","",10,null],[11,"serialize_unit","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_variant","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_variant","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_none","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_some","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq","","",10,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"serialize_seq_elt","","",10,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq_end","","",10,{"inputs":[{"name":"self"},{"generics":["value"],"name":"vec"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq_fixed_size","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"serialize_tuple","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"serialize_tuple_elt","","",10,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_end","","",10,{"inputs":[{"name":"self"},{"generics":["value"],"name":"vec"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"serialize_tuple_struct_elt","","",10,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct_end","","",10,{"inputs":[{"name":"self"},{"generics":["value"],"name":"vec"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_variant","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["tuplevariantstate","error"],"name":"result"}}],[11,"serialize_tuple_variant_elt","","",10,{"inputs":[{"name":"self"},{"name":"tuplevariantstate"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_variant_end","","",10,{"inputs":[{"name":"self"},{"name":"tuplevariantstate"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map","","",10,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["mapstate","error"],"name":"result"}}],[11,"serialize_map_key","","",10,{"inputs":[{"name":"self"},{"name":"mapstate"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map_value","","",10,{"inputs":[{"name":"self"},{"name":"mapstate"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map_end","","",10,{"inputs":[{"name":"self"},{"name":"mapstate"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["mapstate","error"],"name":"result"}}],[11,"serialize_struct_elt","","",10,{"inputs":[{"name":"self"},{"name":"mapstate"},{"name":"str"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_end","","",10,{"inputs":[{"name":"self"},{"name":"mapstate"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_variant","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["structvariantstate","error"],"name":"result"}}],[11,"serialize_struct_variant_elt","","",10,{"inputs":[{"name":"self"},{"name":"structvariantstate"},{"name":"str"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_variant_end","","",10,{"inputs":[{"name":"self"},{"name":"structvariantstate"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",11,{"inputs":[{"name":"value"}],"output":{"name":"deserializer"}}],[11,"deserialize","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",11,null],[11,"deserialize_newtype_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[14,"forward_to_deserialize","serde_hjson","",null,null]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,{"inputs":[{"name":"self"}],"output":{"name":"streamdeserializer"}}],[11,"from_str","serde_json","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","One-based column number at which the error was detected.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"classify","","Categorizes the cause of this error.",5,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",6,null],[13,"Occupied","","An occupied Entry.",6,null],[11,"new","","Makes a new empty Map.",7,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",7,{"inputs":[{"name":"self"},{"name":"string"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"index_mut","","",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"key","","Returns a reference to this entry's key.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get","","Gets a reference to the value in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",7,null],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",16,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,null],[13,"Solidus","","An escaped solidus `/`",16,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"charescape"}],"output":{"name":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","Called after every array value.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","Called before every object key.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","Called after every object value.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",18,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",18,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"compactformatter"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"prettyformatter"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","",20,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","",20,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"begin_object_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i128","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u128","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"generics":["string","value"],"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"clone","serde_json","",2,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,{"inputs":[{"name":"f64"}],"output":{"generics":["number"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"generics":["number"],"name":"result"}}],[11,"deserialize_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i128","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u128","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serde_test"] = {"doc":"","items":[[3,"Serializer","serde_test","",null,null],[3,"Deserializer","","",null,null],[4,"Token","","",null,null],[13,"Bool","","",0,null],[13,"Isize","","",0,null],[13,"I8","","",0,null],[13,"I16","","",0,null],[13,"I32","","",0,null],[13,"I64","","",0,null],[13,"Usize","","",0,null],[13,"U8","","",0,null],[13,"U16","","",0,null],[13,"U32","","",0,null],[13,"U64","","",0,null],[13,"F32","","",0,null],[13,"F64","","",0,null],[13,"Char","","",0,null],[13,"Str","","",0,null],[13,"String","","",0,null],[13,"Bytes","","",0,null],[13,"Option","","",0,null],[13,"Unit","","",0,null],[13,"UnitStruct","","",0,null],[13,"StructNewType","","",0,null],[13,"EnumStart","","",0,null],[13,"EnumUnit","","",0,null],[13,"EnumNewType","","",0,null],[13,"SeqStart","","",0,null],[13,"SeqArrayStart","","",0,null],[13,"SeqSep","","",0,null],[13,"SeqEnd","","",0,null],[13,"TupleStart","","",0,null],[13,"TupleSep","","",0,null],[13,"TupleEnd","","",0,null],[13,"TupleStructStart","","",0,null],[13,"TupleStructSep","","",0,null],[13,"TupleStructEnd","","",0,null],[13,"MapStart","","",0,null],[13,"MapSep","","",0,null],[13,"MapEnd","","",0,null],[13,"StructStart","","",0,null],[13,"StructSep","","",0,null],[13,"StructEnd","","",0,null],[13,"EnumSeqStart","","",0,null],[13,"EnumSeqSep","","",0,null],[13,"EnumSeqEnd","","",0,null],[13,"EnumMapStart","","",0,null],[13,"EnumMapSep","","",0,null],[13,"EnumMapEnd","","",0,null],[4,"Error","","",null,null],[13,"Custom","","",1,null],[13,"InvalidValue","","",1,null],[13,"EndOfStream","","",1,null],[13,"InvalidType","","",1,null],[13,"InvalidLength","","",1,null],[13,"UnknownVariant","","",1,null],[13,"UnknownField","","",1,null],[13,"MissingField","","",1,null],[13,"DuplicateField","","",1,null],[13,"InvalidName","","",1,null],[13,"UnexpectedToken","","",1,null],[5,"assert_tokens","","",null,null],[5,"assert_ser_tokens","","",null,null],[5,"assert_ser_tokens_error","","Expect an error serializing `T`.",null,null],[5,"assert_de_tokens","","",null,null],[5,"assert_de_tokens_error","","Expect an error deserializing tokens into a `T`.",null,null],[11,"new","","",2,{"inputs":[{"name":"i"}],"output":{"name":"serializer"}}],[11,"next_token","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"serialize_unit","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_variant","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_variant","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_isize","","",2,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_usize","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_char","","",2,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_str","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_none","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_some","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq_elt","","",2,null],[11,"serialize_seq_end","","",2,null],[11,"serialize_seq_fixed_size","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_elt","","",2,null],[11,"serialize_tuple_end","","",2,null],[11,"serialize_newtype_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct_elt","","",2,null],[11,"serialize_tuple_struct_end","","",2,null],[11,"serialize_tuple_variant","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_variant_elt","","",2,null],[11,"serialize_tuple_variant_end","","",2,null],[11,"serialize_map","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map_key","","",2,null],[11,"serialize_map_value","","",2,null],[11,"serialize_map_end","","",2,null],[11,"serialize_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_elt","","",2,null],[11,"serialize_struct_end","","",2,null],[11,"serialize_struct_variant","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_variant_elt","","",2,null],[11,"serialize_struct_variant_end","","",2,null],[11,"serialize_bytes","","",2,null],[11,"new","","",3,{"inputs":[{"name":"i"}],"output":{"name":"deserializer"}}],[11,"next_token","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"deserialize_seq","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct_field","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","Hook into `Option` deserializing so we can treat `Unit` as a `None`, or a regular value as `Some(value)`.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",3,null],[11,"deserialize_unit_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_newtype_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_seq_fixed_size","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_tuple","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_tuple_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_struct","","",3,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"invalid_value","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",1,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"duplicate_field","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}]],"paths":[[4,"Token"],[4,"Error"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"Entry","","A handle to an occupied slot in the `Slab`",null,null],[3,"VacantEntry","","A handle to a vacant slot in the `Slab`",null,null],[3,"Iter","","An iterator over the values stored in the `Slab`",null,null],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",null,null],[11,"with_capacity","","Returns an empty `Slab` with the requested capacity",0,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"len","","Returns the number of values stored by the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Returns the total capacity of the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Slab` is storing no values",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"available","","Returns the number of available slots remaining in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_available","","Returns true if the `Slab` has available slots",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns true if the `Slab` contains a value for the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"get","","Get a reference to the value associated with the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the value associated with the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","Insert a value into the slab, returning the associated token",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"entry","","Returns a handle to an entry.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["entry"],"name":"option"}}],[11,"vacant_entry","","Returns a handle to a vacant entry.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vacantentry"],"name":"option"}}],[11,"remove","","Releases the given slot",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"retain","","Retain only the elements specified by the predicate.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"iter","","An iterator for visiting all elements stored in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","A mutable iterator for visiting all elements stored in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Empty the slab, by freeing all entries",0,{"inputs":[{"name":"self"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Slab`. Does nothing if the capacity is already sufficient.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"replace","","Replace the value stored in the entry",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace_with","","Apply the function to the current value, replacing it with the result of the function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"remove","","Remove and return the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Get a reference to the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_mut","","Convert the entry handle to a mutable reference",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"index","","Return the entry index",1,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"insert","","Insert a value into the entry",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"entry"}}],[11,"index","","Returns the entry index",2,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Slab"],[3,"Entry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,null],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array's elements.",2,null],[10,"size","","Returns the number of items the array can hold.",2,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","Returns a pointer to the first element of the array.",2,null],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct an empty vector",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","The number of elements stored in the vector",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","Append an item to the vector.",4,null],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",4,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,null],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,null],[11,"clear","","Remove all elements from the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,null],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"i"}],"output":null}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup","","Removes consecutive duplicate elements.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,null],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,null],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,null],[11,"resize","","Resizes the vector so that its length is equal to `len`.",4,null],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"write","","",4,null],[11,"write_all","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",4,null],[11,"from","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"extend_from_slice","","",4,null],[11,"push","","",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",4,null],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",null,null]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["stable_deref_trait"] = {"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null]],"paths":[]};
searchIndex["std_semaphore"] = {"doc":"","items":[[3,"Semaphore","std_semaphore","A counting, blocking, semaphore.",null,null],[3,"SemaphoreGuard","","An RAII guard which will release a resource acquired from a semaphore when dropped.",null,null],[11,"new","","Creates a new semaphore with the initial count specified.",0,{"inputs":[{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until it can do so.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","Release a resource from this semaphore.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to release the semaphore when dropped.",0,{"inputs":[{"name":"self"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Semaphore"],[3,"SemaphoreGuard"]]};
searchIndex["strings"] = {"doc":"","items":[[0,"string_buffer","strings","",null,null],[3,"StringBuffer","strings::string_buffer","",null,null],[12,"len","","",0,null],[3,"Chars","","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"stringbuffer"}}],[11,"with_capacity","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"stringbuffer"}}],[11,"push_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"cur_offset","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"truncate","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"chars","","",0,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["stringbuffer"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"stringbuffer"}],"output":{"name":"bool"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stringbuffer"}}],[0,"rope","strings","",null,null],[3,"RopeSlice","strings::rope","",null,null],[3,"Rope","","",null,null],[0,"src_rope","strings","",null,null],[3,"RopeSlice","strings::src_rope","",null,null],[3,"Rope","","",null,null],[11,"len","strings::rope","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"insert_copy","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"push","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"push_copy","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"replace","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"char"}],"output":null}],[11,"replace_str","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"slice","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"ropeslice"}}],[11,"full_slice","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ropeslice"}}],[11,"chars","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ropechars"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"rope"}}],[11,"from_string","","",2,{"inputs":[{"name":"string"}],"output":{"name":"rope"}}],[11,"insert","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"string"}],"output":null}],[11,"remove","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"iter_chars","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ropechars"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["rope"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"len","strings::src_rope","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"insert_copy","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"push","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"push_copy","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"replace","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"char"}],"output":null}],[11,"replace_str","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"slice","","",4,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"ropeslice"}}],[11,"full_slice","","",4,{"inputs":[{"name":"self"}],"output":{"name":"ropeslice"}}],[11,"chars","","",4,{"inputs":[{"name":"self"}],"output":{"name":"ropechars"}}],[11,"new","","",4,{"inputs":[],"output":{"name":"rope"}}],[11,"from_string","","",4,{"inputs":[{"name":"string"}],"output":{"name":"rope"}}],[11,"insert","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"string"}],"output":null}],[11,"src_insert","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"string"}],"output":null}],[11,"remove","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"src_remove","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"col_for_src_loc","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"src_slice","","",4,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"ropeslice"}}],[11,"iter_chars","","",5,{"inputs":[{"name":"self"}],"output":{"name":"ropechars"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["rope"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"StringBuffer"],[3,"Chars"],[3,"Rope"],[3,"RopeSlice"],[3,"Rope"],[3,"RopeSlice"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",10,null],[12,"left","","",10,null],[12,"op","","",10,null],[12,"right","","",10,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",11,null],[12,"func","","",11,null],[12,"paren_token","","",11,null],[12,"args","","",11,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",12,null],[12,"expr","","",12,null],[12,"as_token","","",12,null],[12,"ty","","",12,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",13,null],[12,"expr","","",13,null],[12,"bracket_token","","",13,null],[12,"index","","",13,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",14,null],[12,"lit","","",14,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",15,null],[12,"paren_token","","",15,null],[12,"expr","","",15,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",16,null],[12,"qself","","",16,null],[12,"path","","",16,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",17,null],[12,"op","","",17,null],[12,"expr","","",17,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",18,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",19,null],[12,"span","","",19,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",20,null],[12,"lt_token","","",20,null],[12,"lifetimes","","",20,null],[12,"gt_token","","",20,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",21,null],[12,"const_token","","",21,null],[12,"ident","","",21,null],[12,"colon_token","","",21,null],[12,"ty","","",21,null],[12,"eq_token","","",21,null],[12,"default","","",21,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",22,null],[12,"params","","",22,null],[12,"gt_token","","",22,null],[12,"where_clause","","",22,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",23,null],[12,"lifetime","","",23,null],[12,"colon_token","","",23,null],[12,"bounds","","",23,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",24,null],[12,"eq_token","","",24,null],[12,"rhs_ty","","",24,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",25,null],[12,"colon_token","","",25,null],[12,"bounds","","",25,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",26,null],[12,"bounded_ty","","The type being bounded",26,null],[12,"colon_token","","",26,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",26,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",27,null],[12,"modifier","","",27,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",27,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",27,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",28,null],[12,"ident","","",28,null],[12,"colon_token","","",28,null],[12,"bounds","","",28,null],[12,"eq_token","","",28,null],[12,"default","","",28,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",29,null],[12,"predicates","","",29,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",30,null],[12,"ident","","",30,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",31,null],[12,"span","","",31,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",32,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",33,null],[12,"bang_token","","",33,null],[12,"delimiter","","",33,null],[12,"tts","","",33,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",34,null],[12,"brace_token","","",34,null],[12,"variants","","",34,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",35,null],[12,"fields","","",35,null],[12,"semi_token","","",35,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",36,null],[12,"fields","","",36,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",37,null],[12,"vis","","Visibility of the struct or enum.",37,null],[12,"ident","","Name of the struct or enum.",37,null],[12,"generics","","Generics required to complete the definition.",37,null],[12,"data","","Data within the struct or enum.",37,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",38,null],[12,"name","","",38,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",39,null],[12,"ty","","",39,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",40,null],[12,"elem","","",40,null],[12,"semi_token","","",40,null],[12,"len","","",40,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",41,null],[12,"abi","","",41,null],[12,"fn_token","","",41,null],[12,"lifetimes","","",41,null],[12,"paren_token","","",41,null],[12,"inputs","","",41,null],[12,"variadic","","",41,null],[12,"output","","",41,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",42,null],[12,"elem","","",42,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",43,null],[12,"bounds","","",43,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",44,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",45,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",46,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",47,null],[12,"elem","","",47,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",48,null],[12,"path","","",48,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",49,null],[12,"const_token","","",49,null],[12,"mutability","","",49,null],[12,"elem","","",49,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",50,null],[12,"lifetime","","",50,null],[12,"mutability","","",50,null],[12,"elem","","",50,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",51,null],[12,"elem","","",51,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",52,null],[12,"bounds","","",52,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",53,null],[12,"elems","","",53,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",54,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",55,null],[12,"1","","",55,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",56,null],[12,"lt_token","","",56,null],[12,"args","","",56,null],[12,"gt_token","","",56,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",57,null],[12,"eq_token","","",57,null],[12,"ty","","",57,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",58,null],[12,"inputs","","`(A, B)`",58,null],[12,"output","","`C`",58,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",59,null],[12,"segments","","",59,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",60,null],[12,"arguments","","",60,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",61,null],[12,"ty","","",61,null],[12,"position","","",61,null],[12,"as_token","","",61,null],[12,"gt_token","","",61,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",62,null],[13,"Inner","","",62,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",63,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",63,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",63,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",64,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",64,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",65,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",65,null],[13,"Unit","","Unit struct or unit variant such as `None`.",65,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",66,null],[13,"Crate","","A crate-level visibility: `crate`.",66,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",66,null],[13,"Inherited","","An inherited visibility, which usually means private.",66,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",67,null],[13,"InPlace","","A placement expression: `place <- value`.",67,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",67,null],[13,"Call","","A function call expression: `invoke(a, b)`.",67,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",67,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",67,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",67,null],[13,"Unary","","A unary operation: `!x`, `*x`.",67,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",67,null],[13,"Cast","","A cast expression: `foo as f64`.",67,null],[13,"Type","","A type ascription expression: `foo: f64`.",67,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",67,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",67,null],[13,"While","","A while loop: `while expr { ... }`.",67,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",67,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",67,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",67,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",67,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",67,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",67,null],[13,"Block","","A blocked scope: `{ ... }`.",67,null],[13,"Assign","","An assignment expression: `a = compute()`.",67,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",67,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",67,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",67,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",67,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",67,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",67,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",67,null],[13,"Continue","","A `continue`, with an optional label.",67,null],[13,"Return","","A `return`, with an optional value to be returned.",67,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",67,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",67,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",67,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",67,null],[13,"Group","","An expression contained within invisible delimiters.",67,null],[13,"Try","","A try-expression: `expr?`.",67,null],[13,"Catch","","A catch expression: `do catch { ... }`.",67,null],[13,"Yield","","A yield expression: `yield expr`.",67,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",67,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",68,null],[13,"Unnamed","","An unnamed field like `self.0`.",68,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",69,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",69,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",69,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",70,null],[13,"Maybe","","",70,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",71,null],[13,"Lifetime","","",71,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",72,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",72,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",72,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",73,null],[13,"F64","","",73,null],[13,"None","","",73,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",74,null],[13,"I16","","",74,null],[13,"I32","","",74,null],[13,"I64","","",74,null],[13,"I128","","",74,null],[13,"Isize","","",74,null],[13,"U8","","",74,null],[13,"U16","","",74,null],[13,"U32","","",74,null],[13,"U64","","",74,null],[13,"U128","","",74,null],[13,"Usize","","",74,null],[13,"None","","",74,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",75,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",75,null],[13,"Byte","","A byte literal: `b'f'`.",75,null],[13,"Char","","A character literal: `'a'`.",75,null],[13,"Int","","An integer literal: `1` or `1u16`.",75,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",75,null],[13,"Bool","","A boolean literal: `true` or `false`.",75,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",75,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",76,null],[13,"Raw","","A raw string like `r##\"data\"##`.",76,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",77,null],[13,"Brace","","",77,null],[13,"Bracket","","",77,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",78,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",78,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",78,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",79,null],[13,"Sub","","The `-` operator (subtraction)",79,null],[13,"Mul","","The `*` operator (multiplication)",79,null],[13,"Div","","The `/` operator (division)",79,null],[13,"Rem","","The `%` operator (modulus)",79,null],[13,"And","","The `&&` operator (logical and)",79,null],[13,"Or","","The `||` operator (logical or)",79,null],[13,"BitXor","","The `^` operator (bitwise xor)",79,null],[13,"BitAnd","","The `&` operator (bitwise and)",79,null],[13,"BitOr","","The `|` operator (bitwise or)",79,null],[13,"Shl","","The `<<` operator (shift left)",79,null],[13,"Shr","","The `>>` operator (shift right)",79,null],[13,"Eq","","The `==` operator (equality)",79,null],[13,"Lt","","The `<` operator (less than)",79,null],[13,"Le","","The `<=` operator (less than or equal to)",79,null],[13,"Ne","","The `!=` operator (not equal to)",79,null],[13,"Ge","","The `>=` operator (greater than or equal to)",79,null],[13,"Gt","","The `>` operator (greater than)",79,null],[13,"AddEq","","The `+=` operator",79,null],[13,"SubEq","","The `-=` operator",79,null],[13,"MulEq","","The `*=` operator",79,null],[13,"DivEq","","The `/=` operator",79,null],[13,"RemEq","","The `%=` operator",79,null],[13,"BitXorEq","","The `^=` operator",79,null],[13,"BitAndEq","","The `&=` operator",79,null],[13,"BitOrEq","","The `|=` operator",79,null],[13,"ShlEq","","The `<<=` operator",79,null],[13,"ShrEq","","The `>>=` operator",79,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",80,null],[13,"Not","","The `!` operator for logical inversion",80,null],[13,"Neg","","The `-` operator for negation",80,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",81,null],[13,"Wild","","Argument not given a name, matched with `_`.",81,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",82,null],[13,"Type","","A particular type is returned.",82,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",83,null],[13,"Array","","A fixed size array type: `[T; n]`.",83,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",83,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",83,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",83,null],[13,"Never","","The never type: `!`.",83,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",83,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",83,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",83,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",83,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",83,null],[13,"Group","","A type contained within invisible delimiters.",83,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",83,null],[13,"Macro","","A macro in the type position.",83,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",83,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",84,null],[13,"Type","","A type argument.",84,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",84,null],[13,"Const","","A const expression. Must be inside of a block.",84,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",85,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",85,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",85,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"0","","",86,null],[3,"Apostrophe","","`'`",null,null],[12,"0","","",87,null],[3,"Add","","`+`",null,null],[12,"0","","",88,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",89,null],[3,"And","","`&`",null,null],[12,"0","","",90,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",91,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",92,null],[3,"At","","`@`",null,null],[12,"0","","",93,null],[3,"Bang","","`!`",null,null],[12,"0","","",94,null],[3,"Caret","","`^`",null,null],[12,"0","","",95,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",96,null],[3,"Colon","","`:`",null,null],[12,"0","","",97,null],[3,"Colon2","","`::`",null,null],[12,"0","","",98,null],[3,"Comma","","`,`",null,null],[12,"0","","",99,null],[3,"Div","","`/`",null,null],[12,"0","","",100,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",101,null],[3,"Dollar","","`$`",null,null],[12,"0","","",102,null],[3,"Dot","","`.`",null,null],[12,"0","","",103,null],[3,"Dot2","","`..`",null,null],[12,"0","","",104,null],[3,"Dot3","","`...`",null,null],[12,"0","","",105,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",106,null],[3,"Eq","","`=`",null,null],[12,"0","","",107,null],[3,"EqEq","","`==`",null,null],[12,"0","","",108,null],[3,"Ge","","`>=`",null,null],[12,"0","","",109,null],[3,"Gt","","`>`",null,null],[12,"0","","",110,null],[3,"Le","","`<=`",null,null],[12,"0","","",111,null],[3,"Lt","","`<`",null,null],[12,"0","","",112,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",113,null],[3,"Ne","","`!=`",null,null],[12,"0","","",114,null],[3,"Or","","`|`",null,null],[12,"0","","",115,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",116,null],[3,"OrOr","","`||`",null,null],[12,"0","","",117,null],[3,"Pound","","`#`",null,null],[12,"0","","",118,null],[3,"Question","","`?`",null,null],[12,"0","","",119,null],[3,"RArrow","","`->`",null,null],[12,"0","","",120,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",121,null],[3,"Rem","","`%`",null,null],[12,"0","","",122,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",123,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",124,null],[3,"Semi","","`;`",null,null],[12,"0","","",125,null],[3,"Shl","","`<<`",null,null],[12,"0","","",126,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",127,null],[3,"Shr","","`>>`",null,null],[12,"0","","",128,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",129,null],[3,"Star","","`*`",null,null],[12,"0","","",130,null],[3,"Sub","","`-`",null,null],[12,"0","","",131,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",132,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",133,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",134,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",135,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",136,null],[3,"As","","`as`",null,null],[12,"0","","",137,null],[3,"Auto","","`auto`",null,null],[12,"0","","",138,null],[3,"Box","","`box`",null,null],[12,"0","","",139,null],[3,"Break","","`break`",null,null],[12,"0","","",140,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",141,null],[3,"Catch","","`catch`",null,null],[12,"0","","",142,null],[3,"Const","","`const`",null,null],[12,"0","","",143,null],[3,"Continue","","`continue`",null,null],[12,"0","","",144,null],[3,"Crate","","`crate`",null,null],[12,"0","","",145,null],[3,"Default","","`default`",null,null],[12,"0","","",146,null],[3,"Do","","`do`",null,null],[12,"0","","",147,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",148,null],[3,"Else","","`else`",null,null],[12,"0","","",149,null],[3,"Enum","","`enum`",null,null],[12,"0","","",150,null],[3,"Extern","","`extern`",null,null],[12,"0","","",151,null],[3,"Fn","","`fn`",null,null],[12,"0","","",152,null],[3,"For","","`for`",null,null],[12,"0","","",153,null],[3,"If","","`if`",null,null],[12,"0","","",154,null],[3,"Impl","","`impl`",null,null],[12,"0","","",155,null],[3,"In","","`in`",null,null],[12,"0","","",156,null],[3,"Let","","`let`",null,null],[12,"0","","",157,null],[3,"Loop","","`loop`",null,null],[12,"0","","",158,null],[3,"Macro","","`macro`",null,null],[12,"0","","",159,null],[3,"Match","","`match`",null,null],[12,"0","","",160,null],[3,"Mod","","`mod`",null,null],[12,"0","","",161,null],[3,"Move","","`move`",null,null],[12,"0","","",162,null],[3,"Mut","","`mut`",null,null],[12,"0","","",163,null],[3,"Pub","","`pub`",null,null],[12,"0","","",164,null],[3,"Ref","","`ref`",null,null],[12,"0","","",165,null],[3,"Return","","`return`",null,null],[12,"0","","",166,null],[3,"Self_","","`self`",null,null],[12,"0","","",167,null],[3,"Static","","`static`",null,null],[12,"0","","",168,null],[3,"Struct","","`struct`",null,null],[12,"0","","",169,null],[3,"Super","","`super`",null,null],[12,"0","","",170,null],[3,"Trait","","`trait`",null,null],[12,"0","","",171,null],[3,"Type","","`type`",null,null],[12,"0","","",172,null],[3,"Union","","`union`",null,null],[12,"0","","",173,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",174,null],[3,"Use","","`use`",null,null],[12,"0","","",175,null],[3,"Where","","`where`",null,null],[12,"0","","",176,null],[3,"While","","`while`",null,null],[12,"0","","",177,null],[3,"Yield","","`yield`",null,null],[12,"0","","",178,null],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"underscore"}}],[11,"new","","",86,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",86,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"to_tokens","","",86,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",86,{"inputs":[{"name":"cursor"}],"output":{"generics":["underscore"],"name":"presult"}}],[11,"description","","",86,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"apostrophe"}}],[11,"new","","",87,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"to_tokens","","",87,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",87,{"inputs":[{"name":"cursor"}],"output":{"generics":["apostrophe"],"name":"presult"}}],[11,"description","","",87,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"add"}}],[11,"new","","",88,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",88,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"addeq"}}],[11,"new","","",89,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",89,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"and"}}],[11,"new","","",90,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",90,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"andand"}}],[11,"new","","",91,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",91,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"andeq"}}],[11,"new","","",92,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",92,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"at"}}],[11,"new","","",93,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",93,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"bang"}}],[11,"new","","",94,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",94,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"caret"}}],[11,"new","","",95,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",95,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"careteq"}}],[11,"new","","",96,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",96,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"colon"}}],[11,"new","","",97,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",97,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"colon2"}}],[11,"new","","",98,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",98,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"comma"}}],[11,"new","","",99,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",99,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"div"}}],[11,"new","","",100,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",100,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"diveq"}}],[11,"new","","",101,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",101,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",101,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"dollar"}}],[11,"new","","",102,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",102,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"dot"}}],[11,"new","","",103,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",103,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"dot2"}}],[11,"new","","",104,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",104,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"dot3"}}],[11,"new","","",105,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"dotdoteq"}}],[11,"new","","",106,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",106,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"eq"}}],[11,"new","","",107,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"eqeq"}}],[11,"new","","",108,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",108,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",108,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"ge"}}],[11,"new","","",109,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",109,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"gt"}}],[11,"new","","",110,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",110,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"le"}}],[11,"new","","",111,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",111,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"lt"}}],[11,"new","","",112,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",112,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"muleq"}}],[11,"new","","",113,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",113,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"ne"}}],[11,"new","","",114,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",114,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"or"}}],[11,"new","","",115,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"oreq"}}],[11,"new","","",116,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",116,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"oror"}}],[11,"new","","",117,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",117,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"pound"}}],[11,"new","","",118,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",118,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"question"}}],[11,"new","","",119,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",119,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"rarrow"}}],[11,"new","","",120,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",120,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"larrow"}}],[11,"new","","",121,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",121,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",121,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"rem"}}],[11,"new","","",122,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",122,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",122,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"remeq"}}],[11,"new","","",123,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",123,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"fatarrow"}}],[11,"new","","",124,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",124,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",124,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"semi"}}],[11,"new","","",125,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"shl"}}],[11,"new","","",126,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",126,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"shleq"}}],[11,"new","","",127,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"shr"}}],[11,"new","","",128,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",128,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"shreq"}}],[11,"new","","",129,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",129,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"new","","",130,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",130,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"sub"}}],[11,"new","","",131,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"subeq"}}],[11,"new","","",132,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",132,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"to_tokens","","",88,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",88,{"inputs":[{"name":"cursor"}],"output":{"generics":["add"],"name":"presult"}}],[11,"description","","",88,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",89,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",89,{"inputs":[{"name":"cursor"}],"output":{"generics":["addeq"],"name":"presult"}}],[11,"description","","",89,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",90,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",90,{"inputs":[{"name":"cursor"}],"output":{"generics":["and"],"name":"presult"}}],[11,"description","","",90,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",91,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",91,{"inputs":[{"name":"cursor"}],"output":{"generics":["andand"],"name":"presult"}}],[11,"description","","",91,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",92,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",92,{"inputs":[{"name":"cursor"}],"output":{"generics":["andeq"],"name":"presult"}}],[11,"description","","",92,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",93,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",93,{"inputs":[{"name":"cursor"}],"output":{"generics":["at"],"name":"presult"}}],[11,"description","","",93,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",94,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",94,{"inputs":[{"name":"cursor"}],"output":{"generics":["bang"],"name":"presult"}}],[11,"description","","",94,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",95,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",95,{"inputs":[{"name":"cursor"}],"output":{"generics":["caret"],"name":"presult"}}],[11,"description","","",95,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",96,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",96,{"inputs":[{"name":"cursor"}],"output":{"generics":["careteq"],"name":"presult"}}],[11,"description","","",96,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",97,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",97,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon"],"name":"presult"}}],[11,"description","","",97,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",98,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",98,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon2"],"name":"presult"}}],[11,"description","","",98,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",99,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",99,{"inputs":[{"name":"cursor"}],"output":{"generics":["comma"],"name":"presult"}}],[11,"description","","",99,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",100,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",100,{"inputs":[{"name":"cursor"}],"output":{"generics":["div"],"name":"presult"}}],[11,"description","","",100,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",101,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",101,{"inputs":[{"name":"cursor"}],"output":{"generics":["diveq"],"name":"presult"}}],[11,"description","","",101,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",102,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",102,{"inputs":[{"name":"cursor"}],"output":{"generics":["dollar"],"name":"presult"}}],[11,"description","","",102,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",103,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",103,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot"],"name":"presult"}}],[11,"description","","",103,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",104,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",104,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot2"],"name":"presult"}}],[11,"description","","",104,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",105,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",105,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot3"],"name":"presult"}}],[11,"description","","",105,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",106,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",106,{"inputs":[{"name":"cursor"}],"output":{"generics":["dotdoteq"],"name":"presult"}}],[11,"description","","",106,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",107,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",107,{"inputs":[{"name":"cursor"}],"output":{"generics":["eq"],"name":"presult"}}],[11,"description","","",107,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",108,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",108,{"inputs":[{"name":"cursor"}],"output":{"generics":["eqeq"],"name":"presult"}}],[11,"description","","",108,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",109,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",109,{"inputs":[{"name":"cursor"}],"output":{"generics":["ge"],"name":"presult"}}],[11,"description","","",109,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",110,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",110,{"inputs":[{"name":"cursor"}],"output":{"generics":["gt"],"name":"presult"}}],[11,"description","","",110,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",111,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",111,{"inputs":[{"name":"cursor"}],"output":{"generics":["le"],"name":"presult"}}],[11,"description","","",111,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",112,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",112,{"inputs":[{"name":"cursor"}],"output":{"generics":["lt"],"name":"presult"}}],[11,"description","","",112,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",113,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",113,{"inputs":[{"name":"cursor"}],"output":{"generics":["muleq"],"name":"presult"}}],[11,"description","","",113,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",114,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",114,{"inputs":[{"name":"cursor"}],"output":{"generics":["ne"],"name":"presult"}}],[11,"description","","",114,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",115,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",115,{"inputs":[{"name":"cursor"}],"output":{"generics":["or"],"name":"presult"}}],[11,"description","","",115,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",116,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",116,{"inputs":[{"name":"cursor"}],"output":{"generics":["oreq"],"name":"presult"}}],[11,"description","","",116,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",117,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",117,{"inputs":[{"name":"cursor"}],"output":{"generics":["oror"],"name":"presult"}}],[11,"description","","",117,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",118,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",118,{"inputs":[{"name":"cursor"}],"output":{"generics":["pound"],"name":"presult"}}],[11,"description","","",118,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",119,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",119,{"inputs":[{"name":"cursor"}],"output":{"generics":["question"],"name":"presult"}}],[11,"description","","",119,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",120,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",120,{"inputs":[{"name":"cursor"}],"output":{"generics":["rarrow"],"name":"presult"}}],[11,"description","","",120,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",121,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",121,{"inputs":[{"name":"cursor"}],"output":{"generics":["larrow"],"name":"presult"}}],[11,"description","","",121,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",122,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",122,{"inputs":[{"name":"cursor"}],"output":{"generics":["rem"],"name":"presult"}}],[11,"description","","",122,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",123,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",123,{"inputs":[{"name":"cursor"}],"output":{"generics":["remeq"],"name":"presult"}}],[11,"description","","",123,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",124,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",124,{"inputs":[{"name":"cursor"}],"output":{"generics":["fatarrow"],"name":"presult"}}],[11,"description","","",124,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",125,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",125,{"inputs":[{"name":"cursor"}],"output":{"generics":["semi"],"name":"presult"}}],[11,"description","","",125,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",126,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",126,{"inputs":[{"name":"cursor"}],"output":{"generics":["shl"],"name":"presult"}}],[11,"description","","",126,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",127,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",127,{"inputs":[{"name":"cursor"}],"output":{"generics":["shleq"],"name":"presult"}}],[11,"description","","",127,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",128,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",128,{"inputs":[{"name":"cursor"}],"output":{"generics":["shr"],"name":"presult"}}],[11,"description","","",128,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",129,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",129,{"inputs":[{"name":"cursor"}],"output":{"generics":["shreq"],"name":"presult"}}],[11,"description","","",129,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",130,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",130,{"inputs":[{"name":"cursor"}],"output":{"generics":["star"],"name":"presult"}}],[11,"description","","",130,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",131,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",131,{"inputs":[{"name":"cursor"}],"output":{"generics":["sub"],"name":"presult"}}],[11,"description","","",131,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",132,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",132,{"inputs":[{"name":"cursor"}],"output":{"generics":["subeq"],"name":"presult"}}],[11,"description","","",132,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"brace"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",133,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",133,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",133,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"bracket"}}],[11,"default","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",134,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",134,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",134,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"paren"}}],[11,"default","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",135,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",135,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",135,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"default","","",136,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",136,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",136,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",136,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"as"}}],[11,"default","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",137,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",137,{"inputs":[{"name":"cursor"}],"output":{"generics":["as"],"name":"presult"}}],[11,"description","","",137,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",137,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"auto"}}],[11,"default","","",138,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",138,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",138,{"inputs":[{"name":"cursor"}],"output":{"generics":["auto"],"name":"presult"}}],[11,"description","","",138,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",138,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","","",139,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",139,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",139,{"inputs":[{"name":"cursor"}],"output":{"generics":["box"],"name":"presult"}}],[11,"description","","",139,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",139,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"default","","",140,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",140,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",140,{"inputs":[{"name":"cursor"}],"output":{"generics":["break"],"name":"presult"}}],[11,"description","","",140,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",140,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"capself"}}],[11,"default","","",141,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",141,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",141,{"inputs":[{"name":"cursor"}],"output":{"generics":["capself"],"name":"presult"}}],[11,"description","","",141,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",141,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"catch"}}],[11,"default","","",142,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",142,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",142,{"inputs":[{"name":"cursor"}],"output":{"generics":["catch"],"name":"presult"}}],[11,"description","","",142,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",142,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"const"}}],[11,"default","","",143,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",143,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",143,{"inputs":[{"name":"cursor"}],"output":{"generics":["const"],"name":"presult"}}],[11,"description","","",143,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",143,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"continue"}}],[11,"default","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",144,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",144,{"inputs":[{"name":"cursor"}],"output":{"generics":["continue"],"name":"presult"}}],[11,"description","","",144,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",144,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"default","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",145,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",145,{"inputs":[{"name":"cursor"}],"output":{"generics":["crate"],"name":"presult"}}],[11,"description","","",145,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",145,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"default","","",146,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",146,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",146,{"inputs":[{"name":"cursor"}],"output":{"generics":["default"],"name":"presult"}}],[11,"description","","",146,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",146,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"do"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",147,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",147,{"inputs":[{"name":"cursor"}],"output":{"generics":["do"],"name":"presult"}}],[11,"description","","",147,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",147,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"dyn"}}],[11,"default","","",148,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",148,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",148,{"inputs":[{"name":"cursor"}],"output":{"generics":["dyn"],"name":"presult"}}],[11,"description","","",148,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",148,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"else"}}],[11,"default","","",149,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",149,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",149,{"inputs":[{"name":"cursor"}],"output":{"generics":["else"],"name":"presult"}}],[11,"description","","",149,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",149,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",150,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",150,{"inputs":[{"name":"cursor"}],"output":{"generics":["enum"],"name":"presult"}}],[11,"description","","",150,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",150,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"extern"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",151,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",151,{"inputs":[{"name":"cursor"}],"output":{"generics":["extern"],"name":"presult"}}],[11,"description","","",151,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",151,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"fn"}}],[11,"default","","",152,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",152,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",152,{"inputs":[{"name":"cursor"}],"output":{"generics":["fn"],"name":"presult"}}],[11,"description","","",152,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",152,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"for"}}],[11,"default","","",153,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",153,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",153,{"inputs":[{"name":"cursor"}],"output":{"generics":["for"],"name":"presult"}}],[11,"description","","",153,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",153,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"if"}}],[11,"default","","",154,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",154,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",154,{"inputs":[{"name":"cursor"}],"output":{"generics":["if"],"name":"presult"}}],[11,"description","","",154,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",154,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"default","","",155,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",155,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",155,{"inputs":[{"name":"cursor"}],"output":{"generics":["impl"],"name":"presult"}}],[11,"description","","",155,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",155,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"in"}}],[11,"default","","",156,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",156,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",156,{"inputs":[{"name":"cursor"}],"output":{"generics":["in"],"name":"presult"}}],[11,"description","","",156,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",156,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"let"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",157,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",157,{"inputs":[{"name":"cursor"}],"output":{"generics":["let"],"name":"presult"}}],[11,"description","","",157,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",157,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"loop"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",158,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",158,{"inputs":[{"name":"cursor"}],"output":{"generics":["loop"],"name":"presult"}}],[11,"description","","",158,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",158,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",159,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",159,{"inputs":[{"name":"cursor"}],"output":{"generics":["macro"],"name":"presult"}}],[11,"description","","",159,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",159,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"default","","",160,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",160,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",160,{"inputs":[{"name":"cursor"}],"output":{"generics":["match"],"name":"presult"}}],[11,"description","","",160,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",160,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"default","","",161,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",161,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",161,{"inputs":[{"name":"cursor"}],"output":{"generics":["mod"],"name":"presult"}}],[11,"description","","",161,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",161,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"default","","",162,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",162,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",162,{"inputs":[{"name":"cursor"}],"output":{"generics":["move"],"name":"presult"}}],[11,"description","","",162,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",162,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"mut"}}],[11,"default","","",163,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",163,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",163,{"inputs":[{"name":"cursor"}],"output":{"generics":["mut"],"name":"presult"}}],[11,"description","","",163,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",163,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"pub"}}],[11,"default","","",164,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",164,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",164,{"inputs":[{"name":"cursor"}],"output":{"generics":["pub"],"name":"presult"}}],[11,"description","","",164,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",164,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",165,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",165,{"inputs":[{"name":"cursor"}],"output":{"generics":["ref"],"name":"presult"}}],[11,"description","","",165,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",165,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"return"}}],[11,"default","","",166,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",166,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",166,{"inputs":[{"name":"cursor"}],"output":{"generics":["return"],"name":"presult"}}],[11,"description","","",166,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",166,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"self_"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",167,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",167,{"inputs":[{"name":"cursor"}],"output":{"generics":["self_"],"name":"presult"}}],[11,"description","","",167,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",167,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"static"}}],[11,"default","","",168,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",168,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",168,{"inputs":[{"name":"cursor"}],"output":{"generics":["static"],"name":"presult"}}],[11,"description","","",168,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",168,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"default","","",169,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",169,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",169,{"inputs":[{"name":"cursor"}],"output":{"generics":["struct"],"name":"presult"}}],[11,"description","","",169,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",169,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"super"}}],[11,"default","","",170,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",170,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",170,{"inputs":[{"name":"cursor"}],"output":{"generics":["super"],"name":"presult"}}],[11,"description","","",170,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",170,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"trait"}}],[11,"default","","",171,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",171,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",171,{"inputs":[{"name":"cursor"}],"output":{"generics":["trait"],"name":"presult"}}],[11,"description","","",171,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",171,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"default","","",172,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",172,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",172,{"inputs":[{"name":"cursor"}],"output":{"generics":["type"],"name":"presult"}}],[11,"description","","",172,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",172,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"default","","",173,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",173,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",173,{"inputs":[{"name":"cursor"}],"output":{"generics":["union"],"name":"presult"}}],[11,"description","","",173,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",173,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"unsafe"}}],[11,"default","","",174,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",174,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",174,{"inputs":[{"name":"cursor"}],"output":{"generics":["unsafe"],"name":"presult"}}],[11,"description","","",174,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",174,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"default","","",175,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",175,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",175,{"inputs":[{"name":"cursor"}],"output":{"generics":["use"],"name":"presult"}}],[11,"description","","",175,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",175,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"where"}}],[11,"default","","",176,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",176,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",176,{"inputs":[{"name":"cursor"}],"output":{"generics":["where"],"name":"presult"}}],[11,"description","","",176,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",176,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"while"}}],[11,"default","","",177,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",177,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",177,{"inputs":[{"name":"cursor"}],"output":{"generics":["while"],"name":"presult"}}],[11,"description","","",177,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",177,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"yield"}}],[11,"default","","",178,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",178,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",178,{"inputs":[{"name":"cursor"}],"output":{"generics":["yield"],"name":"presult"}}],[11,"description","","",178,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",178,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"from","syn","",179,{"inputs":[{"name":"self_"}],"output":{"name":"ident"}}],[11,"from","","",179,{"inputs":[{"name":"capself"}],"output":{"name":"ident"}}],[11,"from","","",179,{"inputs":[{"name":"super"}],"output":{"name":"ident"}}],[11,"from","","",179,{"inputs":[{"name":"crate"}],"output":{"name":"ident"}}],[11,"parse_inner","","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_outer","","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"inputs":[{"name":"self"}],"output":{"generics":["meta"],"name":"option"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"meta"}}],[11,"from","","",63,{"inputs":[{"name":"ident"}],"output":{"name":"meta"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"metalist"}}],[11,"from","","",63,{"inputs":[{"name":"metalist"}],"output":{"name":"meta"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"metanamevalue"}}],[11,"from","","",63,{"inputs":[{"name":"metanamevalue"}],"output":{"name":"meta"}}],[11,"to_tokens","","",63,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"name","","Returns the identifier that begins this structured meta item.",63,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"nestedmeta"}}],[11,"from","","",64,{"inputs":[{"name":"meta"}],"output":{"name":"nestedmeta"}}],[11,"from","","",64,{"inputs":[{"name":"lit"}],"output":{"name":"nestedmeta"}}],[11,"to_tokens","","",64,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",6,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",6,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",4,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",5,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_named","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_unnamed","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",66,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",66,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fieldsnamed"}}],[11,"from","","",65,{"inputs":[{"name":"fieldsnamed"}],"output":{"name":"fields"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fieldsunnamed"}}],[11,"from","","",65,{"inputs":[{"name":"fieldsunnamed"}],"output":{"name":"fields"}}],[11,"to_tokens","","",65,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",65,{"inputs":[{"name":"self"}],"output":{"generics":["field"],"name":"iter"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vispublic"}}],[11,"from","","",66,{"inputs":[{"name":"vispublic"}],"output":{"name":"visibility"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"viscrate"}}],[11,"from","","",66,{"inputs":[{"name":"viscrate"}],"output":{"name":"visibility"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"visrestricted"}}],[11,"from","","",66,{"inputs":[{"name":"visrestricted"}],"output":{"name":"visibility"}}],[11,"to_tokens","","",66,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",67,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",67,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",14,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",14,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",15,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",15,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",16,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",16,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",68,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"exprbox"}}],[11,"from","","",67,{"inputs":[{"name":"exprbox"}],"output":{"name":"expr"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"exprinplace"}}],[11,"from","","",67,{"inputs":[{"name":"exprinplace"}],"output":{"name":"expr"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"exprarray"}}],[11,"from","","",67,{"inputs":[{"name":"exprarray"}],"output":{"name":"expr"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"exprcall"}}],[11,"from","","",67,{"inputs":[{"name":"exprcall"}],"output":{"name":"expr"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"exprmethodcall"}}],[11,"from","","",67,{"inputs":[{"name":"exprmethodcall"}],"output":{"name":"expr"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"exprtuple"}}],[11,"from","","",67,{"inputs":[{"name":"exprtuple"}],"output":{"name":"expr"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"exprbinary"}}],[11,"from","","",67,{"inputs":[{"name":"exprbinary"}],"output":{"name":"expr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"exprunary"}}],[11,"from","","",67,{"inputs":[{"name":"exprunary"}],"output":{"name":"expr"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"exprlit"}}],[11,"from","","",67,{"inputs":[{"name":"exprlit"}],"output":{"name":"expr"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exprcast"}}],[11,"from","","",67,{"inputs":[{"name":"exprcast"}],"output":{"name":"expr"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"exprtype"}}],[11,"from","","",67,{"inputs":[{"name":"exprtype"}],"output":{"name":"expr"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"exprif"}}],[11,"from","","",67,{"inputs":[{"name":"exprif"}],"output":{"name":"expr"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"expriflet"}}],[11,"from","","",67,{"inputs":[{"name":"expriflet"}],"output":{"name":"expr"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"exprwhile"}}],[11,"from","","",67,{"inputs":[{"name":"exprwhile"}],"output":{"name":"expr"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"exprwhilelet"}}],[11,"from","","",67,{"inputs":[{"name":"exprwhilelet"}],"output":{"name":"expr"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"exprforloop"}}],[11,"from","","",67,{"inputs":[{"name":"exprforloop"}],"output":{"name":"expr"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"exprloop"}}],[11,"from","","",67,{"inputs":[{"name":"exprloop"}],"output":{"name":"expr"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"exprmatch"}}],[11,"from","","",67,{"inputs":[{"name":"exprmatch"}],"output":{"name":"expr"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"exprclosure"}}],[11,"from","","",67,{"inputs":[{"name":"exprclosure"}],"output":{"name":"expr"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"exprunsafe"}}],[11,"from","","",67,{"inputs":[{"name":"exprunsafe"}],"output":{"name":"expr"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"exprblock"}}],[11,"from","","",67,{"inputs":[{"name":"exprblock"}],"output":{"name":"expr"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"exprassign"}}],[11,"from","","",67,{"inputs":[{"name":"exprassign"}],"output":{"name":"expr"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"exprassignop"}}],[11,"from","","",67,{"inputs":[{"name":"exprassignop"}],"output":{"name":"expr"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"exprfield"}}],[11,"from","","",67,{"inputs":[{"name":"exprfield"}],"output":{"name":"expr"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exprindex"}}],[11,"from","","",67,{"inputs":[{"name":"exprindex"}],"output":{"name":"expr"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"exprrange"}}],[11,"from","","",67,{"inputs":[{"name":"exprrange"}],"output":{"name":"expr"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"exprpath"}}],[11,"from","","",67,{"inputs":[{"name":"exprpath"}],"output":{"name":"expr"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"exprreference"}}],[11,"from","","",67,{"inputs":[{"name":"exprreference"}],"output":{"name":"expr"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"exprbreak"}}],[11,"from","","",67,{"inputs":[{"name":"exprbreak"}],"output":{"name":"expr"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"exprcontinue"}}],[11,"from","","",67,{"inputs":[{"name":"exprcontinue"}],"output":{"name":"expr"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"exprreturn"}}],[11,"from","","",67,{"inputs":[{"name":"exprreturn"}],"output":{"name":"expr"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"exprmacro"}}],[11,"from","","",67,{"inputs":[{"name":"exprmacro"}],"output":{"name":"expr"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"exprstruct"}}],[11,"from","","",67,{"inputs":[{"name":"exprstruct"}],"output":{"name":"expr"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"exprrepeat"}}],[11,"from","","",67,{"inputs":[{"name":"exprrepeat"}],"output":{"name":"expr"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"exprparen"}}],[11,"from","","",67,{"inputs":[{"name":"exprparen"}],"output":{"name":"expr"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"exprgroup"}}],[11,"from","","",67,{"inputs":[{"name":"exprgroup"}],"output":{"name":"expr"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"exprtry"}}],[11,"from","","",67,{"inputs":[{"name":"exprtry"}],"output":{"name":"expr"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"exprcatch"}}],[11,"from","","",67,{"inputs":[{"name":"exprcatch"}],"output":{"name":"expr"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"expryield"}}],[11,"from","","",67,{"inputs":[{"name":"expryield"}],"output":{"name":"expr"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"exprverbatim"}}],[11,"from","","",67,{"inputs":[{"name":"exprverbatim"}],"output":{"name":"expr"}}],[11,"to_tokens","","",67,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"member"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"index"}}],[11,"parse","","",22,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",22,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",69,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",69,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",23,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",23,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",20,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",20,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",28,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",28,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",71,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",71,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",27,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",27,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",70,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",70,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",21,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",21,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",29,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",29,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",72,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",72,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",211,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",212,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",213,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"default","","",22,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"genericparam"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"typeparam"}}],[11,"from","","",69,{"inputs":[{"name":"typeparam"}],"output":{"name":"genericparam"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"from","","",69,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"genericparam"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"constparam"}}],[11,"from","","",69,{"inputs":[{"name":"constparam"}],"output":{"name":"genericparam"}}],[11,"to_tokens","","",69,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",22,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"implgenerics"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"typegenerics"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",22,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",212,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"boundlifetimes"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"boundlifetimes"}}],[11,"new","","",23,{"inputs":[{"name":"lifetime"}],"output":{"name":"self"}}],[11,"from","","",28,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"typeparambound"}}],[11,"from","","",71,{"inputs":[{"name":"traitbound"}],"output":{"name":"typeparambound"}}],[11,"from","","",71,{"inputs":[{"name":"lifetime"}],"output":{"name":"typeparambound"}}],[11,"to_tokens","","",71,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"traitbound"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"predicatetype"}}],[11,"from","","",72,{"inputs":[{"name":"predicatetype"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"predicatelifetime"}}],[11,"from","","",72,{"inputs":[{"name":"predicatelifetime"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"predicateeq"}}],[11,"from","","",72,{"inputs":[{"name":"predicateeq"}],"output":{"name":"wherepredicate"}}],[11,"to_tokens","","",72,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",30,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",30,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"new","","",30,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"hash","","",30,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"parse","","",75,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",75,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",214,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",214,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",215,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",215,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",216,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",216,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",217,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",217,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",218,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",218,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",219,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",219,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",31,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",31,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",214,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",215,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",216,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",217,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",218,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",219,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",75,{"inputs":[{"name":"literal"}],"output":{"name":"self"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"litstr"}}],[11,"from","","",75,{"inputs":[{"name":"litstr"}],"output":{"name":"lit"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"litbytestr"}}],[11,"from","","",75,{"inputs":[{"name":"litbytestr"}],"output":{"name":"lit"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"litbyte"}}],[11,"from","","",75,{"inputs":[{"name":"litbyte"}],"output":{"name":"lit"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"litchar"}}],[11,"from","","",75,{"inputs":[{"name":"litchar"}],"output":{"name":"lit"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"litint"}}],[11,"from","","",75,{"inputs":[{"name":"litint"}],"output":{"name":"lit"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"litfloat"}}],[11,"from","","",75,{"inputs":[{"name":"litfloat"}],"output":{"name":"lit"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"litbool"}}],[11,"from","","",75,{"inputs":[{"name":"litbool"}],"output":{"name":"lit"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"litverbatim"}}],[11,"from","","",75,{"inputs":[{"name":"litverbatim"}],"output":{"name":"lit"}}],[11,"to_tokens","","",75,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"new","","",214,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",214,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",214,{"inputs":[{"name":"self"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"span","","",214,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",215,null],[11,"value","","",215,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"span","","",215,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",215,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",216,{"inputs":[{"name":"u8"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",216,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"span","","",216,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",216,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",217,{"inputs":[{"name":"char"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",217,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"span","","",217,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",217,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",218,{"inputs":[{"name":"u64"},{"name":"intsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",218,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"suffix","","",218,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"span","","",218,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",218,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",219,{"inputs":[{"name":"f64"},{"name":"floatsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",219,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"suffix","","",219,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"span","","",219,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",219,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"span","","",32,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",32,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"parse","","",33,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",33,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"macrodelimiter"}}],[11,"parse","","",37,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",37,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"datastruct"}}],[11,"from","","",78,{"inputs":[{"name":"datastruct"}],"output":{"name":"data"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dataenum"}}],[11,"from","","",78,{"inputs":[{"name":"dataenum"}],"output":{"name":"data"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dataunion"}}],[11,"from","","",78,{"inputs":[{"name":"dataunion"}],"output":{"name":"data"}}],[11,"parse_binop","","",79,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",80,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",80,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",79,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",80,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"parse","","",83,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",83,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",83,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",51,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",51,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",40,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",40,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",49,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",49,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",50,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",50,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",41,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",41,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",46,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",46,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",44,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",44,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",53,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",53,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",45,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",45,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",48,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",48,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",82,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",82,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",82,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",52,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",52,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",52,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",43,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",43,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",42,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",42,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",47,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",39,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",39,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",81,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",81,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",38,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",38,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",82,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",81,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"typeslice"}}],[11,"from","","",83,{"inputs":[{"name":"typeslice"}],"output":{"name":"type"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"typearray"}}],[11,"from","","",83,{"inputs":[{"name":"typearray"}],"output":{"name":"type"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"typeptr"}}],[11,"from","","",83,{"inputs":[{"name":"typeptr"}],"output":{"name":"type"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"typereference"}}],[11,"from","","",83,{"inputs":[{"name":"typereference"}],"output":{"name":"type"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"typebarefn"}}],[11,"from","","",83,{"inputs":[{"name":"typebarefn"}],"output":{"name":"type"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"typenever"}}],[11,"from","","",83,{"inputs":[{"name":"typenever"}],"output":{"name":"type"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"typetuple"}}],[11,"from","","",83,{"inputs":[{"name":"typetuple"}],"output":{"name":"type"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"typepath"}}],[11,"from","","",83,{"inputs":[{"name":"typepath"}],"output":{"name":"type"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"typetraitobject"}}],[11,"from","","",83,{"inputs":[{"name":"typetraitobject"}],"output":{"name":"type"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"typeimpltrait"}}],[11,"from","","",83,{"inputs":[{"name":"typeimpltrait"}],"output":{"name":"type"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"typeparen"}}],[11,"from","","",83,{"inputs":[{"name":"typeparen"}],"output":{"name":"type"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"typegroup"}}],[11,"from","","",83,{"inputs":[{"name":"typegroup"}],"output":{"name":"type"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"typeinfer"}}],[11,"from","","",83,{"inputs":[{"name":"typeinfer"}],"output":{"name":"type"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"typemacro"}}],[11,"from","","",83,{"inputs":[{"name":"typemacro"}],"output":{"name":"type"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"typeverbatim"}}],[11,"from","","",83,{"inputs":[{"name":"typeverbatim"}],"output":{"name":"type"}}],[11,"to_tokens","","",83,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"barefnargname"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"returntype"}}],[11,"parse","","",59,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",59,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",84,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",56,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",56,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",58,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",58,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",60,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",60,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",57,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",57,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_mod_style","","",59,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",59,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",85,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",84,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"global","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"pathtokens"}}],[11,"from","","",59,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"from","","",60,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"patharguments"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"genericargument"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",220,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",221,{"inputs":[],"output":{"name":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",221,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",221,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"option"}}],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",221,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",221,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",222,null],[13,"End","","",222,null],[11,"to_tokens","","",223,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",222,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",223,{"inputs":[],"output":{"name":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",223,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",223,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",223,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",223,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"insert","","Inserts an element at position `index`.",223,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"from_iter","","",223,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",223,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",223,null],[11,"default","","",223,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",224,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",224,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",225,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",226,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",227,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",228,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",229,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",229,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",222,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",222,null],[11,"index","","",223,null],[11,"index_mut","","",223,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[0,"ext","","Extension traits that are made available within the `call!` parser.",null,null],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",null,null],[10,"parse_any","","Parses any identifier including keywords.",230,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_any","syn","",179,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[6,"PResult","syn::synom","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",231,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","A short name of the type being parsed.",231,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",232,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",232,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",232,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",232,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse","syn","",179,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",179,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",233,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":null}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":null}],[5,"visit_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":null}],[5,"visit_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":null}],[5,"visit_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":null}],[5,"visit_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":null}],[5,"visit_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":null}],[5,"visit_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":null}],[5,"visit_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":null}],[5,"visit_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":null}],[5,"visit_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":null}],[5,"visit_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":null}],[5,"visit_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":null}],[5,"visit_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":null}],[5,"visit_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"visit_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"visit_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":null}],[5,"visit_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":null}],[5,"visit_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":null}],[5,"visit_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":null}],[5,"visit_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":null}],[5,"visit_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":null}],[5,"visit_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":null}],[5,"visit_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":null}],[5,"visit_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":null}],[5,"visit_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"visit_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":null}],[5,"visit_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":null}],[5,"visit_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":null}],[5,"visit_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":null}],[5,"visit_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":null}],[5,"visit_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"visit_ident","","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":null}],[5,"visit_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":null}],[5,"visit_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"visit_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"visit_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":null}],[5,"visit_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":null}],[5,"visit_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":null}],[5,"visit_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":null}],[5,"visit_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":null}],[5,"visit_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":null}],[5,"visit_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":null}],[5,"visit_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":null}],[5,"visit_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":null}],[5,"visit_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":null}],[5,"visit_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":null}],[5,"visit_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":null}],[5,"visit_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":null}],[5,"visit_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":null}],[5,"visit_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":null}],[5,"visit_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":null}],[5,"visit_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":null}],[5,"visit_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"visit_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":null}],[5,"visit_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"visit_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":null}],[5,"visit_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":null}],[5,"visit_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":null}],[5,"visit_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":null}],[5,"visit_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":null}],[5,"visit_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":null}],[5,"visit_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":null}],[5,"visit_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":null}],[5,"visit_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":null}],[5,"visit_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":null}],[5,"visit_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":null}],[5,"visit_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":null}],[5,"visit_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":null}],[5,"visit_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":null}],[5,"visit_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":null}],[5,"visit_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":null}],[5,"visit_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":null}],[5,"visit_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":null}],[5,"visit_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":null}],[5,"visit_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":null}],[5,"visit_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":null}],[5,"visit_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":null}],[5,"visit_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":null}],[5,"visit_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":null}],[5,"visit_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":null}],[5,"visit_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":null}],[5,"visit_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":null}],[5,"visit_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":null}],[5,"visit_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":null}],[5,"visit_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":null}],[5,"visit_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":null}],[5,"visit_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[5,"visit_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":null}],[5,"visit_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",234,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_attr_style","","",234,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",234,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",234,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",234,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",234,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",234,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_bound_lifetimes","","",234,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",234,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",234,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",234,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",234,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",234,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",234,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",234,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_binary","","",234,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_call","","",234,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",234,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_index","","",234,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",234,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_paren","","",234,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",234,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_unary","","",234,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_field","","",234,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_fields","","",234,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",234,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",234,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_generic_argument","","",234,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_param","","",234,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",234,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",234,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_index","","",234,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",234,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",234,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",234,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",234,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",234,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",234,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",234,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",234,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",234,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_macro","","",234,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",234,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",234,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",234,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",234,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",234,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_nested_meta","","",234,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_path","","",234,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",234,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",234,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",234,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",234,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",234,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_return_type","","",234,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",234,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_trait_bound","","",234,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",234,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_type","","",234,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",234,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",234,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",234,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",234,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",234,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",234,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",234,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",234,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",234,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",234,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",234,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",234,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",234,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",234,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",234,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",234,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",234,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_variant","","",234,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",234,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",234,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",234,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",234,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",234,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",234,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[11,"fmt","syn::synom","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",235,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"custom_keyword","","Parse the given word as a keyword.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",179,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"ident"}}],[11,"span","","Returns the span of this `Ident`.",179,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",179,null],[11,"partial_cmp","","",179,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"cmp","","",179,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"hash","","",179,null],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_tokens","","",179,null],[11,"visit_abi","syn::visit","",234,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_attr_style","","",234,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",234,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",234,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",234,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",234,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",234,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_bound_lifetimes","","",234,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",234,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",234,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",234,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",234,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",234,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",234,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",234,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_binary","","",234,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_call","","",234,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",234,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_index","","",234,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",234,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_paren","","",234,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",234,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_unary","","",234,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_field","","",234,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_fields","","",234,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",234,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",234,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_generic_argument","","",234,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_param","","",234,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",234,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",234,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_index","","",234,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",234,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",234,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",234,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",234,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",234,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",234,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",234,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",234,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",234,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_macro","","",234,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",234,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",234,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",234,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",234,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",234,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_nested_meta","","",234,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_path","","",234,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",234,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",234,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",234,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",234,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",234,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_return_type","","",234,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",234,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_trait_bound","","",234,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",234,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_type","","",234,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",234,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",234,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",234,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",234,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",234,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",234,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",234,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",234,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",234,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",234,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",234,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",234,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",234,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",234,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",234,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",234,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",234,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_variant","","",234,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",234,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",234,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",234,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",234,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",234,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",234,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprField"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["syntex_errors"] = {"doc":"","items":[[3,"CodeSuggestion","syntex_errors","",null,null],[12,"substitution_parts","","Each substitute can have multiple variants due to multiple applicable suggestions",0,null],[12,"msg","","",0,null],[3,"Substitution","","See the docs on `CodeSuggestion::substitutions`",null,null],[12,"span","","",1,null],[12,"substitutions","","",1,null],[3,"FatalError","","Used as a return value to signify a fatal error occurred. (It is also used as the argument to panic at the moment, but that will eventually not be true.)",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug` or `.span_bug` rather than a failed assertion, etc.",null,null],[3,"Handler","","A handler deals with errors; certain errors (fatal, bug, unimpl) may cause immediate exit, others log errors for later reporting.",null,null],[12,"can_emit_warnings","","",2,null],[4,"RenderSpan","","",null,null],[13,"FullSpan","","A FullSpan renders with both with an initial line for the message, prefixed by file:linenum, followed by a summary of the source code covered by the span.",3,null],[13,"Suggestion","","A suggestion renders with both with an initial line for the message, prefixed by file:linenum, followed by a summary of hypothetical source code, where each `String` is spliced into the lines in place of the code covered by each span.",3,null],[4,"Level","","",null,null],[13,"Bug","","",4,null],[13,"Fatal","","",4,null],[13,"PhaseFatal","","",4,null],[13,"Error","","",4,null],[13,"Warning","","",4,null],[13,"Note","","",4,null],[13,"Help","","",4,null],[13,"Cancelled","","",4,null],[5,"expect","","",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"m"}],"output":{"name":"t"}}],[0,"diagnostic","","",null,null],[3,"Diagnostic","syntex_errors::diagnostic","",null,null],[12,"level","","",5,null],[12,"message","","",5,null],[12,"code","","",5,null],[12,"span","","",5,null],[12,"children","","",5,null],[12,"suggestions","","",5,null],[3,"SubDiagnostic","","For example a note attached to an error.",null,null],[12,"level","","",6,null],[12,"message","","",6,null],[12,"span","","",6,null],[12,"render_span","","",6,null],[3,"DiagnosticStyledString","","",null,null],[12,"0","","",7,null],[4,"StringPart","","",null,null],[13,"Normal","","",8,null],[13,"Highlighted","","",8,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"subdiagnostic"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"subdiagnostic"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"subdiagnostic"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"diagnosticstyledstring"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"diagnosticstyledstring"}],"output":{"name":"bool"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"diagnosticstyledstring"}}],[11,"push_normal","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"push_highlighted","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"normal","","",7,{"inputs":[{"name":"s"}],"output":{"name":"diagnosticstyledstring"}}],[11,"highlighted","","",7,{"inputs":[{"name":"s"}],"output":{"name":"diagnosticstyledstring"}}],[11,"content","","",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"stringpart"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"stringpart"}],"output":{"name":"bool"}}],[11,"content","","",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","",5,{"inputs":[{"name":"level"},{"name":"str"}],"output":{"name":"self"}}],[11,"new_with_code","","",5,{"inputs":[{"name":"level"},{"generics":["string"],"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or cancelled or it will panic when dropped). BEWARE: if this DiagnosticBuilder is an error, then creating it will bump the error count on the Handler and cancelling it won't undo that. If you want to decrement the error count you should use `Handler::cancel`.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"cancelled","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fatal","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",5,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"self"}}],[11,"note_expected_found","","",5,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"}],"output":{"name":"self"}}],[11,"note_expected_found_extra","","",5,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"highlighted_note","","",5,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"span_note","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"warn","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_warn","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_help","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",5,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestions","","",5,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"generics":["string"],"name":"vec"}],"output":{"name":"self"}}],[11,"set_span","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"message","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"styled_message","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"level","","",5,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"copy_details_not_message","","Used by a lint. Copies over all details but the \"main message\".",5,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":null}],[11,"message","","",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"styled_message","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"diagnostic_builder","syntex_errors","",null,null],[3,"DiagnosticBuilder","syntex_errors::diagnostic_builder","Used for emitting structured error messages and other diagnostic information.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"emit","","Emit the diagnostic.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",9,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"self"}}],[11,"note_expected_found","","",9,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"}],"output":{"name":"self"}}],[11,"note_expected_found_extra","","",9,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_note","","",9,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"warn","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_warn","","",9,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_help","","",9,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_suggestion","","",9,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestions","","",9,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"generics":["string"],"name":"vec"}],"output":{"name":"self"}}],[11,"set_span","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",9,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"new","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",9,{"inputs":[{"name":"handler"},{"name":"level"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"new_with_code","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",9,{"inputs":[{"name":"handler"},{"name":"level"},{"generics":["string"],"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"into_diagnostic","","",9,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[0,"emitter","syntex_errors","",null,null],[3,"EmitterWriter","syntex_errors::emitter","",null,null],[3,"BufferedWriter","","Buffered writer gives us a way on Unix to buffer up an entire error message before we output it.  This helps to prevent interleaving of multiple error messages when multiple compiler processes error simultaneously",null,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",10,null],[13,"Always","","",10,null],[13,"Never","","",10,null],[4,"Destination","","",null,null],[13,"Terminal","","",11,null],[13,"BufferedTerminal","","",11,null],[13,"Raw","","",11,null],[6,"BufferedStderr","","",null,null],[17,"MAX_HIGHLIGHT_LINES","","maximum number of lines we will print for each error; arbitrary.",null,null],[17,"MAX_SUGGESTIONS","","maximum number of suggestions to be shown",null,null],[8,"Emitter","","Emitter trait for emitting errors.",null,null],[10,"emit","","Emit a structured diagnostic.",12,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"emit","","",13,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"colorconfig"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"colorconfig"}],"output":{"name":"bool"}}],[11,"stderr","","",13,{"inputs":[{"name":"colorconfig"},{"generics":["rc"],"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"new","","",13,{"inputs":[{"generics":["write"],"name":"box"},{"generics":["rc"],"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",11,null],[11,"flush","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"snippet","syntex_errors","",null,null],[3,"SnippetData","syntex_errors::snippet","",null,null],[3,"FileInfo","","",null,null],[3,"Line","","",null,null],[12,"line_index","","",15,null],[12,"annotations","","",15,null],[3,"MultilineAnnotation","","",null,null],[12,"depth","","",16,null],[12,"line_start","","",16,null],[12,"line_end","","",16,null],[12,"start_col","","",16,null],[12,"end_col","","",16,null],[12,"is_primary","","",16,null],[12,"label","","",16,null],[3,"Annotation","","",null,null],[12,"start_col","","Start column, 0-based indexing -- counting characters, not utf-8 bytes. Note that it is important that this field goes first, so that when we sort, we sort orderings by start column.",17,null],[12,"end_col","","End column within the line (exclusive)",17,null],[12,"is_primary","","Is this annotation derived from primary span",17,null],[12,"label","","Optional label to display adjacent to the annotation.",17,null],[12,"annotation_type","","Is this a single line, multiline or multiline span minimized down to a smaller span.",17,null],[3,"StyledString","","",null,null],[12,"text","","",18,null],[12,"style","","",18,null],[4,"AnnotationType","","",null,null],[13,"Singleline","","Annotation under a single line of code",19,null],[13,"Multiline","","Annotation enclosing the first and last character of a multiline span",19,null],[13,"MultilineStart","","Annotation marking the first character of a fully shown multiline span",19,null],[13,"MultilineEnd","","Annotation marking the last character of a fully shown multiline span",19,null],[13,"MultilineLine","","Line at the left enclosing the lines of a fully shown multiline span",19,null],[4,"Style","","",null,null],[13,"HeaderMsg","","",20,null],[13,"FileNameStyle","","",20,null],[13,"LineAndColumn","","",20,null],[13,"LineNumber","","",20,null],[13,"Quotation","","",20,null],[13,"UnderlinePrimary","","",20,null],[13,"UnderlineSecondary","","",20,null],[13,"LabelPrimary","","",20,null],[13,"LabelSecondary","","",20,null],[13,"OldSchoolNoteText","","",20,null],[13,"OldSchoolNote","","",20,null],[13,"NoStyle","","",20,null],[13,"ErrorCode","","",20,null],[13,"Level","","",20,null],[13,"Highlight","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"snippetdata"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fileinfo"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"ordering"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"multilineannotation"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"ordering"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"increase_depth","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"as_start","","",16,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"as_end","","",16,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"as_line","","",16,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"annotationtype"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"ordering"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"ordering"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"is_line","","Wether this annotation is a vertical line placeholder.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multiline","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_label","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"takes_space","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[0,"registry","syntex_errors","",null,null],[3,"Registry","syntex_errors::registry","",null,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"registry"}}],[11,"new","","",23,null],[11,"find_description","","",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[0,"styled_buffer","syntex_errors","",null,null],[3,"StyledBuffer","syntex_errors::styled_buffer","",null,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"styledbuffer"}}],[11,"copy_tabs","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"render","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"vec"}}],[11,"putc","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"char"},{"name":"style"}],"output":null}],[11,"puts","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"set_style","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"style"}],"output":null}],[11,"prepend","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"append","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"num_lines","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"CodeMapper","syntex_errors","",null,null],[10,"lookup_char_pos","","",25,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[10,"span_to_lines","","",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[10,"span_to_string","","",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[10,"span_to_filename","","",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[10,"merge_spans","","",25,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"renderspan"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"renderspan"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"renderspan"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"codesuggestion"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"codesuggestion"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"codesuggestion"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"substitution"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"substitution"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"substitution"}],"output":{"name":"bool"}}],[11,"substitution_spans","","Returns the number of substitutions",0,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"splice_lines","","Returns the assembled code suggestions.",0,{"inputs":[{"name":"self"},{"name":"codemapper"}],"output":{"generics":["string"],"name":"vec"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"fatalerror"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"explicitbug"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"with_tty_emitter","","",2,{"inputs":[{"name":"colorconfig"},{"name":"bool"},{"name":"bool"},{"generics":["rc"],"name":"option"}],"output":{"name":"handler"}}],[11,"with_emitter","","",2,{"inputs":[{"name":"bool"},{"name":"bool"},{"generics":["emitter"],"name":"box"}],"output":{"name":"handler"}}],[11,"set_continue_after_error","","",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"struct_dummy","","",2,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err_with_code","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"cancel","","",2,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"span_fatal","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_with_code","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_err","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"mut_span_err","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_err_with_code","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_warn","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_warn_with_code","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_bug","","",2,null],[11,"delay_span_bug","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_bug_no_panic","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_note_without_error","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_note_diag","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_unimpl","","",2,null],[11,"fatal","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"warn","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"note_without_error","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"bug","","",2,null],[11,"unimpl","","",2,null],[11,"bump_err_count","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"err_count","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"emit","","",2,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"level"}],"output":null}],[11,"emit_with_code","","",2,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"str"},{"name":"level"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"color","","",4,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"to_str","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"CodeSuggestion"],[3,"Substitution"],[3,"Handler"],[4,"RenderSpan"],[4,"Level"],[3,"Diagnostic"],[3,"SubDiagnostic"],[3,"DiagnosticStyledString"],[4,"StringPart"],[3,"DiagnosticBuilder"],[4,"ColorConfig"],[4,"Destination"],[8,"Emitter"],[3,"EmitterWriter"],[3,"BufferedWriter"],[3,"Line"],[3,"MultilineAnnotation"],[3,"Annotation"],[3,"StyledString"],[4,"AnnotationType"],[4,"Style"],[3,"SnippetData"],[3,"FileInfo"],[3,"Registry"],[3,"StyledBuffer"],[8,"CodeMapper"],[3,"FatalError"],[3,"ExplicitBug"]]};
searchIndex["syntex_pos"] = {"doc":"The source positions and related helper functions","items":[[3,"Span","syntex_pos","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",0,null],[12,"hi","","",0,null],[12,"ctxt","","Information about where the macro came from, if this piece of code was created by a macro expansion.",0,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[3,"SpanLabel","","",null,null],[12,"span","","The span we are going to include in the final snippet.",1,null],[12,"is_primary","","Is this a primary span? This is the \"locus\" of the message, and is indicated with a `^^^^` underline, versus `----`.",1,null],[12,"label","","What label should we attach to this span (if any)?",1,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",2,null],[12,"bytes","","The number of bytes, >=2",2,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn't originate from files has names between angle brackets by convention, e.g. `<anon>`",3,null],[12,"name_was_remapped","","True if the `name` field above has been modified by -Zremap-path-prefix",3,null],[12,"crate_of_origin","","Indicates which crate this FileMap was imported from.",3,null],[12,"src","","The complete source code",3,null],[12,"start_pos","","The start position of this source in the CodeMap",3,null],[12,"end_pos","","The end position of this source in the CodeMap",3,null],[12,"lines","","Locations of lines beginnings in the source code",3,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",3,null],[3,"BytePos","","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",4,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset is not equivalent to a character offset. The CodeMap will convert BytePos values to CharPos values as necessary.",null,null],[12,"0","","",5,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",6,null],[12,"line","","The (1-based) line number",6,null],[12,"col","","The (0-based) column offset",6,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",7,null],[12,"line","","",7,null],[12,"col","","",7,null],[12,"file","","",7,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",8,null],[12,"line","","",8,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",9,null],[12,"pos","","",9,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",10,null],[12,"start_col","","Column in line where span begins, starting from 0.",10,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",10,null],[3,"FileLines","","",null,null],[12,"file","","",11,null],[12,"lines","","",11,null],[3,"MacroBacktrace","","",null,null],[12,"call_site","","span where macro was applied to generate this code",12,null],[12,"macro_decl_name","","name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")",12,null],[12,"def_site_span","","span where macro was defined (if known)",12,null],[3,"DistinctSources","","",null,null],[12,"begin","","",13,null],[12,"end","","",13,null],[3,"MalformedCodemapPositions","","",null,null],[12,"name","","",14,null],[12,"source_len","","",14,null],[12,"begin_pos","","",14,null],[12,"end_pos","","",14,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",15,null],[13,"DistinctSources","","",15,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",16,null],[13,"DistinctSources","","",16,null],[13,"MalformedForCodemap","","",16,null],[13,"SourceNotAvailable","","",16,null],[12,"filename","syntex_pos::SpanSnippetError","",16,null],[0,"hygiene","syntex_pos","Machinery for hygienic macros, inspired by the MTWT[1] paper.",null,null],[3,"SyntaxContext","syntex_pos::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",17,null],[12,"prev_ctxt","","",17,null],[12,"modern","","",17,null],[3,"Mark","","A mark is a unique id associated with a macro expansion.",null,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",18,null],[12,"callee","","Information about the expansion.",18,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",19,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",19,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",19,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] ",20,null],[13,"MacroBang","","e.g. `format!()`",20,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",20,null],[5,"clear_markings","","",null,{"inputs":[],"output":null}],[17,"NO_EXPANSION","","",null,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"ordering"}}],[11,"hash","","",21,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontextdata"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"syntaxcontextdata"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"mark"}}],[11,"fresh","","",22,{"inputs":[{"name":"mark"}],"output":{"name":"self"}}],[11,"root","","The mark of the theoretical expansion that generates freshly parsed, unexpanded AST.",22,{"inputs":[],"output":{"name":"self"}}],[11,"as_u32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_u32","","",22,{"inputs":[{"name":"u32"}],"output":{"name":"mark"}}],[11,"expn_info","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["expninfo"],"name":"option"}}],[11,"set_expn_info","","",22,{"inputs":[{"name":"self"},{"name":"expninfo"}],"output":null}],[11,"modern","","",22,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"is_modern","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_modern","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"is_descendant_of","","",22,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"empty","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"apply_mark","","Extend a syntax context with a given mark",21,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"syntaxcontext"}}],[11,"remove_mark","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"adjust","","Adjust this context for resolution in a scope created by the given expansion. For example, consider the following three resolutions of `f`: `rust mod foo { pub fn f() {} } // `f`'s `SyntaxContext` is empty. m!(f); macro m($f:ident) { mod bar { pub fn f() {} // `f`'s `SyntaxContext` has a single `Mark` from `m`. pub fn $f() {} // `$f`'s `SyntaxContext` is empty. } foo::f(); // `f`'s `SyntaxContext` has a single `Mark` from `m` //^ Since `mod foo` is outside this expansion, `adjust` removes the mark from `f`, //| and it resolves to `::foo::f`. bar::f(); // `f`'s `SyntaxContext` has a single `Mark` from `m` //^ Since `mod bar` not outside this expansion, `adjust` does not change `f`, //| and it resolves to `::bar::f`. bar::$f(); // `f`'s `SyntaxContext` is empty. //^ Since `mod bar` is not outside this expansion, `adjust` does not change `$f`, //| and it resolves to `::bar::$f`. }` This returns the expansion whose definition scope we use to privacy check the resolution, or `None` if we privacy check as usual (i.e. not w.r.t. a macro definition scope).",21,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"generics":["mark"],"name":"option"}}],[11,"glob_adjust","","Adjust this context for resolution in a scope created by the given expansion via a glob import with the given `SyntaxContext`. For example, `rust m!(f); macro m($i:ident) { mod foo { pub fn f() {} // `f`'s `SyntaxContext` has a single `Mark` from `m`. pub fn $i() {} // `$i`'s `SyntaxContext` is empty. } n(f); macro n($j:ident) { use foo::*; f(); // `f`'s `SyntaxContext` has a mark from `m` and a mark from `n` //^ `glob_adjust` removes the mark from `n`, so this resolves to `foo::f`. $i(); // `$i`'s `SyntaxContext` has a mark from `n` //^ `glob_adjust` removes the mark from `n`, so this resolves to `foo::$i`. $j(); // `$j`'s `SyntaxContext` has a mark from `m` //^ This cannot be glob-adjusted, so this is a resolution error. } }` This returns `None` if the context cannot be glob-adjusted. Otherwise, it returns the scope to use when privacy checking (see `adjust` for details).",21,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"syntaxcontext"}],"output":{"generics":["option"],"name":"option"}}],[11,"reverse_glob_adjust","","Undo `glob_adjust` if possible: `rust if let Some(privacy_checking_scope) = self.reverse_glob_adjust(expansion, glob_ctxt) { assert!(self.glob_adjust(expansion, glob_ctxt) == Some(privacy_checking_scope)); }`",21,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"syntaxcontext"}],"output":{"generics":["option"],"name":"option"}}],[11,"modern","","",21,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"outer","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"expninfo"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nameandspan"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"expnformat"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"serialize","","",21,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",21,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"symbol","syntex_pos","An \"interner\" is a data structure that associates values with usize tags and allows bidirectional lookup; i.e. given a value, one can easily find the type, and vice versa.",null,null],[3,"Ident","syntex_pos::symbol","",null,null],[12,"name","","",23,null],[12,"ctxt","","",23,null],[3,"Symbol","","A symbol is an interned or gensymed string.",null,null],[3,"Interner","","",null,null],[3,"InternedString","","Represents a string stored in the thread-local interner. Because the interner lives for the life of the thread, this can be safely treated as an immortal string, as long as it never crosses between threads.",null,null],[0,"keywords","","",null,null],[3,"Keyword","syntex_pos::symbol::keywords","",null,null],[17,"Invalid","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Default","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[17,"Catch","","",null,null],[17,"CrateRoot","","",null,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ident","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"name","","",24,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"clone","syntex_pos::symbol","",23,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"with_empty_ctxt","","",23,{"inputs":[{"name":"symbol"}],"output":{"name":"ident"}}],[11,"from_str","","Maps a string to an identifier with an empty syntax context.",23,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[11,"modern","","",23,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",23,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",23,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"ordering"}}],[11,"hash","","",25,null],[11,"intern","","Maps a string to its interned representation.",25,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"interned","","",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"gensym","","gensym's a new usize, using the current interner.",25,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"gensymed","","",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_str","","",25,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"as_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",25,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",25,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"interner"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"intern","","",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"symbol"}}],[11,"interned","","",26,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"symbol"}}],[11,"get","","",26,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"str"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"hash","","",27,null],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"as_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",27,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[6,"FileName","syntex_pos","",null,null],[6,"FileLinesResult","","",null,null],[17,"DUMMY_SP","","",null,null],[17,"NO_EXPANSION","","",null,null],[17,"SPAN_DEBUG","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",28,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"to_usize","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"multispan"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"end_point","","Returns a new span representing just the end-point of this span",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"next_point","","Returns a new span representing the next character after the end-point of this span",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for the macro callsite that expanded to it.",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_callee","","Return the source callee.",0,{"inputs":[{"name":"self"}],"output":{"generics":["nameandspan"],"name":"option"}}],[11,"allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable] items can be used (that is, a macro marked with `#[allow_internal_unstable]`).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"macro_backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["macrobacktrace"],"name":"vec"}}],[11,"to","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"between","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"until","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"spanlabel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",29,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",29,{"inputs":[{"generics":["span"],"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",29,{"inputs":[{"name":"self"},{"name":"span"},{"name":"string"}],"output":null}],[11,"primary_span","","Selects the first primary span (if any)",29,{"inputs":[{"name":"self"}],"output":{"generics":["span"],"name":"option"}}],[11,"primary_spans","","Returns all primary spans.",29,null],[11,"replace","","Replaces all occurances of one Span with another. Used to move Spans in areas that don't display well (like std macros). Returns true if replacements occurred.",29,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"span_labels","","Returns the strings to highlight. We always ensure that there is an entry for each of the primary spans -- for each primary span P, if there is at least one label with span P, we return those labels (marked as primary). But otherwise we return `SpanLabel` instances with empty labels.",29,{"inputs":[{"name":"self"}],"output":{"generics":["spanlabel"],"name":"vec"}}],[11,"from","","",29,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"multibytechar"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"filemap"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the table of line-beginnings. UNCHECKED INVARIANT: these offsets must be added in the right order and must be in the right places; there is shared knowledge about what ends a line between this file and parse.rs WARNING: pos param here is the offset relative to start of CodeMap, and CodeMap will append a newline when adding a filemap without a newline at the end, so the safe way to call this is with value calculated as filemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",3,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":null}],[11,"get_line","","get a line from the list of pre-computed line-beginnings. line-number here is 0-based.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["str"],"name":"option"}}],[11,"record_multibyte_char","","",3,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"usize"}],"output":null}],[11,"is_real_file","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_imported","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_length","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_lines","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"lookup_line","","Find the line containing the given position. The return value is the index into the `lines` array of this FileMap, not the 1-based line number. If the filemap is empty or the position is located before the first line, None is returned.",3,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["usize"],"name":"option"}}],[11,"line_bounds","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"charpos"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_usize","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"from_usize","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"loc"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lineinfo"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"spanlineserror"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"spansnippeterror"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"distinctsources"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"malformedcodemappositions"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","syntex_pos::symbol","",25,{"inputs":[{"name":"ident"}],"output":{"name":"symbol"}}],[11,"to_ident","","",25,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}]],"paths":[[3,"Span"],[3,"SpanLabel"],[3,"MultiByteChar"],[3,"FileMap"],[3,"BytePos"],[3,"CharPos"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"LineInfo"],[3,"FileLines"],[3,"MacroBacktrace"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[3,"SyntaxContextData"],[3,"ExpnInfo"],[3,"NameAndSpan"],[4,"ExpnFormat"],[3,"SyntaxContext"],[3,"Mark"],[3,"Ident"],[3,"Keyword"],[3,"Symbol"],[3,"Interner"],[3,"InternedString"],[8,"Pos"],[3,"MultiSpan"]]};
searchIndex["syntex_syntax"] = {"doc":"The Rust parser and macro expander.","items":[[0,"symbol","syntex_syntax","An \"interner\" is a data structure that associates values with usize tags and allows bidirectional lookup; i.e. given a value, one can easily find the type, and vice versa.",null,null],[3,"Ident","syntex_syntax::symbol","",null,null],[12,"name","","",0,null],[12,"ctxt","","",0,null],[3,"Symbol","","A symbol is an interned or gensymed string.",null,null],[3,"Interner","","",null,null],[0,"keywords","","",null,null],[3,"Keyword","syntex_syntax::symbol::keywords","",null,null],[17,"Invalid","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Default","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[17,"Catch","","",null,null],[17,"CrateRoot","","",null,null],[3,"InternedString","syntex_syntax::symbol","Represents a string stored in the thread-local interner. Because the interner lives for the life of the thread, this can be safely treated as an immortal string, as long as it never crosses between threads.",null,null],[0,"diagnostics","syntex_syntax","",null,null],[0,"macros","syntex_syntax::diagnostics","",null,null],[0,"plugin","","",null,null],[3,"ErrorInfo","syntex_syntax::diagnostics::plugin","Error information type.",null,null],[12,"description","","",1,null],[12,"use_site","","",1,null],[5,"expand_diagnostic_used","","",null,null],[5,"expand_register_diagnostic","","",null,null],[5,"expand_build_diagnostic_array","","",null,null],[6,"ErrorMap","","Mapping from error codes to metadata.",null,null],[0,"metadata","syntex_syntax::diagnostics","This module contains utilities for outputting metadata for diagnostic errors.",null,null],[3,"ErrorMetadata","syntex_syntax::diagnostics::metadata","JSON encodable/decodable version of `ErrorInfo`.",null,null],[12,"description","","",2,null],[12,"use_site","","",2,null],[3,"ErrorLocation","","JSON encodable error location type with filename and line number.",null,null],[12,"filename","","",3,null],[12,"line","","",3,null],[5,"get_metadata_dir","","Get the directory where metadata for a given `prefix` should be stored.",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"output_metadata","","Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.",null,{"inputs":[{"name":"extctxt"},{"name":"str"},{"name":"str"},{"name":"errormap"}],"output":{"generics":["box"],"name":"result"}}],[6,"ErrorMetadataMap","","Mapping from error codes to metadata that can be (de)serialized.",null,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"from_span","","Create an error location from a span.",3,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[0,"diagnostic_list","syntex_syntax","",null,null],[0,"util","","",null,null],[3,"ThinVec","syntex_syntax::util","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`). The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`, which uses only a single (null) pointer.",null,null],[3,"RcSlice","","",null,null],[0,"lev_distance","","",null,null],[5,"lev_distance","syntex_syntax::util::lev_distance","To find the Levenshtein distance between two strings",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"find_best_match_for_name","","To find the best match for a given string from an iterator of names As a loose rule to avoid the obviously incorrect suggestions, it takes an optional limit for the maximum allowable edit distance, which defaults to one-third of the given word",null,{"inputs":[{"name":"t"},{"name":"str"},{"generics":["usize"],"name":"option"}],"output":{"generics":["symbol"],"name":"option"}}],[0,"node_count","syntex_syntax::util","",null,null],[3,"NodeCounter","syntex_syntax::util::node_count","",null,null],[12,"count","","",4,null],[11,"new","","",4,{"inputs":[],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",4,null],[11,"visit_foreign_item","","",4,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_item","","",4,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_local","","",4,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",4,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",4,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",4,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",4,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",4,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",4,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",4,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_fn","","",4,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",4,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",4,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",4,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",4,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",4,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",4,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",4,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",4,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",4,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",4,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_mac","","",4,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_path","","",4,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",4,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_parameters","","",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",4,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",4,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[0,"parser","syntex_syntax::util","",null,null],[4,"AssocOp","syntex_syntax::util::parser","Associative operator with precedence.",null,null],[13,"Add","","`+`",5,null],[13,"Subtract","","`-`",5,null],[13,"Multiply","","`*`",5,null],[13,"Divide","","`/`",5,null],[13,"Modulus","","`%`",5,null],[13,"LAnd","","`&&`",5,null],[13,"LOr","","`||`",5,null],[13,"BitXor","","`^`",5,null],[13,"BitAnd","","`&`",5,null],[13,"BitOr","","`|`",5,null],[13,"ShiftLeft","","`<<`",5,null],[13,"ShiftRight","","`>>`",5,null],[13,"Equal","","`==`",5,null],[13,"Less","","`<`",5,null],[13,"LessEqual","","`<=`",5,null],[13,"NotEqual","","`!=`",5,null],[13,"Greater","","`>`",5,null],[13,"GreaterEqual","","`>=`",5,null],[13,"Assign","","`=`",5,null],[13,"Inplace","","`<-`",5,null],[13,"AssignOp","","`?=` where ? is one of the BinOpToken",5,null],[13,"As","","`as`",5,null],[13,"DotDot","","`..` range",5,null],[13,"DotDotDot","","`...` range",5,null],[13,"Colon","","`:`",5,null],[4,"Fixity","","",null,null],[13,"Left","","The operator is left-associative",6,null],[13,"Right","","The operator is right-associative",6,null],[13,"None","","The operator is not associative",6,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fixity"}],"output":{"name":"bool"}}],[11,"from_token","","Create a new AssocOP from a token",5,{"inputs":[{"name":"token"}],"output":{"generics":["assocop"],"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOpKind.",5,{"inputs":[{"name":"binopkind"}],"output":{"name":"self"}}],[11,"precedence","","Gets the precedence of this operator",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fixity","","Gets the fixity of this operator",5,{"inputs":[{"name":"self"}],"output":{"name":"fixity"}}],[11,"is_comparison","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_assign_like","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ast_binop","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["binopkind"],"name":"option"}}],[0,"small_vector","syntex_syntax::util","",null,null],[3,"SmallVector","syntex_syntax::util::small_vector","A vector type optimized for cases where the size is almost always 0 or 1",null,null],[3,"IntoIter","","",null,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"smallvector"}}],[11,"extend","","",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"new","","",7,{"inputs":[],"output":{"name":"smallvector"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"smallvector"}}],[11,"one","","",7,{"inputs":[{"name":"t"}],"output":{"name":"smallvector"}}],[11,"many","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"smallvector"}}],[11,"as_slice","","",7,null],[11,"as_mut_slice","","",7,null],[11,"pop","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_all","","",7,{"inputs":[{"name":"self"},{"name":"smallvector"}],"output":null}],[11,"get","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"expect_one","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"smallvector"}}],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"into_iter","","",7,null],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"move_flat_map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"move_map","syntex_syntax::util","",null,null],[8,"MoveMap","syntex_syntax::util::move_map","",null,null],[11,"move_map","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"move_flat_map","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"clone","syntex_syntax::util","",10,{"inputs":[{"name":"self"}],"output":{"name":"thinvec"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",10,null],[11,"extend","","",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"rcslice"}}],[11,"new","","",11,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"deref","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","syntex_syntax","A JSON emitter for errors.",null,null],[3,"JsonEmitter","syntex_syntax::json","",null,null],[11,"stderr","","",12,{"inputs":[{"generics":["registry"],"name":"option"},{"generics":["codemap"],"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"basic","","",12,{"inputs":[],"output":{"name":"jsonemitter"}}],[11,"new","","",12,{"inputs":[{"generics":["write"],"name":"box"},{"generics":["registry"],"name":"option"},{"generics":["codemap"],"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"emit","","",12,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[0,"syntax","syntex_syntax","",null,null],[0,"abi","","",null,null],[3,"AbiData","syntex_syntax::abi","",null,null],[4,"Abi","","",null,null],[13,"Cdecl","","",13,null],[13,"Stdcall","","",13,null],[13,"Fastcall","","",13,null],[13,"Vectorcall","","",13,null],[13,"Thiscall","","",13,null],[13,"Aapcs","","",13,null],[13,"Win64","","",13,null],[13,"SysV64","","",13,null],[13,"PtxKernel","","",13,null],[13,"Msp430Interrupt","","",13,null],[13,"X86Interrupt","","",13,null],[13,"Rust","","",13,null],[13,"C","","",13,null],[13,"System","","",13,null],[13,"RustIntrinsic","","",13,null],[13,"RustCall","","",13,null],[13,"PlatformIntrinsic","","",13,null],[13,"Unadjusted","","",13,null],[5,"lookup","","Returns the ABI with the given name (if any).",null,{"inputs":[{"name":"str"}],"output":{"generics":["abi"],"name":"option"}}],[5,"all_names","","",null,{"inputs":[],"output":{"generics":["str"],"name":"vec"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"abidata"}}],[11,"index","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"data","","",13,{"inputs":[{"name":"self"}],"output":{"name":"abidata"}}],[11,"name","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"generic","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ast","syntex_syntax","",null,null],[3,"Ident","syntex_syntax::ast","",null,null],[12,"name","","",0,null],[12,"ctxt","","",0,null],[3,"Name","","A symbol is an interned or gensymed string.",null,null],[3,"ThinVec","","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`). The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`, which uses only a single (null) pointer.",null,null],[3,"Lifetime","","",null,null],[12,"id","","",15,null],[12,"span","","",15,null],[12,"ident","","",15,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",16,null],[12,"lifetime","","",16,null],[12,"bounds","","",16,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"span","","",17,null],[12,"segments","","The segments in the path: the things separated by `::`. Global paths begin with `keywords::CrateRoot`.",17,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"identifier","","The identifier portion of this path segment.",18,null],[12,"span","","Span of the segment identifier.",18,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction. The `Option<P<..>>` wrapper is purely a size optimization; `None` is used to represent both `Path` and `Path<>`.",18,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",19,null],[12,"types","","The type parameters for this path segment, if present.",19,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",19,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"span","","Overall span",20,null],[12,"inputs","","`(A,B)`",20,null],[12,"output","","`C`",20,null],[3,"NodeId","","",null,null],[3,"TyParam","","",null,null],[12,"attrs","","",21,null],[12,"ident","","",21,null],[12,"id","","",21,null],[12,"bounds","","",21,null],[12,"default","","",21,null],[12,"span","","",21,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",22,null],[12,"ty_params","","",22,null],[12,"where_clause","","",22,null],[12,"span","","",22,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",23,null],[12,"predicates","","",23,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"span","","",24,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",24,null],[12,"bounded_ty","","The type being bounded",24,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",24,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"span","","",25,null],[12,"lifetime","","",25,null],[12,"bounds","","",25,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"id","","",26,null],[12,"span","","",26,null],[12,"lhs_ty","","",26,null],[12,"rhs_ty","","",26,null],[3,"Crate","","",null,null],[12,"module","","",27,null],[12,"attrs","","",27,null],[12,"span","","",27,null],[3,"MetaItem","","A spanned compile-time attribute item.",null,null],[12,"name","","",28,null],[12,"node","","",28,null],[12,"span","","",28,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",29,null],[12,"id","","",29,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",29,null],[12,"span","","",29,null],[3,"Pat","","",null,null],[12,"id","","",30,null],[12,"node","","",30,null],[12,"span","","",30,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",31,null],[12,"pat","","The pattern the field is destructured to",31,null],[12,"is_shorthand","","",31,null],[12,"attrs","","",31,null],[3,"Stmt","","A statement",null,null],[12,"id","","",32,null],[12,"node","","",32,null],[12,"span","","",32,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",33,null],[12,"ty","","",33,null],[12,"init","","Initializer expression to set the value, if any",33,null],[12,"id","","",33,null],[12,"span","","",33,null],[12,"attrs","","",33,null],[3,"Arm","","An arm of a 'match'.",null,null],[12,"attrs","","",34,null],[12,"pats","","",34,null],[12,"guard","","",34,null],[12,"body","","",34,null],[3,"Field","","",null,null],[12,"ident","","",35,null],[12,"expr","","",35,null],[12,"span","","",35,null],[12,"is_shorthand","","",35,null],[12,"attrs","","",35,null],[3,"Expr","","An expression",null,null],[12,"id","","",36,null],[12,"node","","",36,null],[12,"span","","",36,null],[12,"attrs","","",36,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",37,null],[12,"position","","",37,null],[3,"Mac_","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",38,null],[12,"tts","","",38,null],[3,"MacroDef","","",null,null],[12,"tokens","","",39,null],[12,"legacy","","",39,null],[3,"MutTy","","",null,null],[12,"ty","","",40,null],[12,"mutbl","","",40,null],[3,"MethodSig","","Represents a method's signature in a trait declaration, or in an implementation.",null,null],[12,"unsafety","","",41,null],[12,"constness","","",41,null],[12,"abi","","",41,null],[12,"decl","","",41,null],[12,"generics","","",41,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",42,null],[12,"ident","","",42,null],[12,"attrs","","",42,null],[12,"node","","",42,null],[12,"span","","",42,null],[3,"ImplItem","","",null,null],[12,"id","","",43,null],[12,"ident","","",43,null],[12,"vis","","",43,null],[12,"defaultness","","",43,null],[12,"attrs","","",43,null],[12,"node","","",43,null],[12,"span","","",43,null],[3,"TypeBinding","","",null,null],[12,"id","","",44,null],[12,"ident","","",44,null],[12,"ty","","",44,null],[12,"span","","",44,null],[3,"Ty","","",null,null],[12,"id","","",45,null],[12,"node","","",45,null],[12,"span","","",45,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",46,null],[12,"abi","","",46,null],[12,"lifetimes","","",46,null],[12,"decl","","",46,null],[3,"InlineAsmOutput","","Inline assembly.",null,null],[12,"constraint","","",47,null],[12,"expr","","",47,null],[12,"is_rw","","",47,null],[12,"is_indirect","","",47,null],[3,"InlineAsm","","Inline assembly.",null,null],[12,"asm","","",48,null],[12,"asm_str_style","","",48,null],[12,"outputs","","",48,null],[12,"inputs","","",48,null],[12,"clobbers","","",48,null],[12,"volatile","","",48,null],[12,"alignstack","","",48,null],[12,"dialect","","",48,null],[12,"ctxt","","",48,null],[3,"Arg","","An argument in a function header.",null,null],[12,"ty","","",49,null],[12,"pat","","",49,null],[12,"id","","",49,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",50,null],[12,"output","","",50,null],[12,"variadic","","",50,null],[3,"Mod","","Module declaration.",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`. For `mod foo;`, the inner span ranges from the first token to the last token in the external file.",51,null],[12,"items","","",51,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",52,null],[12,"items","","",52,null],[3,"GlobalAsm","","Global inline assembly",null,null],[12,"asm","","",53,null],[12,"ctxt","","",53,null],[3,"EnumDef","","",null,null],[12,"variants","","",54,null],[3,"Variant_","","",null,null],[12,"name","","",55,null],[12,"attrs","","",55,null],[12,"data","","",55,null],[12,"disr_expr","","Explicit discriminant, e.g. `Foo = 1`",55,null],[3,"PathListItem_","","",null,null],[12,"name","","",56,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",56,null],[12,"id","","",56,null],[3,"AttrId","","",null,null],[12,"0","","",57,null],[3,"Attribute","","Meta-data associated with an item Doc-comments are promoted to attributes that have is_sugared_doc = true",null,null],[12,"id","","",58,null],[12,"style","","",58,null],[12,"path","","",58,null],[12,"tokens","","",58,null],[12,"is_sugared_doc","","",58,null],[12,"span","","",58,null],[3,"TraitRef","","TraitRef's appear in impls.",null,null],[12,"path","","",59,null],[12,"ref_id","","",59,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",60,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",60,null],[12,"span","","",60,null],[3,"StructField","","Field of a struct.",null,null],[12,"span","","",61,null],[12,"ident","","",61,null],[12,"vis","","",61,null],[12,"id","","",61,null],[12,"ty","","",61,null],[12,"attrs","","",61,null],[3,"Item","","An item",null,null],[12,"ident","","",62,null],[12,"attrs","","",62,null],[12,"id","","",62,null],[12,"node","","",62,null],[12,"vis","","",62,null],[12,"span","","",62,null],[3,"ForeignItem","","",null,null],[12,"ident","","",63,null],[12,"attrs","","",63,null],[12,"node","","",63,null],[12,"id","","",63,null],[12,"span","","",63,null],[12,"vis","","",63,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`",64,null],[13,"Parenthesized","","The `(A,B)` and `C` in `Foo(A,B) -> C`",64,null],[4,"TyParamBound","","The AST represents all type param bounds as types. typeck::collect::compute_bounds matches these against the \"special\" built-in traits (see middle::lang_items) and detects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",65,null],[13,"RegionTyParamBound","","",65,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",66,null],[13,"Maybe","","",66,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",67,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",67,null],[13,"EqPredicate","","An equality predicate (unsupported)",67,null],[4,"NestedMetaItemKind","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",68,null],[13,"Literal","","A literal.",68,null],[4,"MetaItemKind","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",69,null],[13,"List","","List meta item.",69,null],[13,"NameValue","","Name value meta item.",69,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",70,null],[13,"ByValue","","",70,null],[4,"RangeEnd","","",null,null],[13,"Included","","",71,null],[13,"Excluded","","",71,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",72,null],[13,"Ident","","A `PatKind::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`), or a unit struct/variant pattern, or a const pattern (in the last two cases the third field must be `None`). Disambiguation cannot be done with parser alone, so it happens during name resolution.",72,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",72,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",72,null],[13,"Path","","A possibly qualified path pattern. Unquailfied path patterns `A::B::C` can legally refer to variants, structs, constants or associated constants. Quailfied path patterns `<A>::B::C`/`<A as Trait>::B::C` can only legally refer to associated constants.",72,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",72,null],[13,"Box","","A `box` pattern",72,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",72,null],[13,"Lit","","A literal",72,null],[13,"Range","","A range pattern, e.g. `1...2` or `1..2`",72,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `PatKind::Slice(box [a, b], Some(i), box [y, z])`",72,null],[13,"Mac","","A macro pattern; pre-expansion",72,null],[4,"Mutability","","",null,null],[13,"Mutable","","",73,null],[13,"Immutable","","",73,null],[4,"BinOpKind","","",null,null],[13,"Add","","The `+` operator (addition)",74,null],[13,"Sub","","The `-` operator (subtraction)",74,null],[13,"Mul","","The `*` operator (multiplication)",74,null],[13,"Div","","The `/` operator (division)",74,null],[13,"Rem","","The `%` operator (modulus)",74,null],[13,"And","","The `&&` operator (logical and)",74,null],[13,"Or","","The `||` operator (logical or)",74,null],[13,"BitXor","","The `^` operator (bitwise xor)",74,null],[13,"BitAnd","","The `&` operator (bitwise and)",74,null],[13,"BitOr","","The `|` operator (bitwise or)",74,null],[13,"Shl","","The `<<` operator (shift left)",74,null],[13,"Shr","","The `>>` operator (shift right)",74,null],[13,"Eq","","The `==` operator (equality)",74,null],[13,"Lt","","The `<` operator (less than)",74,null],[13,"Le","","The `<=` operator (less than or equal to)",74,null],[13,"Ne","","The `!=` operator (not equal to)",74,null],[13,"Ge","","The `>=` operator (greater than or equal to)",74,null],[13,"Gt","","The `>` operator (greater than)",74,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",75,null],[13,"Not","","The `!` operator for logical inversion",75,null],[13,"Neg","","The `-` operator for negation",75,null],[4,"StmtKind","","",null,null],[13,"Local","","A local (let) binding.",76,null],[13,"Item","","An item definition.",76,null],[13,"Expr","","Expr without trailing semi-colon.",76,null],[13,"Semi","","",76,null],[13,"Mac","","",76,null],[4,"MacStmtStyle","","",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };` `foo!(...);`, `foo![...];`",77,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",77,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g. `foo!(...)`. All of these will end up being converted into macro expressions.",77,null],[4,"BlockCheckMode","","",null,null],[13,"Default","","",78,null],[13,"Unsafe","","",78,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",79,null],[13,"UserProvided","","",79,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",80,null],[13,"Closed","","Inclusive at the beginning and end",80,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",81,null],[13,"InPlace","","First expr is the place; second expr is the value.",81,null],[13,"Array","","An array (`[a, b, c, d]`)",81,null],[13,"Call","","A function call",81,null],[13,"MethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",81,null],[13,"Tup","","A tuple (`(a, b, c ,d)`)",81,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",81,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",81,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",81,null],[13,"Cast","","A cast (`foo as f64`)",81,null],[13,"Type","","",81,null],[13,"If","","An `if` block, with an optional else block",81,null],[13,"IfLet","","An `if let` expression with an optional else block",81,null],[13,"While","","A while loop, with an optional label",81,null],[13,"WhileLet","","A while-let loop, with an optional label",81,null],[13,"ForLoop","","A for loop, with an optional label",81,null],[13,"Loop","","Conditionless loop (can be exited with break, continue, or return)",81,null],[13,"Match","","A `match` block.",81,null],[13,"Closure","","A closure (for example, `move |a, b, c| a + b + c`)",81,null],[13,"Block","","A block (`{ ... }`)",81,null],[13,"Catch","","A catch block (`catch { ... }`)",81,null],[13,"Assign","","An assignment (`a = foo()`)",81,null],[13,"AssignOp","","An assignment with an operator",81,null],[13,"Field","","Access of a named struct field (`obj.foo`)",81,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",81,null],[13,"Index","","An indexing operation (`foo[2]`)",81,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",81,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",81,null],[13,"AddrOf","","A referencing operation (`&a` or `&mut a`)",81,null],[13,"Break","","A `break`, with an optional label to break, and an optional expression",81,null],[13,"Continue","","A `continue`, with an optional label",81,null],[13,"Ret","","A `return`, with an optional value to be returned",81,null],[13,"InlineAsm","","Output of the `asm!()` macro",81,null],[13,"Mac","","A macro invocation; pre-expansion",81,null],[13,"Struct","","A struct literal expression.",81,null],[13,"Repeat","","An array literal constructed from one repeated element.",81,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",81,null],[13,"Try","","`expr?`",81,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",82,null],[13,"Ref","","",82,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",83,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",83,null],[4,"LitIntType","","",null,null],[13,"Signed","","",84,null],[13,"Unsigned","","",84,null],[13,"Unsuffixed","","",84,null],[4,"LitKind","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",85,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",85,null],[13,"Byte","","A byte char (`b'f'`)",85,null],[13,"Char","","A character literal (`'a'`)",85,null],[13,"Int","","An integer literal (`1`)",85,null],[13,"Float","","A float literal (`1f64` or `1E10f64`)",85,null],[13,"FloatUnsuffixed","","A float literal without a suffix (`1.0 or 1.0E10`)",85,null],[13,"Bool","","A boolean literal",85,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",86,null],[13,"Method","","",86,null],[13,"Type","","",86,null],[13,"Macro","","",86,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",87,null],[13,"Method","","",87,null],[13,"Type","","",87,null],[13,"Macro","","",87,null],[4,"IntTy","","",null,null],[13,"Is","","",88,null],[13,"I8","","",88,null],[13,"I16","","",88,null],[13,"I32","","",88,null],[13,"I64","","",88,null],[13,"I128","","",88,null],[4,"UintTy","","",null,null],[13,"Us","","",89,null],[13,"U8","","",89,null],[13,"U16","","",89,null],[13,"U32","","",89,null],[13,"U64","","",89,null],[13,"U128","","",89,null],[4,"FloatTy","","",null,null],[13,"F32","","",90,null],[13,"F64","","",90,null],[4,"TyKind","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length slice (`[T]`)",91,null],[13,"Array","","A fixed length array (`[T; n]`)",91,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",91,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",91,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",91,null],[13,"Never","","The never type (`!`)",91,null],[13,"Tup","","A tuple (`(A, B, C, D,...)`)",91,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",91,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",91,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",91,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",91,null],[13,"Typeof","","Unused for now",91,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",91,null],[13,"ImplicitSelf","","Inferred type of a `self` or `&self` argument in a method.",91,null],[13,"Mac","","",91,null],[13,"Err","","Placeholder for a kind that has failed to be defined.",91,null],[4,"AsmDialect","","Inline assembly dialect.",null,null],[13,"Att","","",92,null],[13,"Intel","","",92,null],[4,"SelfKind","","Alternative representation for `Arg`s describing `self` parameter of methods.",null,null],[13,"Value","","`self`, `mut self`",93,null],[13,"Region","","`&'lt self`, `&'lt mut self`",93,null],[13,"Explicit","","`self: TYPE`, `mut self: TYPE`",93,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",94,null],[13,"Normal","","",94,null],[4,"Constness","","",null,null],[13,"Const","","",95,null],[13,"NotConst","","",95,null],[4,"Defaultness","","",null,null],[13,"Default","","",96,null],[13,"Final","","",96,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",97,null],[13,"Negative","","`impl !Trait for Type`",97,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",98,null],[13,"Ty","","Everything else",98,null],[4,"ViewPath_","","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",99,null],[13,"ViewPathGlob","","`foo::bar::*`",99,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",99,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","",100,null],[13,"Inner","","",100,null],[4,"Visibility","","",null,null],[13,"Public","","",101,null],[13,"Crate","","",101,null],[13,"Restricted","","",101,null],[12,"path","syntex_syntax::ast::Visibility","",101,null],[12,"id","","",101,null],[13,"Inherited","syntex_syntax::ast","",101,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","Struct variant.",102,null],[13,"Tuple","","Tuple variant.",102,null],[13,"Unit","","Unit variant.",102,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name.",103,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",103,null],[13,"Static","","A static item (`static` or `pub static`).",103,null],[13,"Const","","A constant item (`const` or `pub const`).",103,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",103,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",103,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",103,null],[13,"GlobalAsm","","Module-level inline assembly (from `global_asm!()`)",103,null],[13,"Ty","","A type alias (`type` or `pub type`).",103,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",103,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",103,null],[13,"Union","","A union definition (`union` or `pub union`).",103,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",103,null],[13,"DefaultImpl","","E.g. `impl Trait for .. {}` or `impl<T> Trait<T> for .. {}`",103,null],[13,"Impl","","An implementation.",103,null],[13,"Mac","","A macro invocation.",103,null],[13,"MacroDef","","A macro definition.",103,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",104,null],[13,"Static","","A foreign static item (`static ext: u8`), with optional mutability (the boolean is true when mutable)",104,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate, used to drive conditional compilation",null,null],[6,"NestedMetaItem","","A spanned compile-time attribute list item.",null,null],[6,"BinOp","","",null,null],[6,"SpannedIdent","","",null,null],[6,"Mac","","",null,null],[6,"Lit","","A literal",null,null],[6,"ExplicitSelf","","",null,null],[6,"Variant","","",null,null],[6,"PathListItem","","",null,null],[6,"ViewPath","","",null,null],[17,"CRATE_NODE_ID","","Node id used to represent the root of the crate.",null,null],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST node value. Then later, in the renumber pass, we renumber them to have small, positive ids.",null,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","","",17,{"inputs":[{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"default_to_global","","",17,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"is_global","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","","",18,{"inputs":[{"name":"ident"},{"name":"span"}],"output":{"name":"self"}}],[11,"crate_root","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",64,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"into","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["p"],"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"cmp","","",105,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ordering"}}],[11,"hash","","",105,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",105,{"inputs":[{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"from_u32","","",105,{"inputs":[{"name":"u32"}],"output":{"name":"nodeid"}}],[11,"as_usize","","",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"placeholder_from_mark","","",105,{"inputs":[{"name":"mark"}],"output":{"name":"self"}}],[11,"placeholder_to_mark","","",105,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_lt_parameterized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span_for_name","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["span"],"name":"option"}}],[11,"default","","Creates an instance of `Generics`.",22,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitemkind"}}],[11,"hash","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"nestedmetaitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"nestedmetaitemkind"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"metaitemkind"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"metaitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"metaitemkind"}],"output":{"name":"bool"}}],[11,"hash","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"walk","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"hash","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"rangeend"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"rangeend"}],"output":{"name":"bool"}}],[11,"hash","","",71,null],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"patkind"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"binopkind"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"binopkind"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",74,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"lazy","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shift","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_comparison","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",75,{"inputs":[{"name":"unop"}],"output":{"name":"bool"}}],[11,"to_string","","",75,{"inputs":[{"name":"unop"}],"output":{"name":"str"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"add_trailing_semicolon","","",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"stmtkind"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"macstmtstyle"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"blockcheckmode"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"unsafesource"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"exprkind"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"captureby"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"bool"}}],[11,"hash","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"mac_"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","",38,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"macrodef"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","",39,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"litinttype"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"litkind"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"litkind"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"litkind"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_str","","Returns true if this literal is a string and false otherwise.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unsuffixed","","Returns true if this literal has no suffix. Note: this will return true for literals with prefixes such as raw strings and byte strings.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_suffixed","","Returns true if this literal has a suffix.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",88,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"val_to_string","","",88,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"string"}}],[11,"bit_width","","",88,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"uintty"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"hash","","",89,null],[11,"ty_to_string","","",89,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"val_to_string","","",89,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"string"}}],[11,"bit_width","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"bit_width","","",90,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"tykind"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"tykind"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"tykind"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"asmdialect"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmoutput"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"inlineasm"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"selfkind"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"selfkind"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"selfkind"}],"output":{"name":"bool"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_self","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["explicitself"],"name":"option"}}],[11,"is_self","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_self","","",49,{"inputs":[{"name":"explicitself"},{"name":"spannedident"}],"output":{"name":"arg"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_self","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["explicitself"],"name":"option"}}],[11,"has_self","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"span","","",98,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"globalasm"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"globalasm"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"globalasm"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"enumdef"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"variant_"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pathlistitem_"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"viewpath_"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"hash","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","",99,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"attrid"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"traitref"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",60,{"inputs":[{"generics":["lifetimedef"],"name":"vec"},{"name":"path"},{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"structfield"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fields","","",102,null],[11,"id","","",102,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"is_struct","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"itemkind"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"hash","","",103,null],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemkind"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"hash","","",104,null],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"attr","syntex_syntax","",null,null],[3,"Stability","syntex_syntax::attr","Represents the #[stable], #[unstable] and #[rustc_deprecated] attributes.",null,null],[12,"level","","",106,null],[12,"feature","","",106,null],[12,"rustc_depr","","",106,null],[3,"RustcDeprecation","","",null,null],[12,"since","","",107,null],[12,"reason","","",107,null],[3,"Deprecation","","",null,null],[12,"since","","",108,null],[12,"note","","",108,null],[4,"InlineAttr","","",null,null],[13,"None","","",109,null],[13,"Hint","","",109,null],[13,"Always","","",109,null],[13,"Never","","",109,null],[4,"StabilityLevel","","The available stability levels.",null,null],[13,"Unstable","","",110,null],[12,"reason","syntex_syntax::attr::StabilityLevel","",110,null],[12,"issue","","",110,null],[13,"Stable","syntex_syntax::attr","",110,null],[12,"since","syntex_syntax::attr::StabilityLevel","",110,null],[4,"ReprAttr","syntex_syntax::attr","",null,null],[13,"ReprInt","","",111,null],[13,"ReprExtern","","",111,null],[13,"ReprPacked","","",111,null],[13,"ReprSimd","","",111,null],[13,"ReprAlign","","",111,null],[4,"IntType","","",null,null],[13,"SignedInt","","",112,null],[13,"UnsignedInt","","",112,null],[5,"mark_used","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_used","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mark_known","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_known","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mk_name_value_item_str","","",null,{"inputs":[{"name":"name"},{"name":"symbol"}],"output":{"name":"metaitem"}}],[5,"mk_name_value_item","","",null,{"inputs":[{"name":"name"},{"name":"lit"}],"output":{"name":"metaitem"}}],[5,"mk_list_item","","",null,{"inputs":[{"name":"name"},{"generics":["nestedmetaitem"],"name":"vec"}],"output":{"name":"metaitem"}}],[5,"mk_list_word_item","","",null,{"inputs":[{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[5,"mk_word_item","","",null,{"inputs":[{"name":"name"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_name_value_item","","",null,{"inputs":[{"name":"span"},{"name":"name"},{"name":"lit"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_list_item","","",null,{"inputs":[{"name":"span"},{"name":"name"},{"generics":["nestedmetaitem"],"name":"vec"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_word_item","","",null,{"inputs":[{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[5,"mk_attr_id","","",null,{"inputs":[],"output":{"name":"attrid"}}],[5,"mk_attr_inner","","Returns an inner attribute with the given value.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_inner","","Returns an innter attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_attr_outer","","Returns an outer attribute with the given value.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_outer","","Returns an outer attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_sugared_doc_attr","","",null,{"inputs":[{"name":"attrid"},{"name":"symbol"},{"name":"span"}],"output":{"name":"attribute"}}],[5,"list_contains_name","","",null,null],[5,"contains_name","","",null,null],[5,"first_attr_value_str_by_name","","",null,null],[5,"find_crate_name","","",null,null],[5,"find_export_name_attr","","Find the value of #[export_name=*] attribute and check its validity.",null,null],[5,"contains_extern_indicator","","",null,null],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any.",null,null],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`.",null,null],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set",null,{"inputs":[{"name":"metaitem"},{"name":"parsesess"},{"generics":["features"],"name":"option"}],"output":{"name":"bool"}}],[5,"find_stability","","Find the first stability attribute. `None` if none exists.",null,null],[5,"find_deprecation","","Find the deprecation attribute. `None` if none exists.",null,null],[5,"find_repr_attrs","","Parse #[repr(...)] forms.",null,{"inputs":[{"name":"handler"},{"name":"attribute"}],"output":{"generics":["reprattr"],"name":"vec"}}],[8,"HasAttrs","","",null,null],[10,"attrs","","",113,null],[10,"map_attrs","","",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"meta_item","","Returns the MetaItem if self is a NestedMetaItemKind::MetaItem.",114,{"inputs":[{"name":"self"}],"output":{"generics":["metaitem"],"name":"option"}}],[11,"literal","","Returns the Lit if self is a NestedMetaItemKind::Literal.",114,{"inputs":[{"name":"self"}],"output":{"generics":["lit"],"name":"option"}}],[11,"span","","Returns the Span for `self`.",114,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"check_name","","Returns true if this list item is a MetaItem with a name of `name`.",114,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","Returns the name of the meta item, e.g. `foo` in `#[foo]`, `#[foo=\"bar\"]` and `#[foo(bar)]`, if self is a MetaItem",114,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"option"}}],[11,"value_str","","Gets the string value if self is a MetaItem and the MetaItem is a MetaItemKind::NameValue variant containing a string, otherwise None.",114,{"inputs":[{"name":"self"}],"output":{"generics":["symbol"],"name":"option"}}],[11,"name_value_literal","","Returns a name and single literal value tuple of the MetaItem.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"word","","Returns a MetaItem if self is a MetaItem with Kind Word.",114,{"inputs":[{"name":"self"}],"output":{"generics":["metaitem"],"name":"option"}}],[11,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_meta_item","","Returns `true` if the variant is MetaItem.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_literal","","Returns `true` if the variant is Literal.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_word","","Returns `true` if self is a MetaItem and the meta item is a word.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_value_str","","Returns `true` if self is a MetaItem and the meta item is a ValueString.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_meta_item_list","","Returns `true` if self is a MetaItem and the meta item is a list.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"check_name","syntex_syntax::ast","",58,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"option"}}],[11,"value_str","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["symbol"],"name":"option"}}],[11,"meta_item_list","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_word","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",58,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_meta_item_list","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_value_str","","Indicates if the attribute is a Value String.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","",28,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"value_str","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["symbol"],"name":"option"}}],[11,"meta_item_list","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_word","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",28,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"check_name","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_value_str","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_meta_item_list","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta","","Extract the MetaItem from inside this Attribute.",58,{"inputs":[{"name":"self"}],"output":{"generics":["metaitem"],"name":"option"}}],[11,"parse","","",58,{"inputs":[{"name":"self"},{"name":"parsesess"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_list","","",58,{"inputs":[{"name":"self"},{"name":"parsesess"},{"name":"f"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_meta","","",58,{"inputs":[{"name":"self"},{"name":"parsesess"}],"output":{"generics":["metaitem"],"name":"presult"}}],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a comment like `///` or `/** */`. (Returns self unchanged for non-sugared doc attributes.)",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"clone","syntex_syntax::attr","",109,{"inputs":[{"name":"self"}],"output":{"name":"inlineattr"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"stability"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"hash","","",106,null],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"rustcdeprecation"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",107,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"deprecation"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"is_unstable","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stable","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"reprattr"}}],[11,"hash","","",112,null],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"is_signed","","",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"tokens","syntex_syntax::ast","",69,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokenstream"}}],[11,"attrs","syntex_syntax::util","",10,null],[11,"map_attrs","","",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntex_syntax::ast","",76,null],[11,"map_attrs","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",32,null],[11,"map_attrs","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",62,null],[11,"map_attrs","","",62,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",36,null],[11,"map_attrs","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",33,null],[11,"map_attrs","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",63,null],[11,"map_attrs","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",61,null],[11,"map_attrs","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",43,null],[11,"map_attrs","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",42,null],[11,"map_attrs","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",34,null],[11,"map_attrs","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",35,null],[11,"map_attrs","","",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",31,null],[11,"map_attrs","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",55,null],[11,"map_attrs","","",55,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"codemap","syntex_syntax","The CodeMap tracks all the source code used within a single crate, mapping from integer byte positions to the original source code location. Each bit of source parsed during crate parsing (typically files, in-memory strings, or various bits of macro expansion) cover a continuous range of bytes in the CodeMap and are represented by FileMaps. Byte positions are stored in `spans` and used pervasively in the compiler. They are absolute positions within the CodeMap, which upon request can be converted to line and column information, source code snippets, etc.",null,null],[4,"ExpnFormat","syntex_syntax::codemap","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] ",115,null],[13,"MacroBang","","e.g. `format!()`",115,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",115,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",116,null],[12,"callee","","Information about the expansion.",116,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",117,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",117,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",117,null],[3,"Spanned","","",null,null],[12,"node","","",118,null],[12,"span","","",118,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"CodeMap","","",null,null],[12,"files","","",119,null],[3,"FilePathMapping","","",null,null],[5,"original_sp","","Return the span itself if it doesn't come from a macro expansion, otherwise return the call site span up to the `enclosing_sp` by following the `expn_info` chain.",null,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[5,"respan","","",null,{"inputs":[{"name":"span"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"dummy_spanned","","",null,{"inputs":[{"name":"t"}],"output":{"name":"spanned"}}],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",120,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[10,"abs_path","","Return an absolute path to a file, if possible.",120,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"read_file","","Read the contents of an UTF-8 file into memory.",120,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["string"],"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"spanned"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"hash","","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"file_exists","","",121,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"abs_path","","",121,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"read_file","","",121,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["string"],"name":"result"}}],[11,"new","","",119,{"inputs":[{"name":"filepathmapping"}],"output":{"name":"codemap"}}],[11,"with_file_loader","","",119,{"inputs":[{"generics":["fileloader"],"name":"box"},{"name":"filepathmapping"}],"output":{"name":"codemap"}}],[11,"path_mapping","","",119,{"inputs":[{"name":"self"}],"output":{"name":"filepathmapping"}}],[11,"file_exists","","",119,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"load_file","","",119,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["rc"],"name":"result"}}],[11,"files","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"ref"}}],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don't intend to set the line information yourself, you should use new_filemap_and_lines.",119,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"string"}],"output":{"generics":["filemap"],"name":"rc"}}],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",119,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["filemap"],"name":"rc"}}],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external crate. The source code of such an \"imported filemap\" is not available, but we still know enough to generate accurate debuginfo location information for things inlined from other crates.",119,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"bool"},{"name":"u32"},{"name":"usize"},{"generics":["bytepos"],"name":"vec"},{"generics":["multibytechar"],"name":"vec"}],"output":{"generics":["filemap"],"name":"rc"}}],[11,"mk_substr_filename","","",119,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"lookup_char_pos","","Lookup source information about a BytePos",119,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"lookup_char_pos_adj","","",119,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"locwithopt"}}],[11,"merge_spans","","Returns `Some(span)`, a union of the lhs and rhs span.  The lhs must precede the rhs. If there are gaps between lhs and rhs, the resulting union will cross these gaps. For this to work, the spans have to be:    * the ctxt of both spans much match    * the lhs span needs to end on the same line the rhs span begins    * the lhs span must start at or before the rhs span",119,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"span_to_string","","",119,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",119,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"span_to_lines","","",119,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_snippet","","",119,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["string","spansnippeterror"],"name":"result"}}],[11,"span_until_char","","Given a `Span`, try to get a shorter span ending before the first occurrence of `c` `char`",119,{"inputs":[{"name":"self"},{"name":"span"},{"name":"char"}],"output":{"name":"span"}}],[11,"def_span","","",119,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"get_filemap","","",119,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["rc"],"name":"option"}}],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",119,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"filemapandbytepos"}}],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",119,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"charpos"}}],[11,"lookup_filemap_idx","","",119,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"usize"}}],[11,"count_lines","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"lookup_char_pos","","",119,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"span_to_lines","","",119,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_string","","",119,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",119,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"merge_spans","","",119,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"filepathmapping"}}],[11,"empty","","",122,{"inputs":[],"output":{"name":"filepathmapping"}}],[11,"new","","",122,{"inputs":[{"name":"vec"}],"output":{"name":"filepathmapping"}}],[11,"map_prefix","","Applies any path prefix substitution as defined by the mapping. The return value is the remapped path and a boolean indicating whether the path was affected by the mapping.",122,null],[0,"config","syntex_syntax","",null,null],[3,"StripUnconfigured","syntex_syntax::config","A folder that strips out items that do not belong in the current configuration.",null,null],[12,"should_test","","",123,null],[12,"sess","","",123,null],[12,"features","","",123,null],[5,"features","","",null,null],[5,"is_test_or_bench","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[11,"configure","","",123,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"process_cfg_attrs","","",123,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"in_cfg","","",123,null],[11,"configure_foreign_mod","","",123,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"configure_item_kind","","",123,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"configure_expr_kind","","",123,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"exprkind"}}],[11,"configure_expr","","",123,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"configure_stmt","","",123,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"generics":["stmt"],"name":"option"}}],[11,"configure_struct_expr_field","","",123,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"generics":["field"],"name":"option"}}],[11,"configure_pat","","",123,{"inputs":[{"name":"self"},{"generics":["pat"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[11,"fold_foreign_mod","","",123,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_item_kind","","",123,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"fold_expr","","",123,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"fold_opt_expr","","",123,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"generics":["p"],"name":"option"}}],[11,"fold_stmt","","",123,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"generics":["stmt"],"name":"smallvector"}}],[11,"fold_item","","",123,{"inputs":[{"name":"self"},{"generics":["item"],"name":"p"}],"output":{"generics":["p"],"name":"smallvector"}}],[11,"fold_impl_item","","",123,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"generics":["implitem"],"name":"smallvector"}}],[11,"fold_trait_item","","",123,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"generics":["traititem"],"name":"smallvector"}}],[11,"fold_mac","","",123,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"fold_pat","","",123,{"inputs":[{"name":"self"},{"generics":["pat"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[0,"entry","syntex_syntax","",null,null],[4,"EntryPointType","syntex_syntax::entry","",null,null],[13,"None","","",124,null],[13,"MainNamed","","",124,null],[13,"MainAttr","","",124,null],[13,"Start","","",124,null],[13,"OtherMain","","",124,null],[5,"entry_point_type","","",null,{"inputs":[{"name":"item"},{"name":"usize"}],"output":{"name":"entrypointtype"}}],[0,"feature_gate","syntex_syntax","Feature gating",null,null],[3,"Features","syntex_syntax::feature_gate","A set of features to be used by later passes.",null,null],[12,"declared_stable_lang_features","","#![feature] attrs for stable language features, for error reporting",125,null],[12,"declared_lib_features","","#![feature] attrs for non-language (library) features",125,null],[12,"asm","","",125,null],[12,"concat_idents","","",125,null],[12,"link_args","","",125,null],[12,"log_syntax","","",125,null],[12,"non_ascii_idents","","",125,null],[12,"plugin_registrar","","",125,null],[12,"thread_local","","",125,null],[12,"trace_macros","","",125,null],[12,"intrinsics","","",125,null],[12,"lang_items","","",125,null],[12,"link_llvm_intrinsics","","",125,null],[12,"linkage","","",125,null],[12,"quote","","",125,null],[12,"simd","","",125,null],[12,"rustc_diagnostic_macros","","",125,null],[12,"advanced_slice_patterns","","",125,null],[12,"box_syntax","","",125,null],[12,"placement_in_syntax","","",125,null],[12,"unboxed_closures","","",125,null],[12,"allocator","","",125,null],[12,"fundamental","","",125,null],[12,"main","","",125,null],[12,"needs_allocator","","",125,null],[12,"on_unimplemented","","",125,null],[12,"plugin","","",125,null],[12,"simd_ffi","","",125,null],[12,"start","","",125,null],[12,"structural_match","","",125,null],[12,"panic_runtime","","",125,null],[12,"needs_panic_runtime","","",125,null],[12,"optin_builtin_traits","","",125,null],[12,"macro_reexport","","",125,null],[12,"staged_api","","",125,null],[12,"no_core","","",125,null],[12,"box_patterns","","",125,null],[12,"dropck_parametricity","","",125,null],[12,"dropck_eyepatch","","",125,null],[12,"custom_attribute","","",125,null],[12,"custom_derive","","",125,null],[12,"rustc_attrs","","",125,null],[12,"allow_internal_unstable","","",125,null],[12,"slice_patterns","","",125,null],[12,"associated_consts","","",125,null],[12,"const_fn","","",125,null],[12,"const_indexing","","",125,null],[12,"prelude_import","","",125,null],[12,"default_type_parameter_fallback","","",125,null],[12,"associated_type_defaults","","",125,null],[12,"repr_simd","","",125,null],[12,"cfg_target_feature","","",125,null],[12,"platform_intrinsics","","",125,null],[12,"unwind_attributes","","",125,null],[12,"naked_functions","","",125,null],[12,"no_debug","","",125,null],[12,"omit_gdb_pretty_printer_section","","",125,null],[12,"cfg_target_vendor","","",125,null],[12,"stmt_expr_attributes","","",125,null],[12,"type_ascription","","",125,null],[12,"cfg_target_thread_local","","",125,null],[12,"abi_vectorcall","","",125,null],[12,"inclusive_range_syntax","","",125,null],[12,"exclusive_range_pattern","","",125,null],[12,"specialization","","",125,null],[12,"drop_types_in_const","","",125,null],[12,"cfg_target_has_atomic","","",125,null],[12,"conservative_impl_trait","","",125,null],[12,"never_type","","",125,null],[12,"attr_literals","","",125,null],[12,"abi_sysv64","","",125,null],[12,"untagged_unions","","",125,null],[12,"compiler_builtins","","",125,null],[12,"generic_param_attrs","","",125,null],[12,"link_cfg","","",125,null],[12,"use_extern_macros","","",125,null],[12,"target_feature","","",125,null],[12,"abi_ptx","","",125,null],[12,"i128_type","","",125,null],[12,"abi_unadjusted","","",125,null],[12,"proc_macro","","",125,null],[12,"decl_macro","","",125,null],[12,"struct_field_attributes","","",125,null],[12,"static_nobundle","","",125,null],[12,"abi_msp430_interrupt","","",125,null],[12,"sanitizer_runtime","","",125,null],[12,"abi_x86_interrupt","","",125,null],[12,"catch_expr","","",125,null],[12,"repr_align","","",125,null],[12,"rvalue_static_promotion","","",125,null],[12,"used","","",125,null],[12,"global_asm","","",125,null],[12,"overlapping_marker_traits","","",125,null],[12,"macro_vis_matcher","","",125,null],[12,"abi_thiscall","","",125,null],[3,"GatedCfg","","",null,null],[4,"AttributeType","","",null,null],[13,"Normal","","Normal, builtin attribute that is consumed by the compiler before the unused_attribute check",126,null],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler before the unused_attribute check. These attributes will be ignored by the unused_attribute lint",126,null],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",126,null],[4,"AttributeGate","","",null,null],[13,"Gated","","Is gated by a given feature gate, reason and function to check if enabled",127,null],[13,"Ungated","","Ungated attribute, can be used on all release channels",127,null],[4,"Stability","","",null,null],[13,"Unstable","","",128,null],[13,"Deprecated","","",128,null],[4,"GateIssue","","",null,null],[13,"Language","","",129,null],[13,"Library","","",129,null],[4,"UnstableFeatures","","",null,null],[13,"Disallow","","Hard errors for unstable features are active, as on beta/stable channels.",130,null],[13,"Allow","","Allow features to be activated, as on nightly.",130,null],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time during the build that feature-related lints are set to warn or above because the build turns on warnings-as-errors and uses lots of unstable features. As a result, this is always required for building Rust itself.",130,null],[5,"deprecated_attributes","","",null,{"inputs":[],"output":{"name":"vec"}}],[5,"is_builtin_attr","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"check_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"parsesess"},{"name":"features"}],"output":null}],[5,"find_lang_feature_accepted_version","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[5,"emit_feature_err","","",null,{"inputs":[{"name":"parsesess"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":null}],[5,"feature_err","","",null,{"inputs":[{"name":"parsesess"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[5,"get_features","","",null,null],[5,"check_crate","","",null,null],[17,"BUILTIN_ATTRIBUTES","","",null,null],[17,"EXPLAIN_STMT_ATTR_SYNTAX","","",null,null],[17,"EXPLAIN_ASM","","",null,null],[17,"EXPLAIN_GLOBAL_ASM","","",null,null],[17,"EXPLAIN_LOG_SYNTAX","","",null,null],[17,"EXPLAIN_CONCAT_IDENTS","","",null,null],[17,"EXPLAIN_TRACE_MACROS","","",null,null],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","","",null,null],[17,"EXPLAIN_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DEPR_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DERIVE_UNDERSCORE","","",null,null],[17,"EXPLAIN_VIS_MATCHER","","",null,null],[17,"EXPLAIN_PLACEMENT_IN","","",null,null],[11,"new","","",125,{"inputs":[],"output":{"name":"features"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"attributetype"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"stability"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"gate","","",131,{"inputs":[{"name":"metaitem"}],"output":{"generics":["gatedcfg"],"name":"option"}}],[11,"check_and_emit","","",131,{"inputs":[{"name":"self"},{"name":"parsesess"},{"name":"features"}],"output":null}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"unstablefeatures"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"unstablefeatures"}],"output":{"name":"bool"}}],[11,"hash","","",130,null],[11,"from_environment","","",130,{"inputs":[],"output":{"name":"unstablefeatures"}}],[11,"is_nightly_build","","",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"fold","syntex_syntax","A Folder represents an AST->AST fold; it accepts an AST piece, and returns a piece of the same type. So, for instance, macro expansion is a Folder that walks over an AST and produces another AST.",null,null],[5,"noop_fold_meta_items","syntex_syntax::fold","",null,{"inputs":[{"generics":["metaitem"],"name":"vec"},{"name":"t"}],"output":{"generics":["metaitem"],"name":"vec"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"generics":["viewpath"],"name":"p"},{"name":"t"}],"output":{"generics":["viewpath"],"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"generics":["attribute"],"name":"vec"},{"name":"t"}],"output":{"generics":["attribute"],"name":"vec"}}],[5,"fold_thin_attrs","","",null,{"inputs":[{"generics":["attribute"],"name":"thinvec"},{"name":"t"}],"output":{"generics":["attribute"],"name":"thinvec"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"typebinding"},{"name":"t"}],"output":{"name":"typebinding"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"generics":["ty"],"name":"p"},{"name":"t"}],"output":{"generics":["ty"],"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_global_asm","","",null,{"inputs":[{"generics":["globalasm"],"name":"p"},{"name":"t"}],"output":{"generics":["globalasm"],"name":"p"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"variant"},{"name":"t"}],"output":{"name":"variant"}}],[5,"noop_fold_ident","","",null,{"inputs":[{"name":"ident"},{"name":"t"}],"output":{"name":"ident"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"generics":["local"],"name":"p"},{"name":"t"}],"output":{"generics":["local"],"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"t"}],"output":{"generics":["attribute"],"name":"option"}}],[5,"noop_fold_mac","","",null,{"inputs":[{"name":"mac"},{"name":"t"}],"output":{"name":"mac"}}],[5,"noop_fold_macro_def","","",null,{"inputs":[{"name":"macrodef"},{"name":"t"}],"output":{"name":"macrodef"}}],[5,"noop_fold_meta_list_item","","",null,{"inputs":[{"name":"nestedmetaitem"},{"name":"t"}],"output":{"name":"nestedmetaitem"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"metaitem"},{"name":"t"}],"output":{"name":"metaitem"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_tt","","",null,{"inputs":[{"name":"tokentree"},{"name":"t"}],"output":{"name":"tokentree"}}],[5,"noop_fold_tts","","",null,{"inputs":[{"name":"tokenstream"},{"name":"t"}],"output":{"name":"tokenstream"}}],[5,"noop_fold_token","","",null,{"inputs":[{"name":"token"},{"name":"t"}],"output":{"name":"token"}}],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes",null,{"inputs":[{"name":"nonterminal"},{"name":"t"}],"output":{"name":"nonterminal"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"generics":["fndecl"],"name":"p"},{"name":"t"}],"output":{"generics":["fndecl"],"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"generics":["typaram"],"name":"vec"},{"name":"t"}],"output":{"generics":["typaram"],"name":"vec"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"generics":["lifetime"],"name":"vec"},{"name":"t"}],"output":{"generics":["lifetime"],"name":"vec"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"generics":["lifetimedef"],"name":"vec"},{"name":"t"}],"output":{"generics":["lifetimedef"],"name":"vec"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"generics":["lifetime"],"name":"option"},{"name":"t"}],"output":{"generics":["lifetime"],"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"generics":["typarambounds"],"name":"option"},{"name":"t"}],"output":{"generics":["typarambounds"],"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"generics":["block"],"name":"p"},{"name":"t"}],"output":{"generics":["block"],"name":"p"}}],[5,"noop_fold_item_kind","","",null,{"inputs":[{"name":"itemkind"},{"name":"t"}],"output":{"name":"itemkind"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"traititem"},{"name":"t"}],"output":{"generics":["traititem"],"name":"smallvector"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"implitem"},{"name":"t"}],"output":{"generics":["implitem"],"name":"smallvector"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item","","",null,{"inputs":[{"generics":["item"],"name":"p"},{"name":"t"}],"output":{"generics":["p"],"name":"smallvector"}}],[5,"noop_fold_item_simple","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"foreignitem"},{"name":"t"}],"output":{"name":"foreignitem"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"generics":["pat"],"name":"p"},{"name":"t"}],"output":{"generics":["pat"],"name":"p"}}],[5,"noop_fold_range_end","","",null,{"inputs":[{"name":"rangeend"},{"name":"t"}],"output":{"name":"rangeend"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_opt_expr","","",null,{"inputs":[{"generics":["expr"],"name":"p"},{"name":"t"}],"output":{"generics":["p"],"name":"option"}}],[5,"noop_fold_exprs","","",null,{"inputs":[{"generics":["p"],"name":"vec"},{"name":"t"}],"output":{"generics":["p"],"name":"vec"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"generics":["stmt"],"name":"smallvector"}}],[5,"noop_fold_stmt_kind","","",null,{"inputs":[{"name":"stmtkind"},{"name":"t"}],"output":{"generics":["stmtkind"],"name":"smallvector"}}],[5,"noop_fold_vis","","",null,{"inputs":[{"name":"visibility"},{"name":"t"}],"output":{"name":"visibility"}}],[8,"Folder","","",null,null],[11,"fold_crate","","",132,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_meta_items","","",132,{"inputs":[{"name":"self"},{"generics":["metaitem"],"name":"vec"}],"output":{"generics":["metaitem"],"name":"vec"}}],[11,"fold_meta_list_item","","",132,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"nestedmetaitem"}}],[11,"fold_meta_item","","",132,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"metaitem"}}],[11,"fold_view_path","","",132,{"inputs":[{"name":"self"},{"generics":["viewpath"],"name":"p"}],"output":{"generics":["viewpath"],"name":"p"}}],[11,"fold_foreign_item","","",132,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fold_item","","",132,{"inputs":[{"name":"self"},{"generics":["item"],"name":"p"}],"output":{"generics":["p"],"name":"smallvector"}}],[11,"fold_item_simple","","",132,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"item"}}],[11,"fold_struct_field","","",132,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"structfield"}}],[11,"fold_item_kind","","",132,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"fold_trait_item","","",132,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"generics":["traititem"],"name":"smallvector"}}],[11,"fold_impl_item","","",132,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"generics":["implitem"],"name":"smallvector"}}],[11,"fold_fn_decl","","",132,{"inputs":[{"name":"self"},{"generics":["fndecl"],"name":"p"}],"output":{"generics":["fndecl"],"name":"p"}}],[11,"fold_block","","",132,{"inputs":[{"name":"self"},{"generics":["block"],"name":"p"}],"output":{"generics":["block"],"name":"p"}}],[11,"fold_stmt","","",132,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"generics":["stmt"],"name":"smallvector"}}],[11,"fold_arm","","",132,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_pat","","",132,{"inputs":[{"name":"self"},{"generics":["pat"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[11,"fold_expr","","",132,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"fold_range_end","","",132,{"inputs":[{"name":"self"},{"name":"rangeend"}],"output":{"name":"rangeend"}}],[11,"fold_opt_expr","","",132,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"generics":["p"],"name":"option"}}],[11,"fold_exprs","","",132,{"inputs":[{"name":"self"},{"generics":["p"],"name":"vec"}],"output":{"generics":["p"],"name":"vec"}}],[11,"fold_ty","","",132,{"inputs":[{"name":"self"},{"generics":["ty"],"name":"p"}],"output":{"generics":["ty"],"name":"p"}}],[11,"fold_ty_binding","","",132,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"typebinding"}}],[11,"fold_mod","","",132,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_foreign_mod","","",132,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_global_asm","","",132,{"inputs":[{"name":"self"},{"generics":["globalasm"],"name":"p"}],"output":{"generics":["globalasm"],"name":"p"}}],[11,"fold_variant","","",132,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"variant"}}],[11,"fold_ident","","",132,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_usize","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"fold_path","","",132,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"path"}}],[11,"fold_path_parameters","","",132,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"fold_angle_bracketed_parameter_data","","",132,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"fold_parenthesized_parameter_data","","",132,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"fold_local","","",132,{"inputs":[{"name":"self"},{"generics":["local"],"name":"p"}],"output":{"generics":["local"],"name":"p"}}],[11,"fold_mac","","",132,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"fold_macro_def","","",132,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"macrodef"}}],[11,"fold_lifetime","","",132,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fold_lifetime_def","","",132,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"fold_attribute","","",132,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"fold_arg","","",132,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"arg"}}],[11,"fold_generics","","",132,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"fold_trait_ref","","",132,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"traitref"}}],[11,"fold_poly_trait_ref","","",132,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"polytraitref"}}],[11,"fold_variant_data","","",132,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"variantdata"}}],[11,"fold_lifetimes","","",132,{"inputs":[{"name":"self"},{"generics":["lifetime"],"name":"vec"}],"output":{"generics":["lifetime"],"name":"vec"}}],[11,"fold_lifetime_defs","","",132,{"inputs":[{"name":"self"},{"generics":["lifetimedef"],"name":"vec"}],"output":{"generics":["lifetimedef"],"name":"vec"}}],[11,"fold_ty_param","","",132,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"typaram"}}],[11,"fold_ty_params","","",132,{"inputs":[{"name":"self"},{"generics":["typaram"],"name":"vec"}],"output":{"generics":["typaram"],"name":"vec"}}],[11,"fold_tt","","",132,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"fold_tts","","",132,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"fold_token","","",132,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"token"}}],[11,"fold_interpolated","","",132,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"nonterminal"}}],[11,"fold_opt_lifetime","","",132,{"inputs":[{"name":"self"},{"generics":["lifetime"],"name":"option"}],"output":{"generics":["lifetime"],"name":"option"}}],[11,"fold_opt_bounds","","",132,{"inputs":[{"name":"self"},{"generics":["typarambounds"],"name":"option"}],"output":{"generics":["typarambounds"],"name":"option"}}],[11,"fold_bounds","","",132,{"inputs":[{"name":"self"},{"name":"typarambounds"}],"output":{"name":"typarambounds"}}],[11,"fold_ty_param_bound","","",132,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"typarambound"}}],[11,"fold_mt","","",132,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"mutty"}}],[11,"fold_field","","",132,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"field"}}],[11,"fold_where_clause","","",132,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fold_where_predicate","","",132,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[11,"fold_vis","","",132,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"new_id","","",132,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"new_span","","",132,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[0,"parse","syntex_syntax","The main parser interface",null,null],[3,"ParseSess","syntex_syntax::parse","Info about a parsing session.",null,null],[12,"span_diagnostic","","",133,null],[12,"unstable_features","","",133,null],[12,"config","","",133,null],[12,"missing_fragment_specifiers","","",133,null],[3,"Directory","","",null,null],[12,"path","","",134,null],[12,"ownership","","",134,null],[4,"DirectoryOwnership","","",null,null],[13,"Owned","","",135,null],[13,"UnownedViaBlock","","",135,null],[13,"UnownedViaMod","","",135,null],[5,"parse_crate_from_file","","",null,{"inputs":[{"name":"path"},{"name":"parsesess"}],"output":{"generics":["crate"],"name":"presult"}}],[5,"parse_crate_attrs_from_file","","",null,{"inputs":[{"name":"path"},{"name":"parsesess"}],"output":{"generics":["vec"],"name":"presult"}}],[5,"parse_crate_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"generics":["crate"],"name":"presult"}}],[5,"parse_crate_attrs_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"generics":["vec"],"name":"presult"}}],[5,"parse_expr_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"generics":["p"],"name":"presult"}}],[5,"parse_item_from_source_str","","Parses an item.",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"generics":["option"],"name":"presult"}}],[5,"parse_meta_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"generics":["metaitem"],"name":"presult"}}],[5,"parse_stmt_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"generics":["option"],"name":"presult"}}],[5,"parse_stream_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"tokenstream"}}],[5,"new_parser_from_source_str","","",null,{"inputs":[{"name":"parsesess"},{"name":"string"},{"name":"string"}],"output":{"name":"parser"}}],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate if the file doesn't exist",null,{"inputs":[{"name":"parsesess"},{"name":"path"}],"output":{"name":"parser"}}],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add the file at the given path to the codemap, and return a parser. On an error, use the given span as the source of the problem.",null,{"inputs":[{"name":"parsesess"},{"name":"path"},{"name":"directoryownership"},{"generics":["string"],"name":"option"},{"name":"span"}],"output":{"name":"parser"}}],[5,"filemap_to_parser","","Given a filemap and config, return a parser",null,{"inputs":[{"name":"parsesess"},{"generics":["filemap"],"name":"rc"}],"output":{"name":"parser"}}],[5,"new_parser_from_tts","","",null,{"inputs":[{"name":"parsesess"},{"generics":["tokentree"],"name":"vec"}],"output":{"name":"parser"}}],[5,"filemap_to_stream","","Given a filemap, produce a sequence of token-trees",null,{"inputs":[{"name":"parsesess"},{"generics":["filemap"],"name":"rc"}],"output":{"name":"tokenstream"}}],[5,"stream_to_parser","","Given stream and the `ParseSess`, produce a parser",null,{"inputs":[{"name":"parsesess"},{"name":"tokenstream"}],"output":{"name":"parser"}}],[5,"char_lit","","Parse a string representing a character literal into its final form. Rather than just accepting/rejecting a given literal, unescapes it as well. Can take any slice prefixed by a character escape. Returns the character and the number of characters consumed.",null,null],[5,"escape_default","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"str_lit","","Parse a string representing a string literal into its final form. Does unescaping.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The only operation this does is convert embedded CRLF into a single LF.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"lit_token","","",null,null],[5,"float_lit","","",null,{"inputs":[{"name":"str"},{"generics":["symbol"],"name":"option"},{"name":"option"}],"output":{"generics":["litkind"],"name":"option"}}],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`",null,null],[5,"byte_str_lit","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec"],"name":"rc"}}],[5,"integer_lit","","",null,{"inputs":[{"name":"str"},{"generics":["symbol"],"name":"option"},{"name":"option"}],"output":{"generics":["litkind"],"name":"option"}}],[0,"parser","","",null,null],[3,"Restrictions","syntex_syntax::parse::parser","",null,null],[3,"Parser","","",null,null],[12,"sess","","",136,null],[12,"token","","the current token:",136,null],[12,"span","","the span of the current token:",136,null],[12,"meta_var_span","","the span of the previous token:",136,null],[12,"prev_span","","",136,null],[12,"restrictions","","",136,null],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress extra detail when the same error is seen twice",136,null],[12,"directory","","Used to determine the path to externally loaded source files",136,null],[12,"recurse_into_file_modules","","Whether to parse sub-modules in other files.",136,null],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the name is not known. This does not change while the parser is descending into modules, and sub-parsers have new values for this name.",136,null],[12,"expected_tokens","","",136,null],[12,"desugar_doc_comments","","",136,null],[12,"cfg_mods","","Whether we should configure out of line modules as we parse.",136,null],[3,"ModulePath","","Information about the path to a module.",null,null],[12,"name","","",137,null],[12,"path_exists","","",137,null],[12,"result","","",137,null],[3,"ModulePathSuccess","","",null,null],[12,"path","","",138,null],[12,"directory_ownership","","",138,null],[3,"ModulePathError","","",null,null],[12,"err_msg","","",139,null],[12,"help_msg","","",139,null],[4,"PathStyle","","How to parse a path. There are three different kinds of paths, all of which are parsed somewhat differently.",null,null],[13,"Mod","","A path with no type parameters, e.g. `foo::bar::Baz`, used in imports or visibilities.",140,null],[13,"Type","","A path with a lifetime and type parameters, with no double colons before the type parameters; e.g. `foo::bar<'a>::Baz<T>`, used in types. Paths using this style can be passed into macros expecting `path` nonterminals.",140,null],[13,"Expr","","A path with a lifetime and type parameters with double colons before the type parameters; e.g. `foo::bar::<'a>::Baz::<T>`, used in expressions or patterns.",140,null],[4,"SemiColonMode","","",null,null],[13,"Break","","",141,null],[13,"Ignore","","",141,null],[4,"BlockMode","","",null,null],[13,"Break","","",142,null],[13,"Ignore","","",142,null],[4,"TokenType","","",null,null],[13,"Token","","",143,null],[13,"Keyword","","",143,null],[13,"Operator","","",143,null],[13,"Lifetime","","",143,null],[13,"Ident","","",143,null],[13,"Path","","",143,null],[13,"Type","","",143,null],[4,"Error","","",null,null],[13,"FileNotFoundForModule","","",144,null],[12,"mod_name","syntex_syntax::parse::parser::Error","",144,null],[12,"default_path","","",144,null],[12,"secondary_path","","",144,null],[12,"dir_path","","",144,null],[13,"DuplicatePaths","syntex_syntax::parse::parser","",144,null],[12,"mod_name","syntex_syntax::parse::parser::Error","",144,null],[12,"default_path","","",144,null],[12,"secondary_path","","",144,null],[13,"UselessDocComment","syntex_syntax::parse::parser","",144,null],[13,"InclusiveRangeWithNoEnd","","",144,null],[4,"LhsExpr","","",null,null],[13,"NotYetParsed","","",145,null],[13,"AttributesParsed","","",145,null],[13,"AlreadyParsed","","",145,null],[17,"RESTRICTION_STMT_EXPR","","",null,null],[17,"RESTRICTION_NO_STRUCT_LITERAL","","",null,null],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"restrictions"}}],[11,"partial_cmp","","",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"le","","",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"gt","","",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ge","","",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"cmp","","",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"ordering"}}],[11,"hash","","",146,null],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",146,{"inputs":[],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",146,{"inputs":[],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",146,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",146,{"inputs":[{"name":"u8"}],"output":{"generics":["restrictions"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",146,{"inputs":[{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",146,{"inputs":[{"name":"self"},{"name":"restrictions"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitor_assign","","Adds the set of flags.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitxor_assign","","Toggles the set of flags.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"sub_assign","","Disables all flags enabled in the set.",146,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",146,{"inputs":[{"name":"self"}],"output":{"name":"restrictions"}}],[11,"extend","","",146,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",146,{"inputs":[{"name":"t"}],"output":{"name":"restrictions"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"pathstyle"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"semicolonmode"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"semicolonmode"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"blockmode"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"blockmode"}],"output":{"name":"bool"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"span_err","","",144,{"inputs":[{"name":"self"},{"name":"span"},{"name":"handler"}],"output":{"name":"diagnosticbuilder"}}],[11,"from","","",145,{"inputs":[{"generics":["thinvec"],"name":"option"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"generics":["expr"],"name":"p"}],"output":{"name":"self"}}],[11,"new","","",136,{"inputs":[{"name":"parsesess"},{"name":"tokenstream"},{"generics":["directory"],"name":"option"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"token_to_string","","Convert a token to a string using self's reader",136,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self's reader",136,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"this_token_descr","","",136,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unexpected_last","","",136,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"unexpected","","",136,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"expect","","Expect and consume the token t. Signal an error if the next token is not t.",136,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible, then consume it; if inedible, then return without consuming anything.  Signal a fatal error if next token is unexpected.",136,null],[11,"parse_ident","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"check","","Check if the next token is `tok`, and return `true` if so.",136,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given token was present, false otherwise.",136,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"check_keyword","","",136,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword","","If the next token is the given keyword, eat it and return true. Otherwise, return false.",136,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword_noexpect","","",136,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"expect_keyword","","If the given word is not a keyword, signal an error. If the next token is not the given word, signal an error. Otherwise, eat it.",136,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"presult"}}],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",136,{"inputs":[{"name":"self"}],"output":null}],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",136,{"inputs":[{"name":"self"}],"output":null}],[11,"expect_no_suffix","","",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"generics":["name"],"name":"option"}],"output":null}],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it with a single > and continue. If a GT is not seen, signal an error.",136,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt_or_return","","",136,{"inputs":[{"name":"self"},{"generics":["token"],"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping before the '>'.",136,{"inputs":[{"name":"self"},{"generics":["token"],"name":"option"},{"name":"f"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_seq_to_gt","","",136,{"inputs":[{"name":"self"},{"generics":["token"],"name":"option"},{"name":"f"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_seq_to_gt_or_return","","",136,{"inputs":[{"name":"self"},{"generics":["token"],"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"eat_to_tokens","","Eat and discard tokens until one of `kets` is encountered. Respects token trees, passes through any errors encountered. Used for error recovery.",136,null],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",136,{"inputs":[{"name":"self"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",136,{"inputs":[{"name":"self"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"vec"}}],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",136,{"inputs":[{"name":"self"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_seq","","",136,{"inputs":[{"name":"self"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"generics":["spanned"],"name":"presult"}}],[11,"bump","","Advance the parser by one token",136,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_with","","Advance the parser using provided token as a next one. Use this when consuming a part of a token. For example a single `<` from `<<`.",136,{"inputs":[{"name":"self"},{"name":"token"},{"name":"span"}],"output":null}],[11,"look_ahead","","",136,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[11,"fatal","","",136,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal_err","","",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"error"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal_help","","",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"bug","","",136,null],[11,"warn","","",136,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"span_warn","","",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err","","",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err_help","","",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_bug","","",136,null],[11,"abort_if_errors","","",136,{"inputs":[{"name":"self"}],"output":null}],[11,"diagnostic","","",136,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function type?",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_ty_bare_fn","","parse a TyKind::BareFn type:",136,{"inputs":[{"name":"self"},{"generics":["lifetimedef"],"name":"vec"}],"output":{"generics":["tykind"],"name":"presult"}}],[11,"parse_unsafety","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["unsafety"],"name":"presult"}}],[11,"parse_trait_item","","Parse the items in a trait declaration",136,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["traititem"],"name":"presult"}}],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",136,{"inputs":[{"name":"self"}],"output":{"generics":["functionretty"],"name":"presult"}}],[11,"parse_ty","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_ptr","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["mutty"],"name":"presult"}}],[11,"is_named_argument","","",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require identifier names.",136,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["arg"],"name":"presult"}}],[11,"parse_arg","","Parse a single function argument",136,{"inputs":[{"name":"self"}],"output":{"generics":["arg"],"name":"presult"}}],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",136,{"inputs":[{"name":"self"}],"output":{"generics":["arg"],"name":"presult"}}],[11,"maybe_parse_fixed_length_of_vec","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"presult"}}],[11,"parse_lit_token","","Matches token_lit = LIT_INTEGER | ...",136,{"inputs":[{"name":"self"}],"output":{"generics":["litkind"],"name":"presult"}}],[11,"parse_lit","","Matches lit = true | false | token_lit",136,{"inputs":[{"name":"self"}],"output":{"generics":["lit"],"name":"presult"}}],[11,"parse_pat_literal_maybe_minus","","matches '-' lit | lit",136,{"inputs":[{"name":"self"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_path_segment_ident","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_qualified_path","","Parses qualified path.",136,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"presult"}}],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the mode. The `mode` parameter determines whether lifetimes, types, and/or bounds are permitted and whether `::` must precede type parameter groups.",136,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"generics":["path"],"name":"presult"}}],[11,"parse_path_allowing_meta","","Like `parse_path`, but also supports parsing `Word` meta items into paths for back-compat. This is used when parsing derive macro paths in `#[derive]` attributes.",136,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"generics":["path"],"name":"presult"}}],[11,"parse_path_segments_without_colons","","Examples: - `a::b<T,U>::c<V,W>` - `a::b<T,U>::c(V) -> W` - `a::b<T,U>::c(V)`",136,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_path_segments_with_colons","","Examples: - `a::b::<T,U>::c`",136,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_path_segments_without_types","","Examples: - `a::b::c`",136,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_field_name","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_field","","Parse ident (COLON expr)?",136,{"inputs":[{"name":"self"}],"output":{"generics":["field"],"name":"presult"}}],[11,"mk_expr","","",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"mk_unary","","",136,{"inputs":[{"name":"self"},{"name":"unop"},{"generics":["expr"],"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_binary","","",136,{"inputs":[{"name":"self"},{"name":"binop"},{"generics":["expr"],"name":"p"},{"generics":["expr"],"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_call","","",136,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"},{"generics":["p"],"name":"vec"}],"output":{"name":"exprkind"}}],[11,"mk_index","","",136,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"},{"generics":["expr"],"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_range","","",136,{"inputs":[{"name":"self"},{"generics":["p"],"name":"option"},{"generics":["p"],"name":"option"},{"name":"rangelimits"}],"output":{"generics":["exprkind"],"name":"presult"}}],[11,"mk_field","","",136,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"},{"name":"spannedident"}],"output":{"name":"exprkind"}}],[11,"mk_tup_field","","",136,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"},{"generics":["usize"],"name":"spanned"}],"output":{"name":"exprkind"}}],[11,"mk_assign_op","","",136,{"inputs":[{"name":"self"},{"name":"binop"},{"generics":["expr"],"name":"p"},{"generics":["expr"],"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_mac_expr","","",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"mac_"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"mk_lit_u32","","",136,{"inputs":[{"name":"self"},{"name":"u32"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"parse_block_expr","","Parse a block or unsafe block",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"blockcheckmode"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",136,{"inputs":[{"name":"self"},{"generics":["thinvec"],"name":"option"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_dot_or_call_expr_with","","",136,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"},{"name":"span"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["p"],"name":"presult"}}],[11,"process_potential_macro_variable","","",136,{"inputs":[{"name":"self"}],"output":null}],[11,"parse_token_tree","","parse a single token tree from the input.",136,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"parse_all_token_trees","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_tokens","","",136,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",136,{"inputs":[{"name":"self"},{"generics":["thinvec"],"name":"option"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_assoc_expr","","Parse an associative expression",136,{"inputs":[{"name":"self"},{"generics":["thinvec"],"name":"option"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",136,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"lhsexpr"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",136,{"inputs":[{"name":"self"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",136,{"inputs":[{"name":"self"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_lambda_expr","","",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"captureby"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_else_expr","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",136,{"inputs":[{"name":"self"},{"generics":["spannedident"],"name":"option"},{"name":"span"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",136,{"inputs":[{"name":"self"},{"generics":["spannedident"],"name":"option"},{"name":"span"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",136,{"inputs":[{"name":"self"},{"generics":["spannedident"],"name":"option"},{"name":"span"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_loop_expr","","",136,{"inputs":[{"name":"self"},{"generics":["spannedident"],"name":"option"},{"name":"span"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_catch_expr","","Parse a `do catch {...}` expression (`do catch` token already eaten)",136,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["attribute"],"name":"thinvec"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_arm","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["arm"],"name":"presult"}}],[11,"parse_expr","","Parse an expression",136,{"inputs":[{"name":"self"}],"output":{"generics":["p"],"name":"presult"}}],[11,"with_res","","Evaluate the closure with restrictions in place.",136,{"inputs":[{"name":"self"},{"name":"restrictions"},{"name":"f"}],"output":{"name":"t"}}],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",136,{"inputs":[{"name":"self"},{"name":"restrictions"},{"generics":["thinvec"],"name":"option"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_pat","","Parse a pattern.",136,{"inputs":[{"name":"self"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_stmt","","Parse a statement. This stops just before trailing semicolons on everything but items. e.g. a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.",136,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"presult"}}],[11,"parse_block","","Parse a block. No inner attrs are allowed.",136,{"inputs":[{"name":"self"}],"output":{"generics":["p"],"name":"presult"}}],[11,"parse_full_stmt","","Parse a statement, including the trailing semicolon.",136,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["option"],"name":"presult"}}],[11,"parse_generic_params","","Parses (possibly empty) list of lifetime and type parameters, possibly including trailing comma and erroneous trailing attributes.",136,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where clauses are not parsed here, and must be added later via `parse_where_clause()`.",136,{"inputs":[{"name":"self"}],"output":{"generics":["generics"],"name":"presult"}}],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",136,{"inputs":[{"name":"self"}],"output":{"generics":["whereclause"],"name":"presult"}}],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",136,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["p"],"name":"presult"}}],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_fn_front_matter","","parses all the \"front matter\" for a `fn` declaration, up to and including the `fn` keyword:",136,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_impl_item","","Parse an impl item.",136,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["implitem"],"name":"presult"}}],[11,"parse_record_struct_body","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_tuple_struct_body","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_single_struct_field","","Parse a structure field declaration",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"generics":["attribute"],"name":"vec"}],"output":{"generics":["structfield"],"name":"presult"}}],[11,"parse_visibility","","Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.  If the following element can't be a tuple (i.e. it's a function definition, it's not a tuple struct field) and the contents within the parens isn't valid, emit a proper diagnostic.",136,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["visibility"],"name":"presult"}}],[11,"submod_path_from_attr","","",136,null],[11,"default_submod_path","","Returns either a path to a module, or .",136,{"inputs":[{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"presult"}}],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main entry point for the parser.",136,{"inputs":[{"name":"self"}],"output":{"generics":["crate"],"name":"presult"}}],[11,"parse_optional_str","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","",136,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[0,"lexer","syntex_syntax::parse","",null,null],[3,"TokenAndSpan","syntex_syntax::parse::lexer","",null,null],[12,"tok","","",147,null],[12,"sp","","",147,null],[3,"StringReader","","",null,null],[12,"sess","","",148,null],[12,"next_pos","","The absolute offset within the codemap of the next character to read",148,null],[12,"pos","","The absolute offset within the codemap of the current character",148,null],[12,"col","","The column of the next character to read",148,null],[12,"ch","","The current character (which has been read from self.pos)",148,null],[12,"filemap","","",148,null],[12,"terminator","","If Some, stop reading the source at this position (inclusive).",148,null],[12,"save_new_lines_and_multibyte","","Whether to record new-lines and multibyte chars in filemap. This is only necessary the first time a filemap is lexed. If part of a filemap is being re-lexed, this should be set to false.",148,null],[12,"peek_tok","","",148,null],[12,"peek_span","","",148,null],[12,"fatal_errs","","",148,null],[5,"is_pattern_whitespace","","",null,{"inputs":[{"generics":["char"],"name":"option"}],"output":{"name":"bool"}}],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_block_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"comments","","",null,null],[3,"Comment","syntex_syntax::parse::lexer::comments","",null,null],[12,"style","","",149,null],[12,"lines","","",149,null],[12,"pos","","",149,null],[3,"Literal","","",null,null],[12,"lit","","",150,null],[12,"pos","","",150,null],[4,"CommentStyle","","",null,null],[13,"Isolated","","No code on either side of each line of the comment",151,null],[13,"Trailing","","Code exists to the left of the comment",151,null],[13,"Mixed","","Code before /* foo */ and after the comment",151,null],[13,"BlankLine","","Just a manual blank line \"\\n\\n\", for layout",151,null],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"doc_comment_style","","",null,{"inputs":[{"name":"str"}],"output":{"name":"attrstyle"}}],[5,"strip_doc_comment_decoration","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"gather_comments_and_literals","","",null,null],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"commentstyle"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"comment"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"parse_all_token_trees","syntex_syntax::parse::lexer","",148,{"inputs":[{"name":"self"}],"output":{"generics":["tokenstream"],"name":"presult"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"real_token","","",148,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"try_next_token","","Return the next token. EFFECT: advances the string_reader.",148,{"inputs":[{"name":"self"}],"output":{"generics":["tokenandspan"],"name":"result"}}],[11,"emit_fatal_errors","","",148,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","",148,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"new_raw","","For comments.rs, which hackily pokes into next_pos and ch",148,{"inputs":[{"name":"parsesess"},{"generics":["filemap"],"name":"rc"}],"output":{"name":"self"}}],[11,"new","","",148,{"inputs":[{"name":"parsesess"},{"generics":["filemap"],"name":"rc"}],"output":{"name":"self"}}],[11,"retokenize","","",148,{"inputs":[{"name":"parsesess"},{"name":"span"}],"output":{"name":"self"}}],[11,"ch_is","","",148,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fatal_span","","Report a fatal lexical error with a given span.",148,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err_span","","Report a lexical error with a given span.",148,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start` up to but excluding `self.pos`, meaning the slice does not include the character `self.ch`.",148,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"f"}],"output":{"name":"t"}}],[11,"name_from","","Create a Name from a given offset to the current offset, each adjusted 1 towards each other (assumes that on either side there is a single-byte delimiter).",148,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"name_from_to","","As name_from, with an explicit endpoint.",148,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"bump","","Advance the StringReader by one character. If a newline is discovered, add it to the FileMap's list of line start offsets.",148,{"inputs":[{"name":"self"}],"output":null}],[11,"nextch","","",148,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"nextch_is","","",148,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"nextnextch","","",148,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"nextnextch_is","","",148,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[0,"token","syntex_syntax::parse","",null,null],[4,"BinOpToken","syntex_syntax::parse::token","",null,null],[13,"Plus","","",152,null],[13,"Minus","","",152,null],[13,"Star","","",152,null],[13,"Slash","","",152,null],[13,"Percent","","",152,null],[13,"Caret","","",152,null],[13,"And","","",152,null],[13,"Or","","",152,null],[13,"Shl","","",152,null],[13,"Shr","","",152,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",153,null],[13,"Bracket","","A square bracket: `[` or `]`",153,null],[13,"Brace","","A curly brace: `{` or `}`",153,null],[13,"NoDelim","","An empty delimiter",153,null],[4,"Lit","","",null,null],[13,"Byte","","",154,null],[13,"Char","","",154,null],[13,"Integer","","",154,null],[13,"Float","","",154,null],[13,"Str_","","",154,null],[13,"StrRaw","","",154,null],[13,"ByteStr","","",154,null],[13,"ByteStrRaw","","",154,null],[4,"Token","","",null,null],[13,"Eq","","",155,null],[13,"Lt","","",155,null],[13,"Le","","",155,null],[13,"EqEq","","",155,null],[13,"Ne","","",155,null],[13,"Ge","","",155,null],[13,"Gt","","",155,null],[13,"AndAnd","","",155,null],[13,"OrOr","","",155,null],[13,"Not","","",155,null],[13,"Tilde","","",155,null],[13,"BinOp","","",155,null],[13,"BinOpEq","","",155,null],[13,"At","","",155,null],[13,"Dot","","",155,null],[13,"DotDot","","",155,null],[13,"DotDotDot","","",155,null],[13,"Comma","","",155,null],[13,"Semi","","",155,null],[13,"Colon","","",155,null],[13,"ModSep","","",155,null],[13,"RArrow","","",155,null],[13,"LArrow","","",155,null],[13,"FatArrow","","",155,null],[13,"Pound","","",155,null],[13,"Dollar","","",155,null],[13,"Question","","",155,null],[13,"OpenDelim","","An opening delimiter, eg. `{`",155,null],[13,"CloseDelim","","A closing delimiter, eg. `}`",155,null],[13,"Literal","","",155,null],[13,"Ident","","",155,null],[13,"Underscore","","",155,null],[13,"Lifetime","","",155,null],[13,"Interpolated","","",155,null],[13,"DocComment","","Doc comment",155,null],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",155,null],[13,"Whitespace","","Whitespace",155,null],[13,"Comment","","Comment",155,null],[13,"Shebang","","",155,null],[13,"Eof","","",155,null],[4,"Nonterminal","","For interpolation during macro expansion.",null,null],[13,"NtItem","","",156,null],[13,"NtBlock","","",156,null],[13,"NtStmt","","",156,null],[13,"NtPat","","",156,null],[13,"NtExpr","","",156,null],[13,"NtTy","","",156,null],[13,"NtIdent","","",156,null],[13,"NtMeta","","Stuff inside brackets for attributes",156,null],[13,"NtPath","","",156,null],[13,"NtVis","","",156,null],[13,"NtTT","","",156,null],[13,"NtArm","","",156,null],[13,"NtImplItem","","",156,null],[13,"NtTraitItem","","",156,null],[13,"NtGenerics","","",156,null],[13,"NtWhereClause","","",156,null],[13,"NtArg","","",156,null],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",152,null],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",153,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",153,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"short_name","","",154,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",155,null],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_like_gt","","Returns `true` if the token starts with '>'.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"can_begin_type","","Returns `true` if the token can appear at the start of a type.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lit","","Returns `true` if the token is any literal",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ident","","",155,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"option"}}],[11,"is_ident","","Returns `true` if the token is an identifier.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_doc_comment","","Returns `true` if the token is a documentation comment.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_interpolated","","Returns `true` if the token is interpolated.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_path","","Returns `true` if the token is an interpolated path.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_qpath_start","","",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_path_start","","",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",155,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_path_segment_keyword","","",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_keyword","","Returns `true` if the token is either a strict or reserved keyword.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strict_keyword","","Returns `true` if the token is a strict keyword.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"nonterminal"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"hash","","",156,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"attr","syntex_syntax::parse","",null,null],[11,"parse_outer_attributes","syntex_syntax::parse::parser","Parse attributes that appear before an item",136,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",136,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["attribute"],"name":"presult"}}],[11,"parse_path_and_tokens","","",136,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should be preceded by an exclamation mark, but we accept and warn about one terminated by a semicolon. matches inner_attrs*",136,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_meta_item","","Per RFC#1559, matches the following grammar:",136,{"inputs":[{"name":"self"}],"output":{"generics":["metaitem"],"name":"presult"}}],[11,"parse_meta_item_kind","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["metaitemkind"],"name":"presult"}}],[0,"common","syntex_syntax::parse","Common routines shared by parser mods",null,null],[3,"SeqSep","syntex_syntax::parse::common","`SeqSep` : a sequence separator (token) and whether a trailing separator is allowed.",null,null],[12,"sep","","",157,null],[12,"trailing_sep_allowed","","",157,null],[11,"trailing_allowed","","",157,{"inputs":[{"name":"token"}],"output":{"name":"seqsep"}}],[11,"none","","",157,{"inputs":[],"output":{"name":"seqsep"}}],[0,"classify","syntex_syntax::parse","Routines the parser uses to classify AST nodes",null,null],[5,"expr_requires_semi_to_be_stmt","syntex_syntax::parse::classify","Does this expression require a semicolon to be treated as a statement? The negation of this: 'can this expression be used as a statement without a semicolon' -- is used as an early-bail-out in the parser so that, for instance,     if true {...} else {...}      |x| 5 isn't parsed as (if true {...} else {...} | x) | 5",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"expr_is_simple_block","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it. note that in one case (`stmt_semi`), we've already seen the semicolon, and thus don't need another.",null,{"inputs":[{"name":"stmtkind"}],"output":{"name":"bool"}}],[0,"obsolete","syntex_syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of these syntaxes is tested by compile-test/obsolete-syntax.rs.",null,null],[4,"ObsoleteSyntax","syntex_syntax::parse::obsolete","The specific types of unsupported syntax",null,null],[8,"ParserObsoleteMethods","","",null,null],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",158,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[10,"report","","",158,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"obsoletesyntax"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"hash","","",159,null],[11,"obsolete","syntex_syntax::parse::parser","Reports an obsolete syntax non-fatal error.",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[11,"report","","",136,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[6,"PResult","syntex_syntax::parse","",null,null],[11,"new","","",133,{"inputs":[{"name":"filepathmapping"}],"output":{"name":"self"}}],[11,"with_span_handler","","",133,{"inputs":[{"name":"handler"},{"generics":["codemap"],"name":"rc"}],"output":{"name":"parsesess"}}],[11,"codemap","","",133,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"directory"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"directoryownership"}}],[0,"ptr","syntex_syntax","The AST pointer",null,null],[3,"P","syntex_syntax::ptr","An owned smart pointer.",null,null],[5,"P","","Construct a `P<T>` from a `T` value.",null,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[11,"hash","","",160,null],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",160,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",160,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"le","","",160,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"gt","","",160,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ge","","",160,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"cmp","","",160,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"ordering"}}],[11,"and_then","","Move out of the pointer. Intended for chaining transformations not covered by `map`.",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"unwrap","","Equivalent to and_then(|x| x)",160,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"p"}}],[11,"deref","","",160,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",160,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",160,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",160,{"inputs":[],"output":{"name":"p"}}],[11,"from_vec","","",160,{"inputs":[{"name":"vec"}],"output":{"name":"p"}}],[11,"into_vec","","",160,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"default","","Creates an empty `P<[T]>`.",160,{"inputs":[],"output":{"name":"p"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"from","","",160,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",160,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_iter","","",160,{"inputs":[{"name":"i"}],"output":{"name":"p"}}],[11,"into_iter","","",160,null],[11,"serialize","","",160,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",160,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"show_span","syntex_syntax","Span debugger",null,null],[5,"run","syntex_syntax::show_span","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"crate"}],"output":null}],[0,"std_inject","syntex_syntax","",null,null],[5,"injected_crate_name","syntex_syntax::std_inject","",null,{"inputs":[{"name":"crate"}],"output":{"generics":["str"],"name":"option"}}],[5,"maybe_inject_crates_ref","","",null,{"inputs":[{"name":"crate"},{"generics":["string"],"name":"option"}],"output":{"name":"crate"}}],[0,"str","syntex_syntax","",null,null],[5,"char_at","syntex_syntax::str","",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"char"}}],[0,"test","syntex_syntax","",null,null],[5,"modify_for_testing","syntex_syntax::test","",null,{"inputs":[{"name":"parsesess"},{"name":"resolver"},{"name":"bool"},{"name":"crate"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"tokenstream","syntex_syntax","Token Streams",null,null],[3,"Delimited","syntex_syntax::tokenstream","A delimited sequence of token trees",null,null],[12,"delim","","The type of delimiter",161,null],[12,"tts","","The delimited sequence of token trees",161,null],[3,"TokenStream","","Token Streams",null,null],[3,"Cursor","","",null,null],[3,"ThinTokenStream","","The `TokenStream` type is large enough to represent a single `TokenTree` without allocation. `ThinTokenStream` is smaller, but needs to allocate to represent a single `TokenTree`. We must use `ThinTokenStream` in `TokenTree::Delimited` to avoid infinite size due to recursion.",null,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",162,null],[13,"Delimited","","A delimited sequence of token trees",162,null],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",161,null],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open_token","","Returns the opening delimiter as a token.",161,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"close_token","","Returns the closing delimiter as a token.",161,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"open_tt","","Returns the opening delimiter as a token tree.",161,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"close_tt","","Returns the closing delimiter as a token tree.",161,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"stream","","Returns the token trees inside the delimiters.",161,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",162,null],[11,"parse","","Use this token tree as a matcher to parse given tts.",162,null],[11,"eq_unspanned","","Check if this TokenTree is equal to the other, regardless of span information.",162,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"span","","Retrieve the TokenTree's span.",162,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq_token","","Indicates if the stream is a token that is equal to the provided token.",162,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",163,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from","","",163,{"inputs":[{"name":"token"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",163,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"bool"}}],[11,"empty","","",163,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",163,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"concat","","",163,{"inputs":[{"generics":["tokenstream"],"name":"vec"}],"output":{"name":"tokenstream"}}],[11,"trees","","",163,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"into_trees","","",163,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"eq_unspanned","","Compares two TokenStreams, checking equality without regarding span information.",163,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"bool"}}],[11,"next","","",164,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"original_stream","","",164,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"look_ahead","","",164,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"thintokenstream"}}],[11,"from","","",165,{"inputs":[{"name":"tokenstream"}],"output":{"name":"thintokenstream"}}],[11,"from","","",163,{"inputs":[{"name":"thintokenstream"}],"output":{"name":"tokenstream"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"thintokenstream"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",163,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",163,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",163,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"serialize","","",165,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",165,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",165,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"visit","syntex_syntax","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[4,"FnKind","syntex_syntax::visit","",null,null],[13,"ItemFn","","fn foo() or extern \"Abi\" fn foo()",166,null],[13,"Method","","fn foo(&self)",166,null],[13,"Closure","","|x, y| body",166,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"generics":["name"],"name":"option"}],"output":null}],[5,"walk_opt_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"generics":["ident"],"name":"option"}],"output":null}],[5,"walk_opt_sp_ident","","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"ident"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_list_item","","",null,{"inputs":[{"name":"v"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_global_asm","","",null,{"inputs":[{"name":"v"},{"name":"globalasm"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_name","","",167,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":null}],[11,"visit_ident","","",167,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",167,null],[11,"visit_foreign_item","","",167,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_global_asm","","",167,{"inputs":[{"name":"self"},{"name":"globalasm"}],"output":null}],[11,"visit_item","","",167,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_local","","",167,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",167,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",167,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",167,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",167,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",167,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_post","","",167,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",167,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",167,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_where_predicate","","",167,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[11,"visit_fn","","",167,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",167,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",167,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",167,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",167,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",167,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",167,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",167,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",167,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",167,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",167,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",167,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_mac","","",167,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_mac_def","","",167,{"inputs":[{"name":"self"},{"name":"macrodef"},{"name":"nodeid"}],"output":null}],[11,"visit_path","","",167,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",167,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_segment","","",167,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",167,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",167,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",167,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_vis","","",167,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_fn_ret_ty","","",167,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[0,"print","syntex_syntax","",null,null],[0,"pp","syntex_syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton's Mesa pretty-printer, as described in appendix A of",null,null],[3,"BreakToken","syntex_syntax::print::pp","",null,null],[3,"BeginToken","","",null,null],[3,"PrintStackElem","","",null,null],[3,"Printer","","",null,null],[12,"out","","",168,null],[4,"Breaks","","How to break. Described in more detail in the module docs.",null,null],[13,"Consistent","","",169,null],[13,"Inconsistent","","",169,null],[4,"Token","","",null,null],[13,"String","","",170,null],[13,"Break","","",170,null],[13,"Begin","","",170,null],[13,"End","","",170,null],[13,"Eof","","",170,null],[4,"PrintStackBreak","","",null,null],[13,"Fits","","",171,null],[13,"Broken","","",171,null],[5,"mk_printer","","",null,{"inputs":[{"generics":["write"],"name":"box"},{"name":"usize"}],"output":{"name":"printer"}}],[5,"rbox","","\"raw box\"",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[5,"ibox","","Inconsistent breaking box",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"cbox","","Consistent breaking box",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"break_offset","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[5,"end","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"eof","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"huge_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"zero_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"spaces","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"zerobreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"space","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak_tok_offset","","",null,{"inputs":[{"name":"isize"}],"output":{"name":"token"}}],[5,"hardbreak_tok","","",null,{"inputs":[],"output":{"name":"token"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"breaks"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"breaktoken"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"begintoken"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"is_eof","","",170,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hardbreak_tok","","",170,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"printstackbreak"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"printstackelem"}}],[11,"last_token","","",168,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"replace_last_token","","be very careful with this!",168,{"inputs":[{"name":"self"},{"name":"token"}],"output":null}],[11,"pretty_print","","",168,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"result"}}],[11,"check_stream","","",168,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"scan_push","","",168,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"scan_pop","","",168,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"scan_top","","",168,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"scan_pop_bottom","","",168,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance_right","","",168,{"inputs":[{"name":"self"}],"output":null}],[11,"advance_left","","",168,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"check_stack","","",168,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"print_newline","","",168,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"indent","","",168,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"get_top","","",168,{"inputs":[{"name":"self"}],"output":{"name":"printstackelem"}}],[11,"print_str","","",168,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"print","","",168,{"inputs":[{"name":"self"},{"name":"token"},{"name":"isize"}],"output":{"name":"result"}}],[0,"pprust","syntex_syntax::print","",null,null],[3,"NoAnn","syntex_syntax::print::pprust","",null,null],[3,"CurrentCommentAndLiteral","","",null,null],[12,"cur_cmnt","","",175,null],[12,"cur_lit","","",175,null],[3,"State","","",null,null],[12,"s","","",176,null],[4,"AnnNode","","",null,null],[13,"NodeIdent","","",177,null],[13,"NodeName","","",177,null],[13,"NodeBlock","","",177,null],[13,"NodeItem","","",177,null],[13,"NodeSubItem","","",177,null],[13,"NodeExpr","","",177,null],[13,"NodePat","","",177,null],[5,"rust_printer","","",null,{"inputs":[{"generics":["write"],"name":"box"}],"output":{"name":"state"}}],[5,"rust_printer_annotated","","",null,{"inputs":[{"generics":["write"],"name":"box"},{"name":"ppann"}],"output":{"name":"state"}}],[5,"print_crate","","Requires you to pass an input filename and reader so that it can scan the input text for comments and literals to copy forward.",null,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"crate"},{"name":"string"},{"name":"read"},{"generics":["write"],"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binoptoken"}],"output":{"name":"str"}}],[5,"token_to_string","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"tt_to_string","","",null,{"inputs":[{"name":"tokentree"}],"output":{"name":"string"}}],[5,"tts_to_string","","",null,null],[5,"tokens_to_string","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"string"}}],[5,"stmt_to_string","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"string"}}],[5,"attr_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"ident_to_string","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"string"}}],[5,"vis_to_string","","",null,{"inputs":[{"name":"visibility"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"ident"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"meta_list_item_to_string","","",null,{"inputs":[{"name":"nestedmetaitem"}],"output":{"name":"string"}}],[5,"meta_item_to_string","","",null,{"inputs":[{"name":"metaitem"}],"output":{"name":"string"}}],[5,"attribute_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"lit_to_string","","",null,{"inputs":[{"name":"lit"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"variant"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"mac_to_string","","",null,{"inputs":[{"name":"mac"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"INDENT_UNIT","","",null,null],[17,"DEFAULT_COLUMNS","","",null,null],[8,"PpAnn","","",null,null],[11,"pre","","",178,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"post","","",178,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[8,"PrintState","","",null,null],[10,"writer","","",179,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[10,"boxes","","",179,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"comments","","",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"cur_cmnt_and_lit","","",179,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[10,"literals","","",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"word_space","","",179,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"popen","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pclose","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_begin","","",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_end","","",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_bol","","",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hardbreak_if_not_bol","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"rbox","","",179,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[11,"ibox","","",179,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"end","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"commasep","","",179,null],[11,"next_lit","","",179,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["literal"],"name":"option"}}],[11,"maybe_print_comment","","",179,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"result"}}],[11,"print_comment","","",179,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"result"}}],[11,"next_comment","","",179,{"inputs":[{"name":"self"}],"output":{"generics":["comment"],"name":"option"}}],[11,"print_literal","","",179,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"result"}}],[11,"print_string","","",179,{"inputs":[{"name":"self"},{"name":"str"},{"name":"strstyle"}],"output":{"name":"result"}}],[11,"print_inner_attributes","","",179,null],[11,"print_inner_attributes_no_trailing_hardbreak","","",179,null],[11,"print_outer_attributes","","",179,null],[11,"print_inner_attributes_inline","","",179,null],[11,"print_outer_attributes_inline","","",179,null],[11,"print_either_attributes","","",179,null],[11,"print_attribute","","",179,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"result"}}],[11,"print_attribute_inline","","",179,{"inputs":[{"name":"self"},{"name":"attribute"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_meta_list_item","","",179,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"result"}}],[11,"print_meta_item","","",179,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be meaning-preserving. A quick hack that might help would be to look at the spans embedded in the TTs to decide where to put spaces and newlines. But it'd be better to parse these according to the grammar of the appropriate macro, transcribe back into the grammar we just parsed from, and then pretty-print the resulting AST nodes (so, e.g., we print expression arguments as expressions). It can be done! I think.",179,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"result"}}],[11,"print_tts","","",179,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"result"}}],[11,"space_if_not_bol","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"nbsp","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"noann"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[11,"new_from_input","","",176,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"string"},{"name":"read"},{"generics":["write"],"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",176,{"inputs":[{"name":"codemap"},{"generics":["write"],"name":"box"},{"name":"ppann"},{"generics":["vec"],"name":"option"},{"generics":["vec"],"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",176,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[11,"boxes","","",176,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"comments","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cur_cmnt_and_lit","","",176,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[11,"literals","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cbox","","",176,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"word_nbsp","","",176,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",176,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",176,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bclose_","","",176,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",176,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",176,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"break_offset_if_not_bol","","",176,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",176,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",176,null],[11,"commasep_exprs","","",176,null],[11,"print_mod","","",176,null],[11,"print_foreign_mod","","",176,null],[11,"print_opt_lifetime","","",176,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_type","","",176,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",176,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",176,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_enum_def","","",176,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",176,null],[11,"print_visibility","","",176,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_defaultness","","",176,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"result"}}],[11,"print_struct","","",176,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_variant","","",176,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"print_method_sig","","",176,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"methodsig"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_trait_item","","",176,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",176,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",176,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"result"}}],[11,"print_block","","",176,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",176,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_with_attrs","","",176,null],[11,"print_block_unclosed_indent","","",176,{"inputs":[{"name":"self"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",176,null],[11,"print_block_maybe_unclosed","","",176,null],[11,"print_if","","",176,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"block"},{"generics":["expr"],"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",176,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"generics":["expr"],"name":"option"}],"output":{"name":"result"}}],[11,"print_mac","","",176,{"inputs":[{"name":"self"},{"name":"mac"},{"name":"delimtoken"}],"output":{"name":"result"}}],[11,"check_expr_bin_needs_paren","","",176,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"print_expr_maybe_paren","","",176,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",176,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",176,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_ident","","",176,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"result"}}],[11,"print_usize","","",176,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",176,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"result"}}],[11,"print_for_decl","","",176,{"inputs":[{"name":"self"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_pat","","",176,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",176,{"inputs":[{"name":"self"},{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"generics":["ident"],"name":"option"},{"name":"generics"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_fn_args_and_ret","","",176,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_fn_block_args","","",176,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_capture_clause","","",176,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"result"}}],[11,"print_bounds","","",176,null],[11,"print_lifetime","","",176,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_bounds","","",176,null],[11,"print_generics","","",176,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",176,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",176,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_view_path","","",176,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"result"}}],[11,"print_mutability","","",176,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",176,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_arg","","",176,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_fn_output","","",176,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",176,{"inputs":[{"name":"self"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"generics":["ident"],"name":"option"},{"name":"generics"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",176,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["bytepos"],"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",176,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",176,{"inputs":[{"name":"self"},{"generics":["abi"],"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",176,{"inputs":[{"name":"self"},{"generics":["abi"],"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",176,{"inputs":[{"name":"self"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",176,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"result"}}],[0,"ext","syntex_syntax","",null,null],[0,"hygiene","syntex_syntax::ext","Machinery for hygienic macros, inspired by the MTWT[1] paper.",null,null],[3,"SyntaxContext","syntex_syntax::ext::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[17,"NO_EXPANSION","","",null,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",181,null],[12,"prev_ctxt","","",181,null],[12,"modern","","",181,null],[3,"Mark","","A mark is a unique id associated with a macro expansion.",null,null],[5,"clear_markings","","",null,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",116,null],[12,"callee","","Information about the expansion.",116,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",117,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",117,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",117,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] ",115,null],[13,"MacroBang","","e.g. `format!()`",115,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",115,null],[0,"base","syntex_syntax::ext","",null,null],[3,"MacEager","syntex_syntax::ext::base","`MacResult` implementation for the common case where you've already built each form of AST that you might return.",null,null],[12,"expr","","",182,null],[12,"pat","","",182,null],[12,"items","","",182,null],[12,"impl_items","","",182,null],[12,"trait_items","","",182,null],[12,"stmts","","",182,null],[12,"ty","","",182,null],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue after hitting errors.",null,null],[3,"DummyResolver","","",null,null],[3,"ModuleData","","",null,null],[12,"mod_path","","",183,null],[12,"directory","","",183,null],[3,"ExpansionData","","",null,null],[12,"mark","","",184,null],[12,"depth","","",184,null],[12,"module","","",184,null],[12,"directory_ownership","","",184,null],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go; when a macro expansion occurs, the resulting nodes have the `backtrace() -> expn_info` of their expansion context stored into their span.",null,null],[12,"parse_sess","","",185,null],[12,"ecfg","","",185,null],[12,"crate_root","","",185,null],[12,"resolver","","",185,null],[12,"resolve_err_count","","",185,null],[12,"current_expansion","","",185,null],[12,"expansions","","",185,null],[3,"ChangeSpan","","",null,null],[12,"span","","",186,null],[4,"Annotatable","","",null,null],[13,"Item","","",187,null],[13,"TraitItem","","",187,null],[13,"ImplItem","","",187,null],[4,"MacroKind","","Represents different kinds of macro invocations that can be resolved.",null,null],[13,"Bang","","A bang macro - foo!()",188,null],[13,"Attr","","An attribute macro - #[foo]",188,null],[13,"Derive","","A derive attribute macro - #[derive(Foo)]",188,null],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions.",null,null],[13,"MultiDecorator","","A syntax extension that is attached to an item and creates new items based upon it.",189,null],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it in-place. Also allows decoration, i.e., creating new items.",189,null],[13,"ProcMacro","","A function-like procedural macro. TokenStream -> TokenStream.",189,null],[13,"AttrProcMacro","","An attribute-like procedural macro. TokenStream, TokenStream -> TokenStream. The first TokenSteam is the attribute, the second is the annotated item. Allows modification of the input items and adding new items, similar to MultiModifier, but uses TokenStreams, rather than AST nodes.",189,null],[13,"NormalTT","","A normal, function-like syntax extension.",189,null],[13,"IdentTT","","A function-like syntax extension that has an extra ident before the block.",189,null],[13,"ProcMacroDerive","","An attribute-like procedural macro. TokenStream -> TokenStream. The input is the annotated item. Allows generating code to implement a Trait for a given struct or enum item.",189,null],[13,"BuiltinDerive","","An attribute-like procedural macro that derives a builtin trait.",189,null],[13,"DeclMacro","","A declarative macro, e.g. `macro m() {}`.",189,null],[4,"Determinacy","","",null,null],[13,"Determined","","",190,null],[13,"Undetermined","","",190,null],[5,"expr_to_spanned_string","","Extract a string literal from the macro expanded version of `expr`, emitting `err_msg` if `expr` is not a string literal. This does not stop compilation on error, merely emits a non-fatal error and returns None.",null,{"inputs":[{"name":"extctxt"},{"generics":["expr"],"name":"p"},{"name":"str"}],"output":{"generics":["spanned"],"name":"option"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"extctxt"},{"generics":["expr"],"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function returns even when `tts` is non-empty, macros that need to stop compilation should call `cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be done as rarely as possible).",null,null],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this is not a string literal, emit an error and return None.",null,null],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a parsing error, emit a non-fatal error and return None.",null,null],[6,"MacroExpanderFn","","",null,null],[6,"IdentMacroExpanderFn","","",null,null],[6,"BuiltinDeriveFn","","",null,null],[6,"NamedSyntaxExtension","","",null,null],[8,"MultiItemDecorator","","",null,null],[10,"expand","","",191,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[8,"MultiItemModifier","","",null,null],[10,"expand","","",192,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"}],"output":{"generics":["annotatable"],"name":"vec"}}],[8,"ProcMacro","","",null,null],[10,"expand","","",193,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[8,"AttrProcMacro","","",null,null],[10,"expand","","",194,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results",null,null],[10,"expand","","",195,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"generics":["macresult"],"name":"box"}}],[8,"IdentMacroExpander","","",null,null],[10,"expand","","",196,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"generics":["tokentree"],"name":"vec"}],"output":{"generics":["macresult"],"name":"box"}}],[8,"MacResult","","The result of a macro expansion. The return values of the various methods are spliced into the AST at the callsite of the macro.",null,null],[11,"make_expr","","Create an expression.",197,{"inputs":[{"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[11,"make_items","","Create zero or more items.",197,{"inputs":[{"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_impl_items","","Create zero or more impl items.",197,{"inputs":[{"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_trait_items","","Create zero or more trait items.",197,{"inputs":[{"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_pat","","Create a pattern.",197,{"inputs":[{"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[11,"make_stmts","","Create zero or more statements.",197,{"inputs":[{"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_ty","","",197,{"inputs":[{"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[8,"Resolver","","",null,null],[10,"next_node_id","","",198,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"get_module_scope","","",198,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mark"}}],[10,"eliminate_crate_var","","",198,{"inputs":[{"name":"self"},{"generics":["item"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[10,"is_whitelisted_legacy_custom_derive","","",198,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[10,"visit_expansion","","",198,null],[10,"add_builtin","","",198,{"inputs":[{"name":"self"},{"name":"ident"},{"generics":["syntaxextension"],"name":"rc"}],"output":null}],[10,"resolve_imports","","",198,{"inputs":[{"name":"self"}],"output":null}],[10,"find_legacy_attr_invoc","","",198,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["attribute"],"name":"option"}}],[10,"resolve_invoc","","",198,{"inputs":[{"name":"self"},{"name":"invocation"},{"name":"mark"},{"name":"bool"}],"output":{"generics":["option","determinacy"],"name":"result"}}],[10,"resolve_macro","","",198,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"path"},{"name":"macrokind"},{"name":"bool"}],"output":{"generics":["rc","determinacy"],"name":"result"}}],[10,"check_unused_macros","","",198,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"annotatable"}}],[11,"attrs","","",187,null],[11,"map_attrs","","",187,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",187,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"expect_item","","",187,{"inputs":[{"name":"self"}],"output":{"generics":["item"],"name":"p"}}],[11,"map_item_or","","",187,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"annotatable"}}],[11,"expect_trait_item","","",187,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"expect_impl_item","","",187,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"into","","",187,{"inputs":[{"name":"self"}],"output":{"generics":["annotatable"],"name":"vec"}}],[11,"default","","",182,{"inputs":[],"output":{"name":"maceager"}}],[11,"expr","","",182,{"inputs":[{"generics":["expr"],"name":"p"}],"output":{"generics":["macresult"],"name":"box"}}],[11,"pat","","",182,{"inputs":[{"generics":["pat"],"name":"p"}],"output":{"generics":["macresult"],"name":"box"}}],[11,"items","","",182,{"inputs":[{"generics":["p"],"name":"smallvector"}],"output":{"generics":["macresult"],"name":"box"}}],[11,"impl_items","","",182,{"inputs":[{"generics":["implitem"],"name":"smallvector"}],"output":{"generics":["macresult"],"name":"box"}}],[11,"trait_items","","",182,{"inputs":[{"generics":["traititem"],"name":"smallvector"}],"output":{"generics":["macresult"],"name":"box"}}],[11,"stmts","","",182,{"inputs":[{"generics":["stmt"],"name":"smallvector"}],"output":{"generics":["macresult"],"name":"box"}}],[11,"ty","","",182,{"inputs":[{"generics":["ty"],"name":"p"}],"output":{"generics":["macresult"],"name":"box"}}],[11,"make_expr","","",182,{"inputs":[{"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[11,"make_items","","",182,{"inputs":[{"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_impl_items","","",182,{"inputs":[{"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_trait_items","","",182,{"inputs":[{"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_stmts","","",182,{"inputs":[{"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_pat","","",182,{"inputs":[{"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[11,"make_ty","","",182,{"inputs":[{"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"dummyresult"}}],[11,"any","","Create a default MacResult that can be anything.",199,{"inputs":[{"name":"span"}],"output":{"generics":["macresult"],"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",199,{"inputs":[{"name":"span"}],"output":{"generics":["macresult"],"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",199,{"inputs":[{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",199,{"inputs":[{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",199,{"inputs":[{"name":"span"}],"output":{"generics":["ty"],"name":"p"}}],[11,"make_expr","","",199,{"inputs":[{"generics":["dummyresult"],"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[11,"make_pat","","",199,{"inputs":[{"generics":["dummyresult"],"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[11,"make_items","","",199,{"inputs":[{"generics":["dummyresult"],"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_impl_items","","",199,{"inputs":[{"generics":["dummyresult"],"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_trait_items","","",199,{"inputs":[{"generics":["dummyresult"],"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_stmts","","",199,{"inputs":[{"generics":["dummyresult"],"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_ty","","",199,{"inputs":[{"generics":["dummyresult"],"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"macrokind"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"macrokind"}],"output":{"name":"bool"}}],[11,"hash","","",188,null],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kind","","Return which kind of macro calls this syntax extension.",189,{"inputs":[{"name":"self"}],"output":{"name":"macrokind"}}],[11,"is_modern","","",189,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"determinacy"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_node_id","","",200,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"get_module_scope","","",200,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mark"}}],[11,"eliminate_crate_var","","",200,{"inputs":[{"name":"self"},{"generics":["item"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[11,"is_whitelisted_legacy_custom_derive","","",200,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"visit_expansion","","",200,null],[11,"add_builtin","","",200,{"inputs":[{"name":"self"},{"name":"ident"},{"generics":["syntaxextension"],"name":"rc"}],"output":null}],[11,"resolve_imports","","",200,{"inputs":[{"name":"self"}],"output":null}],[11,"find_legacy_attr_invoc","","",200,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"resolve_invoc","","",200,{"inputs":[{"name":"self"},{"name":"invocation"},{"name":"mark"},{"name":"bool"}],"output":{"generics":["option","determinacy"],"name":"result"}}],[11,"resolve_macro","","",200,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"path"},{"name":"macrokind"},{"name":"bool"}],"output":{"generics":["rc","determinacy"],"name":"result"}}],[11,"check_unused_macros","","",200,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"moduledata"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"expansiondata"}}],[11,"new","","",185,{"inputs":[{"name":"parsesess"},{"name":"expansionconfig"},{"name":"resolver"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",185,{"inputs":[{"name":"self"}],"output":{"name":"macroexpander"}}],[11,"monotonic_expander","","Returns a `Folder` that deeply expands all macros and assigns all node ids in an AST node. Once node ids are assigned, the node may not be expanded, removed, or otherwise modified.",185,{"inputs":[{"name":"self"}],"output":{"name":"macroexpander"}}],[11,"new_parser_from_tts","","",185,null],[11,"codemap","","",185,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"parse_sess","","",185,{"inputs":[{"name":"self"}],"output":{"name":"parsesess"}}],[11,"cfg","","",185,{"inputs":[{"name":"self"}],"output":{"name":"crateconfig"}}],[11,"call_site","","",185,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"backtrace","","",185,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",185,{"inputs":[{"name":"self"}],"output":{"generics":["span"],"name":"option"}}],[11,"struct_span_warn","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",185,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping compilation.",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_warn","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",185,null],[11,"span_bug","","",185,null],[11,"trace_macros_diag","","",185,{"inputs":[{"name":"self"}],"output":null}],[11,"bug","","",185,null],[11,"trace_macros","","",185,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_trace_macros","","",185,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ident_of","","",185,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"ident"}}],[11,"std_path","","",185,null],[11,"name_of","","",185,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"name"}}],[11,"check_unused_macros","","",185,{"inputs":[{"name":"self"}],"output":null}],[11,"new_span","","",186,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"fold_mac","","",186,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[0,"build","syntex_syntax::ext","",null,null],[8,"AstBuilder","syntex_syntax::ext::build","",null,null],[10,"path","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ident"],"name":"vec"}],"output":{"name":"path"}}],[10,"path_ident","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[10,"path_global","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ident"],"name":"vec"}],"output":{"name":"path"}}],[10,"path_all","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"generics":["ident"],"name":"vec"},{"generics":["lifetime"],"name":"vec"},{"generics":["p"],"name":"vec"},{"generics":["typebinding"],"name":"vec"}],"output":{"name":"path"}}],[10,"qpath","","",201,null],[10,"qpath_all","","",201,null],[10,"ty_mt","","",201,{"inputs":[{"name":"self"},{"generics":["ty"],"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[10,"ty","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"tykind"}],"output":{"generics":["ty"],"name":"p"}}],[10,"ty_path","","",201,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ty"],"name":"p"}}],[10,"ty_ident","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"generics":["ty"],"name":"p"}}],[10,"ty_rptr","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ty"],"name":"p"},{"generics":["lifetime"],"name":"option"},{"name":"mutability"}],"output":{"generics":["ty"],"name":"p"}}],[10,"ty_ptr","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ty"],"name":"p"},{"name":"mutability"}],"output":{"generics":["ty"],"name":"p"}}],[10,"ty_option","","",201,{"inputs":[{"name":"self"},{"generics":["ty"],"name":"p"}],"output":{"generics":["ty"],"name":"p"}}],[10,"ty_infer","","",201,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ty"],"name":"p"}}],[10,"typaram","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["attribute"],"name":"vec"},{"name":"typarambounds"},{"generics":["p"],"name":"option"}],"output":{"name":"typaram"}}],[10,"trait_ref","","",201,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"traitref"}}],[10,"poly_trait_ref","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[10,"typarambound","","",201,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"typarambound"}}],[10,"lifetime","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"lifetime"}}],[10,"lifetime_def","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["attribute"],"name":"vec"},{"generics":["lifetime"],"name":"vec"}],"output":{"name":"lifetimedef"}}],[10,"stmt_expr","","",201,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_semi","","",201,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"generics":["expr"],"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let_typed","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"generics":["ty"],"name":"p"},{"generics":["expr"],"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let_type_only","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ty"],"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_item","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["item"],"name":"p"}],"output":{"name":"stmt"}}],[10,"block","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["stmt"],"name":"vec"}],"output":{"generics":["block"],"name":"p"}}],[10,"block_expr","","",201,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"generics":["block"],"name":"p"}}],[10,"expr","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_path","","",201,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_qpath","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_ident","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_self","","",201,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_binary","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"binopkind"},{"generics":["expr"],"name":"p"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_deref","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_unary","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"unop"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_addr_of","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_mut_addr_of","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_field_access","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"name":"ident"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_tup_field_access","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"name":"usize"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_call","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_call_ident","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_call_global","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ident"],"name":"vec"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_method_call","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"name":"ident"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_block","","",201,{"inputs":[{"name":"self"},{"generics":["block"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_cast","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"generics":["ty"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"field_imm","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["expr"],"name":"p"}],"output":{"name":"field"}}],[10,"expr_struct","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"generics":["field"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_struct_ident","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["field"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_lit","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"litkind"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_usize","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_isize","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_u8","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u8"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_u32","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u32"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_bool","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_vec","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_vec_ng","","",201,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_vec_slice","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_str","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_some","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_none","","",201,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_break","","",201,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_tuple","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_fail","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_unreachable","","",201,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_ok","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_err","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_try","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"pat","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"patkind"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_wild","","",201,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_lit","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_ident","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_ident_binding_mode","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_path","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_tuple_struct","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"generics":["p"],"name":"vec"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_struct","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"generics":["spanned"],"name":"vec"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_tuple","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["p"],"name":"vec"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_some","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["pat"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_none","","",201,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_ok","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["pat"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[10,"pat_err","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["pat"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[10,"arm","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["p"],"name":"vec"},{"generics":["expr"],"name":"p"}],"output":{"name":"arm"}}],[10,"arm_unreachable","","",201,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"arm"}}],[10,"expr_match","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"generics":["arm"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_if","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"generics":["expr"],"name":"p"},{"generics":["p"],"name":"option"}],"output":{"generics":["expr"],"name":"p"}}],[10,"expr_loop","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["block"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"lambda_fn_decl","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["fndecl"],"name":"p"},{"generics":["expr"],"name":"p"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[10,"lambda","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ident"],"name":"vec"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"lambda0","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[10,"lambda1","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"name":"ident"}],"output":{"generics":["expr"],"name":"p"}}],[10,"lambda_stmts","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ident"],"name":"vec"},{"generics":["stmt"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"lambda_stmts_0","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["stmt"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[10,"lambda_stmts_1","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["stmt"],"name":"vec"},{"name":"ident"}],"output":{"generics":["expr"],"name":"p"}}],[10,"item","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["attribute"],"name":"vec"},{"name":"itemkind"}],"output":{"generics":["item"],"name":"p"}}],[10,"arg","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["ty"],"name":"p"}],"output":{"name":"arg"}}],[10,"fn_decl","","",201,{"inputs":[{"name":"self"},{"generics":["arg"],"name":"vec"},{"generics":["ty"],"name":"p"}],"output":{"generics":["fndecl"],"name":"p"}}],[10,"item_fn_poly","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["arg"],"name":"vec"},{"generics":["ty"],"name":"p"},{"name":"generics"},{"generics":["block"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_fn","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["arg"],"name":"vec"},{"generics":["ty"],"name":"p"},{"generics":["block"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[10,"variant","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["p"],"name":"vec"}],"output":{"name":"variant"}}],[10,"item_enum_poly","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_enum","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_struct_poly","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_struct","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_mod","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"ident"},{"generics":["attribute"],"name":"vec"},{"generics":["p"],"name":"vec"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_static","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["ty"],"name":"p"},{"name":"mutability"},{"generics":["expr"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_const","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["ty"],"name":"p"},{"generics":["expr"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_ty_poly","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["ty"],"name":"p"},{"name":"generics"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_ty","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["ty"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[10,"attribute","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[10,"meta_word","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[10,"meta_list_item_word","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[10,"meta_list","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"generics":["nestedmetaitem"],"name":"vec"}],"output":{"name":"metaitem"}}],[10,"meta_name_value","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"litkind"}],"output":{"name":"metaitem"}}],[10,"item_use","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"generics":["viewpath"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_use_simple","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_use_simple_","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"generics":["item"],"name":"p"}}],[10,"item_use_list","","",201,null],[10,"item_use_glob","","",201,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"generics":["ident"],"name":"vec"}],"output":{"generics":["item"],"name":"p"}}],[11,"path","syntex_syntax::ext::base","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ident"],"name":"vec"}],"output":{"name":"path"}}],[11,"path_ident","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"path_global","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ident"],"name":"vec"}],"output":{"name":"path"}}],[11,"path_all","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"generics":["ident"],"name":"vec"},{"generics":["lifetime"],"name":"vec"},{"generics":["p"],"name":"vec"},{"generics":["typebinding"],"name":"vec"}],"output":{"name":"path"}}],[11,"qpath","","Constructs a qualified path.",185,null],[11,"qpath_all","","Constructs a qualified path.",185,null],[11,"ty_mt","","",185,{"inputs":[{"name":"self"},{"generics":["ty"],"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[11,"ty","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"tykind"}],"output":{"generics":["ty"],"name":"p"}}],[11,"ty_path","","",185,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ty"],"name":"p"}}],[11,"ty_ident","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"generics":["ty"],"name":"p"}}],[11,"ty_rptr","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ty"],"name":"p"},{"generics":["lifetime"],"name":"option"},{"name":"mutability"}],"output":{"generics":["ty"],"name":"p"}}],[11,"ty_ptr","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ty"],"name":"p"},{"name":"mutability"}],"output":{"generics":["ty"],"name":"p"}}],[11,"ty_option","","",185,{"inputs":[{"name":"self"},{"generics":["ty"],"name":"p"}],"output":{"generics":["ty"],"name":"p"}}],[11,"ty_infer","","",185,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ty"],"name":"p"}}],[11,"typaram","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["attribute"],"name":"vec"},{"name":"typarambounds"},{"generics":["p"],"name":"option"}],"output":{"name":"typaram"}}],[11,"trait_ref","","",185,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"traitref"}}],[11,"poly_trait_ref","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[11,"typarambound","","",185,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"typarambound"}}],[11,"lifetime","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"lifetime"}}],[11,"lifetime_def","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["attribute"],"name":"vec"},{"generics":["lifetime"],"name":"vec"}],"output":{"name":"lifetimedef"}}],[11,"stmt_expr","","",185,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_semi","","",185,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"generics":["expr"],"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let_typed","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"generics":["ty"],"name":"p"},{"generics":["expr"],"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let_type_only","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ty"],"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_item","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["item"],"name":"p"}],"output":{"name":"stmt"}}],[11,"block_expr","","",185,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"generics":["block"],"name":"p"}}],[11,"block","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["stmt"],"name":"vec"}],"output":{"generics":["block"],"name":"p"}}],[11,"expr","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_path","","",185,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_qpath","","Constructs a QPath expression.",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_ident","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_self","","",185,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_binary","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"binopkind"},{"generics":["expr"],"name":"p"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_deref","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_unary","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"unop"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_field_access","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"name":"ident"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_tup_field_access","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"name":"usize"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_addr_of","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_mut_addr_of","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_call","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_call_ident","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_call_global","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ident"],"name":"vec"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_method_call","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"name":"ident"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_block","","",185,{"inputs":[{"name":"self"},{"generics":["block"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"field_imm","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["expr"],"name":"p"}],"output":{"name":"field"}}],[11,"expr_struct","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"generics":["field"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_struct_ident","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["field"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_lit","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"litkind"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_usize","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_isize","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_u32","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u32"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_u8","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u8"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_bool","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_vec","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_vec_ng","","",185,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_vec_slice","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_str","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_cast","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"generics":["ty"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_some","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_none","","",185,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_break","","",185,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_tuple","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["p"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_fail","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_unreachable","","",185,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_ok","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_err","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_try","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"pat","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"patkind"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_wild","","",185,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_lit","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_ident","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_ident_binding_mode","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_path","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_tuple_struct","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"generics":["p"],"name":"vec"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_struct","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"generics":["spanned"],"name":"vec"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_tuple","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["p"],"name":"vec"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_some","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["pat"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_none","","",185,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_ok","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["pat"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[11,"pat_err","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["pat"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[11,"arm","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["p"],"name":"vec"},{"generics":["expr"],"name":"p"}],"output":{"name":"arm"}}],[11,"arm_unreachable","","",185,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"arm"}}],[11,"expr_match","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"generics":["arm"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_if","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"generics":["expr"],"name":"p"},{"generics":["p"],"name":"option"}],"output":{"generics":["expr"],"name":"p"}}],[11,"expr_loop","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["block"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"lambda_fn_decl","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["fndecl"],"name":"p"},{"generics":["expr"],"name":"p"},{"name":"span"}],"output":{"generics":["expr"],"name":"p"}}],[11,"lambda","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ident"],"name":"vec"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"lambda0","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"lambda1","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["expr"],"name":"p"},{"name":"ident"}],"output":{"generics":["expr"],"name":"p"}}],[11,"lambda_stmts","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["ident"],"name":"vec"},{"generics":["stmt"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"lambda_stmts_0","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["stmt"],"name":"vec"}],"output":{"generics":["expr"],"name":"p"}}],[11,"lambda_stmts_1","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"generics":["stmt"],"name":"vec"},{"name":"ident"}],"output":{"generics":["expr"],"name":"p"}}],[11,"arg","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["ty"],"name":"p"}],"output":{"name":"arg"}}],[11,"fn_decl","","",185,{"inputs":[{"name":"self"},{"generics":["arg"],"name":"vec"},{"generics":["ty"],"name":"p"}],"output":{"generics":["fndecl"],"name":"p"}}],[11,"item","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["attribute"],"name":"vec"},{"name":"itemkind"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_fn_poly","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["arg"],"name":"vec"},{"generics":["ty"],"name":"p"},{"name":"generics"},{"generics":["block"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_fn","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["arg"],"name":"vec"},{"generics":["ty"],"name":"p"},{"generics":["block"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[11,"variant","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["p"],"name":"vec"}],"output":{"name":"variant"}}],[11,"item_enum_poly","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_enum","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_struct","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_struct_poly","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_mod","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"ident"},{"generics":["attribute"],"name":"vec"},{"generics":["p"],"name":"vec"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_static","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["ty"],"name":"p"},{"name":"mutability"},{"generics":["expr"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_const","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["ty"],"name":"p"},{"generics":["expr"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_ty_poly","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["ty"],"name":"p"},{"name":"generics"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_ty","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"generics":["ty"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[11,"attribute","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[11,"meta_word","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[11,"meta_list_item_word","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[11,"meta_list","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"generics":["nestedmetaitem"],"name":"vec"}],"output":{"name":"metaitem"}}],[11,"meta_name_value","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"litkind"}],"output":{"name":"metaitem"}}],[11,"item_use","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"generics":["viewpath"],"name":"p"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_use_simple","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_use_simple_","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"generics":["item"],"name":"p"}}],[11,"item_use_list","","",185,null],[11,"item_use_glob","","",185,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"generics":["ident"],"name":"vec"}],"output":{"generics":["item"],"name":"p"}}],[0,"derive","syntex_syntax::ext","",null,null],[5,"collect_derives","syntex_syntax::ext::derive","",null,{"inputs":[{"name":"extctxt"},{"name":"vec"}],"output":{"generics":["path"],"name":"vec"}}],[5,"add_derived_markers","","",null,null],[0,"expand","syntex_syntax::ext","",null,null],[3,"Invocation","syntex_syntax::ext::expand","",null,null],[12,"kind","","",202,null],[12,"expansion_data","","",202,null],[3,"MacroExpander","","",null,null],[12,"cx","","",203,null],[3,"ExpansionConfig","","",null,null],[12,"crate_name","","",204,null],[12,"features","","",204,null],[12,"recursion_limit","","",204,null],[12,"trace_mac","","",204,null],[12,"should_test","","",204,null],[12,"single_step","","",204,null],[12,"keep_macs","","",204,null],[4,"ExpansionKind","","",null,null],[13,"OptExpr","","",205,null],[13,"Expr","","",205,null],[13,"Pat","","",205,null],[13,"Ty","","",205,null],[13,"Stmts","","",205,null],[13,"Items","","",205,null],[13,"TraitItems","","",205,null],[13,"ImplItems","","",205,null],[4,"Expansion","","",null,null],[13,"OptExpr","","",206,null],[13,"Expr","","",206,null],[13,"Pat","","",206,null],[13,"Ty","","",206,null],[13,"Stmts","","",206,null],[13,"Items","","",206,null],[13,"TraitItems","","",206,null],[13,"ImplItems","","",206,null],[4,"InvocationKind","","",null,null],[13,"Bang","","",207,null],[12,"mac","syntex_syntax::ext::expand::InvocationKind","",207,null],[12,"ident","","",207,null],[12,"span","","",207,null],[13,"Attr","syntex_syntax::ext::expand","",207,null],[12,"attr","syntex_syntax::ext::expand::InvocationKind","",207,null],[12,"traits","","",207,null],[12,"item","","",207,null],[13,"Derive","syntex_syntax::ext::expand","",207,null],[12,"path","syntex_syntax::ext::expand::InvocationKind","",207,null],[12,"item","","",207,null],[5,"find_attr_invoc","syntex_syntax::ext::expand","",null,{"inputs":[{"name":"vec"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"expansionkind"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"expansionkind"}],"output":{"name":"bool"}}],[11,"name","","",205,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"make_opt_expr","","",206,{"inputs":[{"name":"self"}],"output":{"generics":["p"],"name":"option"}}],[11,"make_expr","","",206,{"inputs":[{"name":"self"}],"output":{"generics":["expr"],"name":"p"}}],[11,"make_pat","","",206,{"inputs":[{"name":"self"}],"output":{"generics":["pat"],"name":"p"}}],[11,"make_ty","","",206,{"inputs":[{"name":"self"}],"output":{"generics":["ty"],"name":"p"}}],[11,"make_stmts","","",206,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"smallvector"}}],[11,"make_items","","",206,{"inputs":[{"name":"self"}],"output":{"generics":["p"],"name":"smallvector"}}],[11,"make_trait_items","","",206,{"inputs":[{"name":"self"}],"output":{"generics":["traititem"],"name":"smallvector"}}],[11,"make_impl_items","","",206,{"inputs":[{"name":"self"}],"output":{"generics":["implitem"],"name":"smallvector"}}],[11,"fold_with","","",206,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"visit_with","","",206,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"fold_opt_expr","","",203,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"generics":["p"],"name":"option"}}],[11,"fold_expr","","",203,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"fold_pat","","",203,{"inputs":[{"name":"self"},{"generics":["pat"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[11,"fold_ty","","",203,{"inputs":[{"name":"self"},{"generics":["ty"],"name":"p"}],"output":{"generics":["ty"],"name":"p"}}],[11,"fold_stmt","","",203,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"generics":["stmt"],"name":"smallvector"}}],[11,"fold_item","","",203,{"inputs":[{"name":"self"},{"generics":["item"],"name":"p"}],"output":{"generics":["p"],"name":"smallvector"}}],[11,"fold_trait_item","","",203,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"generics":["traititem"],"name":"smallvector"}}],[11,"fold_impl_item","","",203,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"generics":["implitem"],"name":"smallvector"}}],[11,"new","","",203,{"inputs":[{"name":"extctxt"},{"name":"bool"}],"output":{"name":"self"}}],[11,"expand_crate","","",203,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"parse_expansion","syntex_syntax::parse::parser","",136,{"inputs":[{"name":"self"},{"name":"expansionkind"},{"name":"bool"}],"output":{"generics":["expansion"],"name":"presult"}}],[11,"ensure_complete_parse","","",136,{"inputs":[{"name":"self"},{"name":"path"},{"name":"str"},{"name":"span"}],"output":null}],[11,"default","syntex_syntax::ext::expand","",204,{"inputs":[{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_asm","","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_global_asm","","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_log_syntax","","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_concat_idents","","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_trace_macros","","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_allow_internal_unstable","","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_custom_derive","","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"proc_macro_enabled","","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"placeholders","syntex_syntax::ext","",null,null],[3,"PlaceholderExpander","syntex_syntax::ext::placeholders","",null,null],[5,"placeholder","","",null,{"inputs":[{"name":"expansionkind"},{"name":"nodeid"}],"output":{"name":"expansion"}}],[11,"new","","",208,{"inputs":[{"name":"extctxt"},{"name":"bool"}],"output":{"name":"self"}}],[11,"add","","",208,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"expansion"},{"generics":["mark"],"name":"vec"}],"output":null}],[11,"fold_item","","",208,{"inputs":[{"name":"self"},{"generics":["item"],"name":"p"}],"output":{"generics":["p"],"name":"smallvector"}}],[11,"fold_trait_item","","",208,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"generics":["traititem"],"name":"smallvector"}}],[11,"fold_impl_item","","",208,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"generics":["implitem"],"name":"smallvector"}}],[11,"fold_expr","","",208,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"generics":["expr"],"name":"p"}}],[11,"fold_opt_expr","","",208,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"p"}],"output":{"generics":["p"],"name":"option"}}],[11,"fold_stmt","","",208,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"generics":["stmt"],"name":"smallvector"}}],[11,"fold_pat","","",208,{"inputs":[{"name":"self"},{"generics":["pat"],"name":"p"}],"output":{"generics":["pat"],"name":"p"}}],[11,"fold_ty","","",208,{"inputs":[{"name":"self"},{"generics":["ty"],"name":"p"}],"output":{"generics":["ty"],"name":"p"}}],[11,"fold_block","","",208,{"inputs":[{"name":"self"},{"generics":["block"],"name":"p"}],"output":{"generics":["block"],"name":"p"}}],[11,"fold_mod","","",208,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_mac","","",208,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[0,"quote","syntex_syntax::ext","",null,null],[5,"unflatten","syntex_syntax::ext::quote","",null,{"inputs":[{"generics":["tokentree"],"name":"vec"}],"output":{"generics":["tokentree"],"name":"vec"}}],[5,"parse_expr_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"generics":["expr"],"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"generics":["p"],"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"generics":["pat"],"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"generics":["ty"],"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"generics":["stmt"],"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"parse_arg_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arg"}}],[5,"parse_block_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"generics":["block"],"name":"p"}}],[5,"parse_meta_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"metaitem"}}],[5,"parse_path_panic","","",null,{"inputs":[{"name":"parser"},{"name":"pathstyle"}],"output":{"name":"path"}}],[5,"expand_quote_tokens","","",null,null],[5,"expand_quote_expr","","",null,null],[5,"expand_quote_item","","",null,null],[5,"expand_quote_pat","","",null,null],[5,"expand_quote_arm","","",null,null],[5,"expand_quote_ty","","",null,null],[5,"expand_quote_stmt","","",null,null],[5,"expand_quote_attr","","",null,null],[5,"expand_quote_arg","","",null,null],[5,"expand_quote_block","","",null,null],[5,"expand_quote_meta_item","","",null,null],[5,"expand_quote_path","","",null,null],[0,"rt","","Quasiquoting works via token trees.",null,null],[3,"BytePos","syntex_syntax::ext::quote::rt","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",209,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",210,null],[12,"hi","","",210,null],[12,"ctxt","","Information about where the macro came from, if this piece of code was created by a macro expansion.",210,null],[17,"DUMMY_SP","","",null,null],[8,"ToTokens","","",null,null],[10,"to_tokens","","",211,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",212,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["item"],"name":"p"}}],[10,"parse_expr","","",212,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["expr"],"name":"p"}}],[10,"parse_stmt","","",212,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"stmt"}}],[10,"parse_tts","","",212,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::tokenstream","",162,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::codemap","",118,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",0,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::ptr","",160,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",43,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::ptr","",160,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",42,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::ptr","",160,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","","",160,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",34,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::ptr","",160,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",28,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"to_tokens","syntex_syntax::ext::quote::rt","",213,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"parse_item","syntex_syntax::ext::base","",185,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["item"],"name":"p"}}],[11,"parse_stmt","","",185,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"stmt"}}],[11,"parse_expr","","",185,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["expr"],"name":"p"}}],[11,"parse_tts","","",185,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["tokentree"],"name":"vec"}}],[0,"source_util","syntex_syntax::ext","",null,null],[5,"expand_line","syntex_syntax::ext::source_util","line!(): expands to the current line number",null,null],[5,"expand_column","","",null,null],[5,"expand_file","","file!(): expands to the current filename */ The filemap (`loc.file`) contains a bunch more information we could spit out if we wanted.",null,null],[5,"expand_stringify","","",null,null],[5,"expand_mod","","",null,null],[5,"expand_include","","include! : parse the given file as an expr This is generally a bad idea because it's going to behave unhygienically.",null,null],[5,"expand_include_str","","",null,null],[5,"expand_include_bytes","","",null,null],[0,"tt","syntex_syntax::ext","",null,null],[0,"transcribe","syntex_syntax::ext::tt","",null,null],[5,"transcribe","syntex_syntax::ext::tt::transcribe","This can do Macro-By-Example transcription. On the other hand, if `src` contains no `TokenTree::{Sequence, Match}`s, or `SubstNt`s, `interp` can (and should) be None.",null,{"inputs":[{"name":"handler"},{"generics":["hashmap"],"name":"option"},{"generics":["tokentree"],"name":"vec"}],"output":{"name":"tokenstream"}}],[0,"macro_parser","syntex_syntax::ext::tt","This is an Earley-like parser, without support for in-grammar nonterminals, only by calling out to the main rust parser for named nonterminals (which it commits to fully when it hits one in a grammar). This means that there are no completer or predictor rules, and therefore no need to store one column per token: instead, there's a set of current Earley items and a set of next ones. Instead of NTs, we have a special case for Kleene star. The big-O, in pathological cases, is worse than traditional Earley parsing, but it's an easier fit for Macro-by-Example-style rules, and I think the overhead is lower. (In order to prevent the pathological case, we'd need to lazily construct the resulting `NamedMatch`es at the very end. It'd be a pain, and require more memory to keep around old items, but it would also save overhead)",null,null],[4,"NamedMatch","syntex_syntax::ext::tt::macro_parser","`NamedMatch` is a pattern-match result for a single `token::MATCH_NONTERMINAL`: so it is associated with a single ident in a parse, and all `MatchedNonterminal`s in the `NamedMatch` have the same nonterminal type (expr, item, etc). Each leaf in a single `NamedMatch` corresponds to a single `token::MATCH_NONTERMINAL` in the `TokenTree` that produced it.",null,null],[13,"MatchedSeq","","",214,null],[13,"MatchedNonterminal","","",214,null],[4,"ParseResult","","",null,null],[13,"Success","","",215,null],[13,"Failure","","Arm failed to match. If the second parameter is `token::Eof`, it indicates an unexpected end of macro invocation. Otherwise, it indicates that no rules expected the given token.",215,null],[13,"Error","","Fatal error (malformed macro?). Abort compilation.",215,null],[5,"count_names","","",null,null],[5,"parse_failure_msg","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"parse","","",null,null],[6,"NamedParseResult","","",null,null],[0,"macro_rules","syntex_syntax::ext::tt","",null,null],[3,"ParserAnyMacro","syntex_syntax::ext::tt::macro_rules","",null,null],[5,"compile","","Converts a `macro_rules!` invocation into a syntax extension.",null,{"inputs":[{"name":"parsesess"},{"name":"refcell"},{"name":"item"}],"output":{"name":"syntaxextension"}}],[11,"make","","",216,{"inputs":[{"generics":["parseranymacro"],"name":"box"},{"name":"expansionkind"}],"output":{"name":"expansion"}}],[0,"quoted","syntex_syntax::ext::tt","",null,null],[3,"Delimited","syntex_syntax::ext::tt::quoted","",null,null],[12,"delim","","",217,null],[12,"tts","","",217,null],[3,"SequenceRepetition","","",null,null],[12,"tts","","The sequence of token trees",218,null],[12,"separator","","The optional separator",218,null],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",218,null],[12,"num_captures","","The number of `Match`s that appear in the sequence (and subsequences)",218,null],[4,"KleeneOp","","A Kleene-style repetition operator for token sequences.",null,null],[13,"ZeroOrMore","","",219,null],[13,"OneOrMore","","",219,null],[4,"TokenTree","","Similar to `tokenstream::TokenTree`, except that `$i`, `$i:ident`, and `$(...)` are \"first-class\" token trees.",null,null],[13,"Token","","",220,null],[13,"Delimited","","",220,null],[13,"Sequence","","A kleene-style repetition sequence with a span",220,null],[13,"MetaVarDecl","","Matches a nonterminal. This is only used in the left hand side of MBE macros.",220,null],[5,"parse","","",null,{"inputs":[{"name":"tokenstream"},{"name":"bool"},{"name":"parsesess"}],"output":{"generics":["tokentree"],"name":"vec"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",217,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",217,null],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open_token","","",217,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"close_token","","",217,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"open_tt","","",217,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"close_tt","","",217,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"sequencerepetition"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"self"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"hash","","",218,null],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"kleeneop"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"hash","","",219,null],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",220,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",220,null],[11,"len","","",220,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",220,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_tt","","",220,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"tokentree"}}],[11,"span","","Retrieve the TokenTree's span.",220,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[14,"panictry","syntex_syntax","",null,null],[14,"unwrap_or","","",null,null],[14,"register_diagnostic","","",null,null],[14,"span_fatal","","",null,null],[14,"span_err","","",null,null],[14,"span_warn","","",null,null],[14,"struct_err","","",null,null],[14,"span_err_or_warn","","",null,null],[14,"struct_span_fatal","","",null,null],[14,"struct_span_err","","",null,null],[14,"struct_span_warn","","",null,null],[14,"struct_span_err_or_warn","","",null,null],[14,"span_note","","",null,null],[14,"span_help","","",null,null],[14,"help","","",null,null],[14,"register_diagnostics","","",null,null],[14,"register_long_diagnostics","","",null,null],[14,"walk_list","","",null,null],[11,"with_empty_ctxt","syntex_syntax::ast","",0,{"inputs":[{"name":"symbol"}],"output":{"name":"ident"}}],[11,"from_str","","Maps a string to an identifier with an empty syntax context.",0,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[11,"modern","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"partial_cmp","","",221,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",221,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"le","","",221,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"gt","","",221,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ge","","",221,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"partial_cmp","syntex_syntax::ext::quote::rt","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"le","","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"gt","","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ge","","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",209,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",209,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",209,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",209,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"partial_cmp","syntex_syntax::ext::hygiene","",222,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",222,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"le","","",222,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"gt","","",222,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ge","","",222,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"partial_cmp","syntex_syntax::symbol","",223,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",223,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",223,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",223,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",223,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"as_ref","","",223,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"from_usize","syntex_syntax::ext::quote::rt","",209,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",209,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","syntex_syntax::ext::hygiene","",222,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"clone","syntex_syntax::symbol","",223,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"clone","syntex_syntax::ext::hygiene","",117,{"inputs":[{"name":"self"}],"output":{"name":"nameandspan"}}],[11,"clone","syntex_syntax::ast","",221,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"clone","syntex_syntax::ext::hygiene","",116,{"inputs":[{"name":"self"}],"output":{"name":"expninfo"}}],[11,"clone","syntex_syntax::symbol::keywords","",225,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"clone","syntex_syntax::ext::hygiene","",115,{"inputs":[{"name":"self"}],"output":{"name":"expnformat"}}],[11,"clone","syntex_syntax::ext::quote::rt","",209,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"clone","syntex_syntax::ext::hygiene","",181,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontextdata"}}],[11,"clone","syntex_syntax::ext::quote::rt","",210,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","syntex_syntax::ast","",0,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"add","syntex_syntax::ext::quote::rt","",209,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",209,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"cmp","syntex_syntax::ast","",221,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"ordering"}}],[11,"cmp","syntex_syntax::ext::hygiene","",222,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"ordering"}}],[11,"cmp","syntex_syntax::symbol","",223,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"cmp","syntex_syntax::ext::quote::rt","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"cmp","","",209,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"hash","syntex_syntax::ext::hygiene","",116,null],[11,"hash","syntex_syntax::ext::quote::rt","",209,null],[11,"hash","syntex_syntax::ext::hygiene","",222,null],[11,"hash","syntex_syntax::ext::quote::rt","",210,null],[11,"hash","syntex_syntax::ast","",0,null],[11,"hash","syntex_syntax::symbol","",223,null],[11,"hash","syntex_syntax::ext::hygiene","",224,null],[11,"hash","syntex_syntax::ast","",221,null],[11,"hash","syntex_syntax::ext::hygiene","",115,null],[11,"hash","","",117,null],[11,"eq","syntex_syntax::ext::quote::rt","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"eq","syntex_syntax::symbol","",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","syntex_syntax::ast","",221,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","syntex_syntax::ext::hygiene","",224,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"eq","syntex_syntax::symbol::keywords","",225,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eq","syntex_syntax::ast","",0,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"eq","syntex_syntax::ext::hygiene","",222,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"eq","syntex_syntax::ext::quote::rt","",209,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"fmt","syntex_syntax::ast","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","syntex_syntax::symbol","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize","syntex_syntax::ext::hygiene","",222,{"inputs":[{"name":"d"}],"output":{"generics":["syntaxcontext"],"name":"result"}}],[11,"deserialize","syntex_syntax::symbol","",223,{"inputs":[{"name":"d"}],"output":{"generics":["internedstring"],"name":"result"}}],[11,"deserialize","syntex_syntax::ext::quote::rt","",210,{"inputs":[{"name":"__d"}],"output":{"generics":["span"],"name":"result"}}],[11,"deserialize","syntex_syntax::ast","",0,{"inputs":[{"name":"d"}],"output":{"generics":["ident"],"name":"result"}}],[11,"deserialize","syntex_syntax::ext::quote::rt","",209,{"inputs":[{"name":"__d"}],"output":{"generics":["bytepos"],"name":"result"}}],[11,"deserialize","syntex_syntax::ast","",221,{"inputs":[{"name":"d"}],"output":{"generics":["symbol"],"name":"result"}}],[11,"deserialize","syntex_syntax::ext::hygiene","",224,{"inputs":[{"name":"__d"}],"output":{"generics":["mark"],"name":"result"}}],[11,"deref","syntex_syntax::symbol","",223,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","syntex_syntax::ext::hygiene","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","syntex_syntax::ast","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","syntex_syntax::ext::hygiene","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","syntex_syntax::ast","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","syntex_syntax::ext::hygiene","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","syntex_syntax::symbol","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","syntex_syntax::ext::quote::rt","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","syntex_syntax::ext::hygiene","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","syntex_syntax::ext::quote::rt","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","syntex_syntax::ext::hygiene","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",181,{"inputs":[],"output":{"name":"syntaxcontextdata"}}],[11,"default","","",222,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"default","syntex_syntax::symbol","",226,{"inputs":[],"output":{"name":"interner"}}],[11,"default","syntex_syntax::ext::hygiene","",224,{"inputs":[],"output":{"name":"mark"}}],[11,"serialize","syntex_syntax::ast","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","syntex_syntax::ext::hygiene","",222,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","syntex_syntax::ext::quote::rt","",210,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","syntex_syntax::symbol","",223,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","syntex_syntax::ast","",221,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","syntex_syntax::ext::quote::rt","",209,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","syntex_syntax::ext::hygiene","",224,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_ident","syntex_syntax::ast","",221,{"inputs":[{"name":"ident"}],"output":{"name":"symbol"}}],[11,"to_ident","","",221,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"intern","","Maps a string to its interned representation.",221,{"inputs":[{"name":"str"}],"output":{"name":"symbol"}}],[11,"interned","","",221,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"gensym","","gensym's a new usize, using the current interner.",221,{"inputs":[{"name":"str"}],"output":{"name":"symbol"}}],[11,"gensymed","","",221,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"as_str","","",221,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"as_u32","","",221,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","syntex_syntax::symbol","",226,{"inputs":[],"output":{"name":"interner"}}],[11,"intern","","",226,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"symbol"}}],[11,"interned","","",226,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"symbol"}}],[11,"get","","",226,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"str"}}],[11,"ident","syntex_syntax::symbol::keywords","",225,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"name","","",225,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"move_flat_map","syntex_syntax::ptr","",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntex_syntax::codemap","",118,null],[11,"map_attrs","","",118,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntex_syntax::ptr","",160,null],[11,"map_attrs","","",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"name","syntex_syntax::ext::hygiene","",117,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"empty","","",222,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"apply_mark","","Extend a syntax context with a given mark",222,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"syntaxcontext"}}],[11,"remove_mark","","",222,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"adjust","","Adjust this context for resolution in a scope created by the given expansion. For example, consider the following three resolutions of `f`: `rust mod foo { pub fn f() {} } // `f`'s `SyntaxContext` is empty. m!(f); macro m($f:ident) { mod bar { pub fn f() {} // `f`'s `SyntaxContext` has a single `Mark` from `m`. pub fn $f() {} // `$f`'s `SyntaxContext` is empty. } foo::f(); // `f`'s `SyntaxContext` has a single `Mark` from `m` //^ Since `mod foo` is outside this expansion, `adjust` removes the mark from `f`, //| and it resolves to `::foo::f`. bar::f(); // `f`'s `SyntaxContext` has a single `Mark` from `m` //^ Since `mod bar` not outside this expansion, `adjust` does not change `f`, //| and it resolves to `::bar::f`. bar::$f(); // `f`'s `SyntaxContext` is empty. //^ Since `mod bar` is not outside this expansion, `adjust` does not change `$f`, //| and it resolves to `::bar::$f`. }` This returns the expansion whose definition scope we use to privacy check the resolution, or `None` if we privacy check as usual (i.e. not w.r.t. a macro definition scope).",222,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"generics":["mark"],"name":"option"}}],[11,"glob_adjust","","Adjust this context for resolution in a scope created by the given expansion via a glob import with the given `SyntaxContext`. For example, `rust m!(f); macro m($i:ident) { mod foo { pub fn f() {} // `f`'s `SyntaxContext` has a single `Mark` from `m`. pub fn $i() {} // `$i`'s `SyntaxContext` is empty. } n(f); macro n($j:ident) { use foo::*; f(); // `f`'s `SyntaxContext` has a mark from `m` and a mark from `n` //^ `glob_adjust` removes the mark from `n`, so this resolves to `foo::f`. $i(); // `$i`'s `SyntaxContext` has a mark from `n` //^ `glob_adjust` removes the mark from `n`, so this resolves to `foo::$i`. $j(); // `$j`'s `SyntaxContext` has a mark from `m` //^ This cannot be glob-adjusted, so this is a resolution error. } }` This returns `None` if the context cannot be glob-adjusted. Otherwise, it returns the scope to use when privacy checking (see `adjust` for details).",222,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"syntaxcontext"}],"output":{"generics":["option"],"name":"option"}}],[11,"reverse_glob_adjust","","Undo `glob_adjust` if possible: `rust if let Some(privacy_checking_scope) = self.reverse_glob_adjust(expansion, glob_ctxt) { assert!(self.glob_adjust(expansion, glob_ctxt) == Some(privacy_checking_scope)); }`",222,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"syntaxcontext"}],"output":{"generics":["option"],"name":"option"}}],[11,"modern","","",222,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"outer","","",222,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"fresh","","",224,{"inputs":[{"name":"mark"}],"output":{"name":"mark"}}],[11,"root","","The mark of the theoretical expansion that generates freshly parsed, unexpanded AST.",224,{"inputs":[],"output":{"name":"mark"}}],[11,"as_u32","","",224,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_u32","","",224,{"inputs":[{"name":"u32"}],"output":{"name":"mark"}}],[11,"expn_info","","",224,{"inputs":[{"name":"self"}],"output":{"generics":["expninfo"],"name":"option"}}],[11,"set_expn_info","","",224,null],[11,"modern","","",224,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"is_modern","","",224,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_modern","","",224,null],[11,"is_descendant_of","","",224,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"make_expr","syntex_syntax::ext::tt::macro_rules","",216,{"inputs":[{"generics":["parseranymacro"],"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[11,"make_pat","","",216,{"inputs":[{"generics":["parseranymacro"],"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[11,"make_ty","","",216,{"inputs":[{"generics":["parseranymacro"],"name":"box"}],"output":{"generics":["p"],"name":"option"}}],[11,"make_stmts","","",216,{"inputs":[{"generics":["parseranymacro"],"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_items","","",216,{"inputs":[{"generics":["parseranymacro"],"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_trait_items","","",216,{"inputs":[{"generics":["parseranymacro"],"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"make_impl_items","","",216,{"inputs":[{"generics":["parseranymacro"],"name":"box"}],"output":{"generics":["smallvector"],"name":"option"}}],[11,"end_point","syntex_syntax::ext::quote::rt","Returns a new span representing just the end-point of this span",210,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"next_point","","Returns a new span representing the next character after the end-point of this span",210,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for the macro callsite that expanded to it.",210,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_callee","","Return the source callee.",210,{"inputs":[{"name":"self"}],"output":{"generics":["nameandspan"],"name":"option"}}],[11,"allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable] items can be used (that is, a macro marked with `#[allow_internal_unstable]`).",210,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"macro_backtrace","","",210,{"inputs":[{"name":"self"}],"output":{"generics":["macrobacktrace"],"name":"vec"}}],[11,"to","","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"between","","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"until","","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}]],"paths":[[3,"Ident"],[3,"ErrorInfo"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[3,"SmallVector"],[3,"IntoIter"],[8,"MoveMap"],[3,"ThinVec"],[3,"RcSlice"],[3,"JsonEmitter"],[4,"Abi"],[3,"AbiData"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MetaItem"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Stmt"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Mac_"],[3,"MacroDef"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"GlobalAsm"],[3,"EnumDef"],[3,"Variant_"],[3,"PathListItem_"],[3,"AttrId"],[3,"Attribute"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"Item"],[3,"ForeignItem"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"NestedMetaItemKind"],[4,"MetaItemKind"],[4,"BindingMode"],[4,"RangeEnd"],[4,"PatKind"],[4,"Mutability"],[4,"BinOpKind"],[4,"UnOp"],[4,"StmtKind"],[4,"MacStmtStyle"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"RangeLimits"],[4,"ExprKind"],[4,"CaptureBy"],[4,"StrStyle"],[4,"LitIntType"],[4,"LitKind"],[4,"TraitItemKind"],[4,"ImplItemKind"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"TyKind"],[4,"AsmDialect"],[4,"SelfKind"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"VariantData"],[4,"ItemKind"],[4,"ForeignItemKind"],[3,"NodeId"],[3,"Stability"],[3,"RustcDeprecation"],[3,"Deprecation"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"HasAttrs"],[6,"NestedMetaItem"],[4,"ExpnFormat"],[3,"ExpnInfo"],[3,"NameAndSpan"],[3,"Spanned"],[3,"CodeMap"],[8,"FileLoader"],[3,"RealFileLoader"],[3,"FilePathMapping"],[3,"StripUnconfigured"],[4,"EntryPointType"],[3,"Features"],[4,"AttributeType"],[4,"AttributeGate"],[4,"Stability"],[4,"GateIssue"],[4,"UnstableFeatures"],[3,"GatedCfg"],[8,"Folder"],[3,"ParseSess"],[3,"Directory"],[4,"DirectoryOwnership"],[3,"Parser"],[3,"ModulePath"],[3,"ModulePathSuccess"],[3,"ModulePathError"],[4,"PathStyle"],[4,"SemiColonMode"],[4,"BlockMode"],[4,"TokenType"],[4,"Error"],[4,"LhsExpr"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[3,"SeqSep"],[8,"ParserObsoleteMethods"],[4,"ObsoleteSyntax"],[3,"P"],[3,"Delimited"],[4,"TokenTree"],[3,"TokenStream"],[3,"Cursor"],[3,"ThinTokenStream"],[4,"FnKind"],[8,"Visitor"],[3,"Printer"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"PrintStackElem"],[3,"CurrentCommentAndLiteral"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[8,"PrintState"],[3,"NoAnn"],[3,"SyntaxContextData"],[3,"MacEager"],[3,"ModuleData"],[3,"ExpansionData"],[3,"ExtCtxt"],[3,"ChangeSpan"],[4,"Annotatable"],[4,"MacroKind"],[4,"SyntaxExtension"],[4,"Determinacy"],[8,"MultiItemDecorator"],[8,"MultiItemModifier"],[8,"ProcMacro"],[8,"AttrProcMacro"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[8,"Resolver"],[3,"DummyResult"],[3,"DummyResolver"],[8,"AstBuilder"],[3,"Invocation"],[3,"MacroExpander"],[3,"ExpansionConfig"],[4,"ExpansionKind"],[4,"Expansion"],[4,"InvocationKind"],[3,"PlaceholderExpander"],[3,"BytePos"],[3,"Span"],[8,"ToTokens"],[8,"ExtParseUtils"],[6,"Lit"],[4,"NamedMatch"],[4,"ParseResult"],[3,"ParserAnyMacro"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"TokenTree"],[3,"Name"],[3,"SyntaxContext"],[3,"InternedString"],[3,"Mark"],[3,"Keyword"],[3,"Interner"]]};
searchIndex["telamon"] = {"doc":"","items":[[0,"codegen","telamon","Helpers to generate code from an IR instance and fully specified decisions.",null,null],[3,"Dimension","telamon::codegen","An iteration dimension composed of one or mure fused dimensions.",null,null],[3,"InductionLevel","","An induction level associated to a dimension.",null,null],[12,"ind_var","","",0,null],[12,"increment","","",0,null],[12,"base","","",0,null],[3,"InductionVar","","An induction variable, composed of multiple induction variable levels.",null,null],[12,"id","","",1,null],[12,"value","","",1,null],[3,"Function","","A function ready to execute on a device, derived from a constrained IR instance.",null,null],[3,"InternalMemBlock","","A memory block allocated by the kernel.",null,null],[3,"Instruction","","An instruction to execute.",null,null],[3,"NameMap","","Maps variables to names.",null,null],[4,"Cfg","","Represents a CFG of the targeted device.",null,null],[13,"Root","","Represents the root node of the CFG.",2,null],[13,"Loop","","Represents a loop in the CFG.",2,null],[13,"Instruction","","Represents an instruction in the CFG.",2,null],[13,"Threads","","Defines the set of active thread dimensions.",2,null],[4,"ParamVal","","Represents the value of a parameter passed to the kernel by the host.",null,null],[13,"External","","A parameter given by the caller.",3,null],[13,"Size","","A tiled dimension size computed on the host.",3,null],[13,"GlobalMem","","A pointer to a global memory block, allocated by the wrapper.",3,null],[4,"ParamValKey","","Uniquely identifies a `ParamVal`.",null,null],[13,"External","","",4,null],[13,"Size","","",4,null],[13,"GlobalMem","","",4,null],[4,"AllocationScheme","","Indicates how is a memory block allocated.",null,null],[13,"Global","","",5,null],[13,"PrivatisedGlobal","","",5,null],[13,"Shared","","",5,null],[4,"Value","","A value that can be named.",null,null],[13,"InductionLevel","","",6,null],[13,"Operand","","",6,null],[11,"dimensions","","Iterates over the dimensions of the `Cfg`.",2,null],[11,"instructions","","Iterates over the instructions of the `Cfg`.",2,null],[11,"induction_levels","","Iterates over the induction levels in the `Cfg`.",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","Returns the ID of the representant.",7,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"kind","","Returns the kind of the dimension.",7,{"inputs":[{"name":"self"}],"output":{"name":"dimkind"}}],[11,"size","","Returns the size of the dimensions.",7,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"dim_ids","","Returns the ids of the `ir::Dimensions` represented by this dimension.",7,null],[11,"induction_levels","","Returns the induction levels handled by this loop.",7,null],[11,"drain_induction_levels","","Gives the ownership on the induction levels computed by the dimension.",7,{"inputs":[{"name":"self"}],"output":{"generics":["inductionlevel"],"name":"vec"}}],[11,"merge_from","","Merge another `Dimension` into this one.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"host_values","","Returns the values to pass from the host to the device to implement `self`.",7,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"t","","Returns the type of the value created by the induction level.",0,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"host_values","","Returns the values to pass from the host to the device to implement `self`.",0,null],[11,"host_values","","Returns the values to pass from the host to the device to implement `self`.",1,null],[11,"build","","Creates a device `Function` from an IR instance.",8,{"inputs":[{"name":"searchspace"}],"output":{"name":"function"}}],[11,"thread_dims","","Returns the ordered list of thread dimensions.",8,null],[11,"block_dims","","Returns the ordered list of block dimensions.",8,null],[11,"dimensions","","Iterates other all `codegen::Dimension`.",8,null],[11,"induction_vars","","Returns the list of induction variables.",8,null],[11,"num_threads","","Returns the total number of threads to allocate.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"device_code_args","","Returns the values to pass from the host to the device.",8,null],[11,"cfg","","Returns the control flow graph.",8,{"inputs":[{"name":"self"}],"output":{"name":"cfg"}}],[11,"induction_levels","","Returns all the induction levels in the function.",8,null],[11,"mem_blocks","","Returns the memory blocks allocated by the function.",8,null],[11,"space","","Returns the underlying implementation space.",8,{"inputs":[{"name":"self"}],"output":{"name":"searchspace"}}],[11,"init_induction_levels","","Returns the induction levels computed at the beginning of the kernel. Levels must be computed in the provided order.",8,null],[11,"deref","","",8,null],[11,"from_operand","","Builds the `ParamVal` needed to implement an operand, if any.",3,{"inputs":[{"name":"operand"},{"name":"searchspace"}],"output":{"name":"option"}}],[11,"from_size","","Builds the `ParamVal` needed to get a size value, if any.",3,{"inputs":[{"name":"size"}],"output":{"name":"option"}}],[11,"t","","Returns the type of the parameter.",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"is_pointer","","Indicates if the parameter is a pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"key","","Returns a unique identifier for the `ParamVal`.",3,{"inputs":[{"name":"self"}],"output":{"name":"paramvalkey"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"paramvalkey"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"paramvalkey"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"paramvalkey"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"allocationscheme"}],"output":{"name":"bool"}}],[11,"new","","Creates a new InternalMemBlock from an `ir::mem::Internal`.",9,{"inputs":[{"name":"internalblock"},{"name":"option"},{"name":"searchspace"}],"output":{"name":"self"}}],[11,"host_values","","Returns the value to pass from the host to the device to implement `self`.",9,null],[11,"id","","Returns the memory ID.",9,{"inputs":[{"name":"self"}],"output":{"name":"internalid"}}],[11,"alloc_scheme","","Indicates how is the memory block allocated.",9,{"inputs":[{"name":"self"}],"output":{"name":"allocationscheme"}}],[11,"alloc_size","","Generates the size of the memory to allocate.",9,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"local_size","","Returns the size of the part of the allocated memory accessible by each thread.",9,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"mem_space","","Returns the memory space the block is allocated in.",9,{"inputs":[{"name":"self"}],"output":{"name":"memspace"}}],[11,"ptr_type","","Returns the type of the pointer to the memory block.",9,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"new","","Creates a new `Instruction`.",10,{"inputs":[{"name":"instruction"},{"name":"searchspace"}],"output":{"name":"self"}}],[11,"id","","Returns the ID of the instruction.",10,{"inputs":[{"name":"self"}],"output":{"name":"instid"}}],[11,"host_values","","Returns the values to pass from the host to implement this instruction.",10,null],[11,"t","","Returns the type of the instruction.",10,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"operator","","Returns the operator computed by the instruction.",10,{"inputs":[{"name":"self"}],"output":{"name":"operator"}}],[11,"instantiation_dims","","Returns the dimensions on which to instantiate the instruction.",10,null],[11,"as_reduction","","Indicates if the instruction performs a reduction, in wich case it returns the instruction that initializes the reduction, the `DimMap` to readh it and the reduction dimensions.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mem_flag","","Returns the memory flag of the intruction, if any.",10,{"inputs":[{"name":"self"}],"output":{"generics":["instflag"],"name":"option"}}],[11,"has_side_effects","","Indicates if the instruction has observable side effects.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"new","","Creates a new `NameMap`.",11,{"inputs":[{"name":"function"},{"name":"namer"}],"output":{"name":"self"}}],[11,"gen_name","","Generates a variable of the given `Type`.",11,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"string"}}],[11,"name","","",11,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["str"],"name":"cow"}}],[11,"name_op","","Asigns a name to an operand.",11,{"inputs":[{"name":"self"},{"name":"operand"}],"output":{"generics":["str"],"name":"cow"}}],[11,"name_inst","","Returns the name of the instruction.",11,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"str"}}],[11,"name_inst_id","","Returns the name of the instruction.",11,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"dimmap"}],"output":{"name":"str"}}],[11,"name_index","","Returns the name of an index.",11,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"str"}}],[11,"set_current_index","","Set the current index of an unrolled dimension.",11,{"inputs":[{"name":"self"},{"name":"dimension"},{"name":"u32"}],"output":null}],[11,"unset_current_index","","Unset the current index of an unrolled dimension.",11,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":null}],[11,"indexed_inst_name","","",11,{"inputs":[{"name":"self"},{"name":"instruction"},{"name":"id"},{"name":"u32"}],"output":{"name":"string"}}],[11,"indexed_op_name","","",11,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"id"},{"name":"u32"}],"output":{"name":"string"}}],[11,"name_param","","Returns the name of a variable representing a parameter.",11,{"inputs":[{"name":"self"},{"name":"paramvalkey"}],"output":{"generics":["str"],"name":"cow"}}],[11,"name_param_val","","Returns the name of a variable representing a parameter value.",11,{"inputs":[{"name":"self"},{"name":"paramvalkey"}],"output":{"generics":["str"],"name":"cow"}}],[11,"name_addr","","Returns the name of the address of a memory block.",11,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"generics":["str"],"name":"cow"}}],[11,"name_induction_var","","Assigns a name to an induction variable.",11,{"inputs":[{"name":"self"},{"name":"indvarid"},{"generics":["id"],"name":"option"}],"output":{"generics":["str"],"name":"cow"}}],[11,"declare_size_cast","","Declares a size cast. Returns the name of the variable only if a new variable was allcoated.",11,{"inputs":[{"name":"self"},{"name":"size"},{"name":"type"}],"output":{"generics":["string"],"name":"option"}}],[11,"name_size","","Assigns a name of a value to a size.",11,{"inputs":[{"name":"self"},{"name":"size"},{"name":"type"}],"output":{"generics":["str"],"name":"cow"}}],[11,"side_effect_guard","","Returns the side-effect guard, if any is set.",11,{"inputs":[{"name":"self"}],"output":{"generics":["rcstr"],"name":"option"}}],[11,"set_side_effect_guard","","Sets the predicate to use in front of side-effect instruction.",11,{"inputs":[{"name":"self"},{"generics":["rcstr"],"name":"option"}],"output":null}],[8,"Namer","","Assign names to variables.",null,null],[10,"name","","Provides a name for a variable of the given type.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"string"}}],[10,"name_param","","Generates a name for a parameter.",12,{"inputs":[{"name":"self"},{"name":"paramvalkey"}],"output":{"name":"string"}}],[10,"name_float","","Provides a name for a floating point constant.",12,{"inputs":[{"name":"self"},{"name":"ratio"},{"name":"u16"}],"output":{"name":"string"}}],[10,"name_int","","Provides a name for an integer constant.",12,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"u16"}],"output":{"name":"string"}}],[0,"helper","telamon","Helper functions to build an IR instance.",null,null],[3,"Builder","telamon::helper","Helper to build a `Function`.",null,null],[3,"SignatureBuilder","","Helper struct to build a `Signature`.",null,null],[3,"Reduce","","Helper to build `Reduce` operands.",null,null],[12,"0","","",13,null],[3,"TmpArray","","Helper to build dim maps that can be lowered to temporary memory.",null,null],[12,"0","","",14,null],[3,"DimGroup","","A groups of dimensions that act as a single logical dimension.",null,null],[11,"new","","Creates a new `Builder` for a `Function` with the given signature.",15,{"inputs":[{"name":"signature"},{"name":"device"}],"output":{"name":"builder"}}],[11,"get","","Returns the function created by the builder",15,{"inputs":[{"name":"self"}],"output":{"name":"searchspace"}}],[11,"get_clone","","Returns the function created by the builder",15,{"inputs":[{"name":"self"}],"output":{"name":"searchspace"}}],[11,"binop","","Creates a binary operator.",15,{"inputs":[{"name":"self"},{"name":"binop"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"add","","Adds an `Add` instruction to the fuction.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"sub","","Adds a `Sub` instruction to the function.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"mul","","Adds a `Mul` instruction to the function. Defaults to low mode.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"mul_ex","","Adds a 'Mul` instruction with a wide mode to the function.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"},{"name":"type"}],"output":{"name":"instid"}}],[11,"mad","","Adds a `Mad` or `Fma` instruction to the function. Defaults to low or wide mode depending on the operand types.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"div","","Adds a `Div` instruction to the fuction.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"mov","","Adds a `Mov` instruction to the function.",15,{"inputs":[{"name":"self"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"ld","","Adds a coherent load from global memory instruction to the function.",15,{"inputs":[{"name":"self"},{"name":"type"},{"name":"autooperand"},{"name":"accesspattern"}],"output":{"name":"instid"}}],[11,"ld_nc","","Adds a non-coherent load from global memory instruction to the function.",15,{"inputs":[{"name":"self"},{"name":"type"},{"name":"autooperand"},{"name":"accesspattern"}],"output":{"name":"instid"}}],[11,"ld_ex","","Adds a load instruction with the given flags and memory block.",15,{"inputs":[{"name":"self"},{"name":"type"},{"name":"autooperand"},{"name":"accesspattern"},{"name":"instflag"}],"output":{"name":"instid"}}],[11,"st","","Adds a store instruction.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"},{"name":"accesspattern"}],"output":{"name":"instid"}}],[11,"st_ex","","Adds a store instruction with the given flags and memory block.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"},{"name":"bool"},{"name":"accesspattern"},{"name":"instflag"}],"output":{"name":"instid"}}],[11,"cast","","Adds a cast instruction to the given type.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"type"}],"output":{"name":"instid"}}],[11,"type_of","","Returns the type of an operand.",15,{"inputs":[{"name":"self"},{"name":"autooperand"}],"output":{"name":"type"}}],[11,"order","","Restricts the order between two basic blocks. Does not restricts LINK and NPACK flags.",15,{"inputs":[{"name":"self"},{"name":"metabasicblock"},{"name":"metabasicblock"},{"name":"order"}],"output":null}],[11,"tensor_access","","Builds both an induction variable for a tensor memory access and the corresponding access pattern.",15,null],[11,"action","","Applies an action on the function.",15,{"inputs":[{"name":"self"},{"name":"action"}],"output":null}],[11,"open_dim","","Opens a new dimension.",15,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"id"}}],[11,"open_dim_ex","","Opens a nest of new dimension with the given kinds and sizes.",15,{"inputs":[{"name":"self"},{"name":"size"},{"name":"dimkind"}],"output":{"name":"id"}}],[11,"open_tiled_dim","","Open multiple dimensions to represent a tiled dimension.",15,null],[11,"open_mapped_dim","","Opens a new dimension mapped to an existing one.",15,{"inputs":[{"name":"self"},{"name":"metadimension"}],"output":{"name":"dimgroup"}}],[11,"reopen_dim","","Opens an existing dimension.",15,{"inputs":[{"name":"self"},{"name":"metadimension"}],"output":null}],[11,"reopen_mapped_dim","","Opens an existing dimension and maps it to another one. The dimension mapped to is closed if needed.",15,{"inputs":[{"name":"self"},{"name":"metadimension"},{"name":"metadimension"}],"output":null}],[11,"close_dim","","Closes a dimension.",15,{"inputs":[{"name":"self"},{"name":"metadimension"}],"output":null}],[11,"cst_size","","Returns a constant size.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"size"}}],[11,"param_size","","Returns a parameter size.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"size"}}],[11,"tile_size","","Returns a tiled size.",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":{"name":"size"}}],[11,"size","","Returns a size from the given parameters, dividend and divisor.",15,null],[11,"allocate_shared","","Allocates a memory block in shared memory.",15,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"internalid"}}],[11,"allocate","","Allocates a memory block.",15,{"inputs":[{"name":"self"},{"name":"size"},{"name":"bool"}],"output":{"name":"internalid"}}],[11,"unknown_access_pattern","","Generates an access paterns with all the strides unknown on the opened dimensions.",15,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"accesspattern"}}],[11,"tensor_access_pattern","","Generates the access pattern corresponding to accessing a tensor of the given type. The data is assumed to be laid out contiguously in the order given by dimensions. The last dimension is the major order.",15,null],[11,"induction_var","","Builds an induction variable.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"vec"}],"output":{"name":"indvarid"}}],[11,"dim_map","","Creates a dim-map operand.",15,null],[11,"get","","",13,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"get","","",14,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"new","","Creates a new builder for a function with the given name.",16,{"inputs":[{"name":"str"},{"name":"am"}],"output":{"name":"self"}}],[11,"scalar","","Creates a new parameter and binds it to the given value.",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":null}],[11,"array","","Creates a new parameter and binds it to a freshly allocated an array.",16,null],[11,"tensor","","Allocates an n-dimensional array.",16,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["dimsize"],"name":"vec"},{"name":"bool"}],"output":{"name":"tensor"}}],[11,"eval_size","","Evaluates a size in the context.",16,{"inputs":[{"name":"self"},{"name":"dimsize"}],"output":{"name":"u32"}}],[11,"get","","Returns the `Signature` created by the builder.",16,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[0,"tensor","","Utilities to allocate and operate on tensors.",null,null],[3,"Tensor","telamon::helper::tensor","A tensor allocated in main memory.",null,null],[3,"VirtualTensor","","A tensor loaded in registers.",null,null],[4,"DimSize","","A dimension size, before tiling.",null,null],[13,"Const","","",17,null],[13,"Param","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"dimsize"}}],[11,"into_ir_size","","Convert the size into the size type used by the IR.",17,{"inputs":[{"name":"self"},{"name":"builder"}],"output":{"name":"size"}}],[11,"into_num","","Converts the size into a numerical value for a given context.",17,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"u32"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",17,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"new","","Allocates a new `Tensor` in the context.",18,{"inputs":[{"name":"str"},{"generics":["dimsize"],"name":"vec"},{"name":"bool"},{"name":"id"},{"generics":["arrayargument"],"name":"arc"}],"output":{"name":"self"}}],[11,"load","","Creates a `VirtualTensor` that contains the values of `self`, loaded in registers.",18,null],[11,"read_to_host","","Reads the tensor value in the context and copies it on the host.",18,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"arrayd"}}],[11,"new","","Creates a new `VirtualTensor`.",19,{"inputs":[{"name":"instid"},{"generics":["dimgroup"],"name":"vec"}],"output":{"name":"self"}}],[11,"dim_map","","Creates an operand that yeilds the values of the tensor in the given loop nest.",19,null],[11,"store","","Stores the `VirtualTensor` in memory.",19,{"inputs":[{"name":"self"},{"name":"tensor"},{"name":"builder"}],"output":{"name":"virtualtensor"}}],[11,"inst","","Returns the underlying instruction.",19,{"inputs":[{"name":"self"}],"output":{"name":"instid"}}],[11,"index","","",19,null],[8,"AutoOperand","telamon::helper","Represents values that can be turned into an `Operand`.",null,null],[10,"get","","Returns the corresponding `Operand`.",20,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[8,"MetaDimension","","A logical dimension, possible composed of multiple nested dimensions.",null,null],[10,"ids","","Returns the ids of the underlying dimensions.",21,{"inputs":[{"name":"self"}],"output":{"generics":["doubleendediterator"],"name":"box"}}],[8,"MetaBasicBlock","","A logical basic block, that can actually be implemented by multiple ones.",null,null],[10,"ids","","Returns the ids on the underlying basic blocks.",22,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"dimgroup"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"dimgroup"}}],[11,"new","","Creates a dimension group containing the given dimensions.",23,{"inputs":[{"generics":["id"],"name":"vec"}],"output":{"name":"self"}}],[11,"iter","","Iterates over the sub-dimensions of the group.",23,{"inputs":[{"name":"self"}],"output":{"generics":["iter"],"name":"cloned"}}],[11,"ids","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["doubleendediterator"],"name":"box"}}],[11,"index","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"id"}}],[0,"device","telamon","Code generation and candidate evaluation for specific targets.",null,null],[4,"EvalMode","telamon::device","Indicates how evaluation should be performed.",null,null],[13,"FindBest","","Find the best candidate, skip bad candidates and allow optimizations.",24,null],[13,"TestBound","","Test the performance model, do not skip candidates and do not optimize.",24,null],[5,"read_array","","Copies the array to the host, interpreting it as an array of `T`.",null,{"inputs":[{"name":"arrayargument"}],"output":{"name":"vec"}}],[5,"write_array","","Copies an values to the device array from the host array given as argument.",null,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"evalmode"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"evalmode"}],"output":{"name":"bool"}}],[6,"AsyncCallback","","A callback that is called after evaluating a kernel.",null,null],[8,"ScalarArgument","","Represents a value that can be used as a `Function` argument. Must ensures the type is a scalar and does not contains any reference.",null,null],[11,"as_size","","Returns the argument interpreted as an iteration dimension size, if applicable.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"t","","Returns the type of the argument.",25,{"inputs":[],"output":{"name":"type"}}],[10,"raw_ptr","","Returns a raw pointer to the object.",25,null],[10,"as_operand","","Returns an operand holding the argument value as a constant.",25,{"inputs":[{"name":"self"}],"output":{"name":"operand"}}],[10,"gen_random","","Generates a random instance of the argument type.",25,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"ArrayArgument","","Represents an array on the device.",null,null],[10,"read_i8","","Copies the array to the host as a vector of bytes.",26,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"vec"}}],[10,"write_i8","","Copies an array to the device from a slice of bytes.",26,null],[8,"Context","","Describes the context for which a function must be optimized.",null,null],[10,"device","","Returns the description of the device the code runs on.",27,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[10,"evaluate","","Returns the execution time of a fully specified implementation in nanoseconds.",27,{"inputs":[{"name":"self"},{"name":"function"},{"name":"evalmode"}],"output":{"generics":["f64"],"name":"result"}}],[10,"benchmark","","Compiles and benchmarks a functions. As opposed to `Self::evaluate`, the measured time contains potential startup times.",27,{"inputs":[{"name":"self"},{"name":"function"},{"name":"usize"}],"output":{"generics":["f64"],"name":"vec"}}],[10,"async_eval","","Calls the `inner` closure in parallel, and gives it a pointer to an `AsyncEvaluator` to evaluate candidates in the context. `skip_bad_bounds` indicates than candidates whose bound is aboive the best candidate should be skiped.",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"evalmode"},{"name":"fn"}],"output":null}],[10,"param_as_size","","Returns a parameter interpreted as a size, if possible.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["u32"],"name":"option"}}],[11,"eval_size","","Evaluate a size.",27,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"u32"}}],[8,"ArgMap","","Binds the argument names to their values.",null,null],[16,"Array","","",28,null],[10,"bind_scalar","","Binds a parameter to a given value.",28,{"inputs":[{"name":"self"},{"name":"parameter"},{"name":"s"}],"output":null}],[10,"bind_array","","Allocates an array of the given size in bytes.",28,{"inputs":[{"name":"self"},{"name":"parameter"},{"name":"usize"}],"output":{"name":"arc"}}],[8,"AsyncEvaluator","","An evaluation context that runs kernels asynchronously on the target device.",null,null],[10,"add_kernel","","Add a kernel to evaluate.",29,{"inputs":[{"name":"self"},{"name":"candidate"},{"name":"asynccallback"}],"output":null}],[8,"Device","","Holds the specifications of a target.",null,null],[10,"print","","Prints the code corresponding to a device `Function`.",30,{"inputs":[{"name":"self"},{"name":"function"},{"name":"write"}],"output":null}],[10,"is_valid_type","","Indicates if a `Type` can be implemented on the device.",30,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[10,"max_block_dims","","Returns the maximal number of block dimensions.",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"max_threads","","Returns the maximal number of threads.",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"max_unrolling","","Returns the maximal unrolling factor.",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"can_vectorize","","Indicates if vectorization is possible on a loop with size Size on this instruction.",30,{"inputs":[{"name":"self"},{"name":"dimension"},{"name":"operator"}],"output":{"name":"bool"}}],[10,"shared_mem","","Returns the amount of shared memory available for each thread block.",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"supports_nc_access","","Indicates if the device supports non-coherent memory accesses.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_l1_access","","Indicates if the device supports L1 for global memory accesses.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_l2_access","","Indicates if the device supports L2 for global memory accesses.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"name","","Returns the name of the device.",30,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"hw_pressure","","Returns the pressure cause by a `BasicBlock`. For a dimension, returns the pressure for the full loop execution.",30,{"inputs":[{"name":"self"},{"name":"searchspace"},{"name":"hashmap"},{"name":"hashmap"},{"name":"basicblock"}],"output":{"name":"hwpressure"}}],[10,"loop_iter_pressure","","Returns the pressure produced by a single iteration of a loop and the latency overhead of iterations.",30,null],[10,"thread_rates","","Returns the processing rates of a single thread, in units/ns",30,{"inputs":[{"name":"self"}],"output":{"name":"hwpressure"}}],[10,"block_rates","","Returns the processing rates of a single block, in units/ns.",30,{"inputs":[{"name":"self"}],"output":{"name":"hwpressure"}}],[10,"total_rates","","Returns the processing rates of the whole accelerator un units/ns.",30,{"inputs":[{"name":"self"}],"output":{"name":"hwpressure"}}],[10,"bottlenecks","","Returns the names of potential bottlenecks.",30,null],[10,"block_parallelism","","Returns the number of blocks that can be executed in parallel on the device.",30,{"inputs":[{"name":"self"},{"name":"searchspace"}],"output":{"name":"u32"}}],[10,"additive_indvar_pressure","","Returns the pressure caused by an additive induction variable level.",30,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"hwpressure"}}],[10,"multiplicative_indvar_pressure","","Returns the pressure caused by a multiplicative induction variable level.",30,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"hwpressure"}}],[10,"add_block_overhead","","Adds the overhead (per instance) due to partial wraps and predicated dimensions to the pressure. If the instruction is not predicated, `predicated_dims_size` should be `1`.",30,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"hwpressure"}],"output":null}],[10,"lower_type","","Lowers a type using the memory space information. Returns `None` if some information is not yet specified.",30,{"inputs":[{"name":"self"},{"name":"type"},{"name":"searchspace"}],"output":{"generics":["type"],"name":"option"}}],[11,"gen_code","","Builds and outputs a constrained IR instance.",30,{"inputs":[{"name":"self"},{"name":"searchspace"},{"name":"write"}],"output":null}],[0,"explorer","telamon","exploration of the search space.",null,null],[3,"Candidate","telamon::explorer","A node of the search tree.",null,null],[12,"space","","Represents a part of the full search space.",31,null],[12,"bound","","Gives a lower bound in nanoseconds on the execution time of `fun`.",31,null],[12,"depth","","The depth of the candidate in the search tree.",31,null],[12,"actions","","The list of actions already taken.",31,null],[5,"find_best","","Entry point of the exploration. This function returns the best candidate that it has found in the given time (or at whatever point we decided to stop the search - potentially after an exhaustive search)",null,{"inputs":[{"name":"config"},{"name":"context"},{"generics":["searchspace"],"name":"vec"}],"output":{"generics":["searchspace"],"name":"option"}}],[5,"gen_space","","Explores the full search space.",null,{"inputs":[{"name":"context"},{"name":"searchspace"},{"name":"f"},{"name":"g"}],"output":null}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"candidate"}}],[11,"new","","Creates a new candidate, with depth 0.",31,{"inputs":[{"name":"searchspace"},{"name":"bound"}],"output":{"name":"self"}}],[11,"apply_choice","","",31,{"inputs":[{"name":"self"},{"name":"context"},{"generics":["actionex"],"name":"vec"}],"output":{"generics":["candidate"],"name":"vec"}}],[11,"apply_decision","","Applies a choice to a candidate.",31,{"inputs":[{"name":"self"},{"name":"context"},{"name":"actionex"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"candidate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"candidate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"candidate"}],"output":{"name":"ordering"}}],[0,"config","","Defines a structure to store the configuration of the exploration. The configuration is read from the `Setting.toml` file if it exists. Some parameters can be overridden from the command line.",null,null],[3,"Config","telamon::explorer::config","Stores the configuration of the exploration.",null,null],[12,"log_file","","Name of the file in wich to store the logs.",32,null],[12,"num_workers","","Number of exploration threads.",32,null],[12,"algorithm","","Exploration algorithm to use.",32,null],[12,"stop_bound","","Indicates the search must be stopped if a candidate with an execution time better than the bound (in ns) is found.",32,null],[12,"timeout","","Indicates the search must be stopped after the given number of minutes.",32,null],[12,"distance_to_best","","A percentage cut indicate that we only care to find a candidate that is in a certain range above the best Therefore, if cut_under is 20%, we can discard any candidate whose bound is above 80% of the current best.",32,null],[3,"BanditConfig","","Configuration parameters specific to the multi-armed bandit algorithm.",null,null],[12,"new_nodes_order","","Indicates how to select between nodes of the search tree when none of their children have been evaluated.",33,null],[12,"old_nodes_order","","Indicates how to choose between nodes with at least one children evaluated.",33,null],[12,"threshold","","The number of best execution times to remember.",33,null],[12,"delta","","The biggest delta is, the more focused on the previous best candidates the exploration is.",33,null],[12,"monte_carlo","","If true, does not expand tree until end - instead, starts a montecarlo descend after each expansion of a node",33,null],[4,"SearchAlgorithm","","Exploration algorithm to use.",null,null],[13,"BoundOrder","","Evaluate all the candidates that cannot be pruned.",34,null],[13,"MultiArmedBandit","","Use a multi-armed bandit algorithm.",34,null],[4,"NewNodeOrder","","Indicates how to choose between nodes of the search tree when no children have been evaluated.",null,null],[13,"Api","","Consider the nodes in the order given by the search space API.",35,null],[13,"Random","","Consider the nodes in a random order.",35,null],[13,"Bound","","Consider the nodes with the lowest bound first.",35,null],[13,"WeightedRandom","","Consider the nodes with a probability proportional to the distance between the cut and the bound.",35,null],[4,"OldNodeOrder","","Indicates how to choose between nodes of the search tree with at least one descendent evaluated.",null,null],[13,"Bandit","","Use the weights from the bandit algorithm.",36,null],[13,"Bound","","Take the candidate with the best bound.",36,null],[13,"WeightedRandom","","Consider the nodes with a probability proportional to the distance between the cut and the bound.",36,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"read","","Reads the configuration from the \"Settings.toml\" file and from the command line.",32,{"inputs":[],"output":{"name":"self"}}],[11,"read_from_file","","Extract the configuration from the configuration file, if any.",32,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"searchalgorithm"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"banditconfig"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"newnodeorder"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"oldnodeorder"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"choice","telamon::explorer","Choices that can be applied to split the search space.",null,null],[4,"ActionEx","telamon::explorer::choice","Either a regular action or a manually applied action.",null,null],[13,"Action","","",37,null],[13,"LowerLayout","","",37,null],[12,"mem","telamon::explorer::choice::ActionEx","",37,null],[12,"st_dims","","",37,null],[12,"ld_dims","","",37,null],[5,"list","telamon::explorer::choice","Lists the choices that can be applied to a function.",null,null],[5,"fix_order","","Chooses an order between instructions and dimensions when multiple are possible. The function assumes the order between dimensions is already fixed.",null,{"inputs":[{"name":"searchspace"}],"output":{"name":"searchspace"}}],[6,"Choice","","Represents a choice that splits a search space in multiple ones.",null,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"actionex"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"actionex"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"actionex"}],"output":{"name":"bool"}}],[0,"local_selection","telamon::explorer","Provides different methods to select a candidate in a list.",null,null],[5,"descend","telamon::explorer::local_selection","A recursive function that takes a candidate and expands it until we have a completely specified candidate that we can pass to the evaluator, or we find a dead-end",null,{"inputs":[{"name":"newnodeorder"},{"name":"context"},{"name":"candidate"},{"name":"f64"}],"output":{"generics":["candidate"],"name":"option"}}],[5,"pick_candidate","","Called in montecarlo_descend, dispatch the choice of the next candidate according to our configuration",null,{"inputs":[{"name":"newnodeorder"},{"generics":["candidate"],"name":"vec"},{"name":"f64"}],"output":{"generics":["candidate"],"name":"option"}}],[5,"pick_index","","Returns the index of the next candidate to consider.",null,{"inputs":[{"name":"newnodeorder"},{"name":"it"},{"name":"f64"}],"output":{"generics":["usize"],"name":"option"}}],[0,"ir","telamon","Representation and manipulation of a set of possible implementation.",null,null],[3,"DimMap","telamon::ir","Represents a mapping between dimenions.",null,null],[3,"Dimension","","Represents an iteration dimension.",null,null],[3,"Function","","Describes a function and the set of its possible implementation.",null,null],[3,"Signature","","Holds the signature of a function.",null,null],[12,"name","","Mame of the function.",38,null],[12,"params","","Arguments of the function.",38,null],[12,"mem_blocks","","The number of external memory blocks.",38,null],[3,"Parameter","","Represents an argument of a function.",null,null],[12,"name","","The name of the `Parameter`",39,null],[12,"t","","The type of the `Parameter`.",39,null],[3,"InstId","","Uniquely identifies an instruction.",null,null],[12,"0","","",40,null],[3,"Instruction","","Represents an instruction.",null,null],[3,"IndVarId","","Unique identifier for `InductionVar`",null,null],[12,"0","","",41,null],[3,"InductionVar","","A multidimentional induction variable. No dimension should appear twice in dims.",null,null],[3,"Size","","The size of an iteration dimension. The size is of the form: `(factor * dividend_0 * dividend_1 * ...)) / divisor` where the reminder of the division is null.",null,null],[3,"NewObjs","","Stores the objects created by a lowering.",null,null],[12,"instructions","","",42,null],[12,"dimensions","","",42,null],[12,"basic_blocks","","",42,null],[12,"mem_blocks","","",42,null],[12,"internal_mem_blocks","","",42,null],[12,"mem_insts","","",42,null],[12,"iteration_dims","","",42,null],[12,"thread_dims","","",42,null],[3,"LoweredDimMap","","A point-to-point communication lowered into a store and a load.",null,null],[12,"mem","","",43,null],[12,"store","","",43,null],[12,"load","","",43,null],[12,"dimensions","","",43,null],[4,"Stride","","A stride on a given dimensions.",null,null],[13,"Int","","A fixed stride.",44,null],[13,"Unknown","","A stride that is not statically known.",44,null],[4,"AccessPattern","","",null,null],[13,"Unknown","","Unknown access pattern.",45,null],[12,"mem_id","telamon::ir::AccessPattern","",45,null],[13,"Tensor","telamon::ir","Corresponds to accessing a tensor stored in a contiguous array in memory.",45,null],[12,"mem_id","telamon::ir::AccessPattern","",45,null],[12,"stride","","",45,null],[12,"dims","","",45,null],[4,"BBId","telamon::ir","Provides a unique identifer for a basic block.",null,null],[13,"Inst","","",46,null],[13,"Dim","","",46,null],[4,"Operand","","Represents an instruction operand.",null,null],[13,"Int","","An integer constant, on a given number of bits.",47,null],[13,"Float","","A float constant, on a given number of bits.",47,null],[13,"Inst","","A value produced by an instruction. The boolean indicates if the `DimMap` can be lowered.",47,null],[13,"Index","","The current index in a loop.",47,null],[13,"Size","","The size of a dimension.",47,null],[13,"Param","","A parameter of the function.",47,null],[13,"Addr","","The address of a memory block.",47,null],[13,"Reduce","","The value of the current instruction at a previous iteration.",47,null],[13,"InductionVar","","A variable increased by a fixed amount at every step of some loops.",47,null],[4,"DimMapScope","","Indicates how dimensions can be mapped.",null,null],[13,"Local","","The dimensions are mapped within registers, without producing syncthreads.",48,null],[13,"Thread","","The dimensions are mapped within registers.",48,null],[13,"Global","","The dimensions are mapped, possibly using temporary memory.",48,null],[4,"BinOp","","Represents binary arithmetic operators.",null,null],[13,"Add","","Adds two operands.",49,null],[13,"Sub","","Substracts two operands.",49,null],[13,"Div","","Divides two operands,",49,null],[4,"Operator","","The operation performed by an instruction.",null,null],[13,"BinOp","","A binary arithmetic operator.",50,null],[13,"Mul","","Performs a multiplication with the given return type.",50,null],[13,"Mad","","Performs s multiplication between the first two operands and adds the result to the third.",50,null],[13,"Mov","","Moves a value into a register.",50,null],[13,"Ld","","Loads a value of the given type from the given address.",50,null],[13,"St","","Stores the second operand at the address given by the first. The boolean specifies if the instruction has side effects. A store has no side effects when it writes into a cell that previously had an undefined value.",50,null],[13,"TmpLd","","Represents a load from a temporary memory that is not fully defined yet.",50,null],[13,"TmpSt","","Represents a store to a temporary memory that is not fully defined yet.",50,null],[13,"Cast","","Casts a value into another type.",50,null],[4,"Type","","Values and intructions types.",null,null],[13,"Void","","Type for instructions that do not produce a value.",51,null],[13,"I","","Type for integer values, with a fixed number of bits.",51,null],[13,"F","","Type for floating point values, with a fixed number of bits.",51,null],[13,"PtrTo","","Pointer type of the given memory space.",51,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"stride"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwrap the stride or return the given value.",44,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"accesspattern"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"accesspattern"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"accesspattern"}],"output":{"name":"bool"}}],[11,"stride","","Returns the stride on a given dimension.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"stride"}}],[11,"rename","","Renames a basic block in the stride map.",45,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"mem_block","","Returns the id of the memory block accessed.",45,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bbid"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"cmp","","",46,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"ordering"}}],[11,"hash","","",46,null],[11,"from","","",46,{"inputs":[{"name":"instid"}],"output":{"name":"self"}}],[11,"from","","",46,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"dimension"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new dimension.",52,{"inputs":[{"name":"size"},{"name":"id"}],"output":{"name":"dimension"}}],[11,"size","","Retruns the size of the dimension.",52,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"id","","Returns the id of the dimension.",52,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"iterated","","Returns the constructs iterated along this dimension.",52,null],[11,"add_iterated","","Adds a bb that is iterated along self.",52,{"inputs":[{"name":"self"},{"name":"instid"}],"output":null}],[11,"is_thread_dim","","Indicates if the dimension is a thread dimension.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_thread_dim","","Sets the dimension as a thread dimension.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"bb_id","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bbid"}}],[11,"as_dim","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["dimension"],"name":"option"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"bool"}}],[11,"hash","","",52,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"dimmap"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `DimMap`.",53,{"inputs":[{"name":"it"}],"output":{"name":"self"}}],[11,"empty","","Returns an empty `DimMap`.",53,{"inputs":[],"output":{"name":"dimmap"}}],[11,"merge_dims","","Renames a basic block into an other. Indicates if some mapping were removed.",53,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"iter","","Iterates over the DimMap.",53,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"filter","","Filters the DimMap.",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filterlist"}}],[11,"is_empty","","Returns true if the `DimMap` is empty.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_iter","","",53,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"parameter"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"parameter"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"parameter"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"function"}}],[11,"new","","Creates a new function.",54,{"inputs":[{"name":"signature"},{"name":"device"}],"output":{"name":"self"}}],[11,"signature","","Returns the function signature.",54,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"device","","Returns the device the function is compiled for.",54,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"add_inst","","Adds an instruction to the function.",54,{"inputs":[{"name":"self"},{"name":"operator"},{"generics":["id"],"name":"hashset"}],"output":{"name":"instid"}}],[11,"add_dim","","Creates a new dimension.",54,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"id"}}],[11,"add_mem_block","","Allocates a new memory block.",54,{"inputs":[{"name":"self"},{"name":"size"},{"name":"bool"}],"output":{"name":"internalid"}}],[11,"add_ind_var","","Adds an induction variable.",54,{"inputs":[{"name":"self"},{"name":"inductionvar"}],"output":{"name":"indvarid"}}],[11,"insts","","Returns the list of instructions of the function.",54,null],[11,"dims","","Returns the list of dimensions of the function.",54,null],[11,"blocks","","Lists all `BasicBlock`s.",54,null],[11,"thread_dims","","Returns the list of thread dimensions.",54,null],[11,"inst","","Returns an instruction given its id.",54,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"instruction"}}],[11,"dim","","Retuns a dimension given its id.",54,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"dimension"}}],[11,"block","","Returns a `BasicBlock` given its id.",54,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"basicblock"}}],[11,"mem_blocks","","Returns the list of memory blocks. The block with id `i` is in i-th position.",54,null],[11,"mem_insts","","Iterates over memory instructions.",54,null],[11,"internal_mem_blocks","","Returns the internal memory blocks.",54,null],[11,"mem_block","","Returns a memory block given its id.",54,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"block"}}],[11,"internal_mem_block","","Returns an internal memory block given its id.",54,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"internalblock"}}],[11,"induction_var","","Retrieves an induction variable given its Id.",54,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"inductionvar"}}],[11,"induction_vars","","Iterates over induction variables.",54,null],[11,"set_iteration_dim","","Sets a dimension as an iteration dimension for an instruction. Indicates if the iteration dimension was not aleady present in the set.",54,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"add_thread_dim","","Adds a thread dimension. Indicates if the the dimension was not already present in the set.",54,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"merge","","Trigger to call when two dimensions are merged.",54,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"lower_layout","","Lowers a layout into conventional memory accesses.",54,{"inputs":[{"name":"self"},{"name":"internalid"},{"generics":["id"],"name":"vec"},{"generics":["id"],"name":"vec"}],"output":null}],[11,"gen_index","","Generates an access pattern and the corresponding induction variable to access a memory block.",54,null],[11,"lower_dim_map","","Lowers a dim map into a partially defined layout.",54,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"usize"}],"output":{"generics":["lowereddimmap"],"name":"result"}}],[11,"dim_not_merged","","Trigger to call when two dimensions are not merged.",54,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"layouts_to_lower","","Returns the list of layouts to lower.",54,null],[11,"deref","","",54,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"indvarid"}}],[11,"hash","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"ordering"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"inductionvar"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new induction var. Size represents the increment over each diemnsion taken independenly.",55,{"inputs":[{"name":"vec"},{"name":"operand"}],"output":{"name":"self"}}],[11,"merge_dims","","Renames a dimension.",55,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"base","","Returns the base operand of the induction variable.",55,{"inputs":[{"name":"self"}],"output":{"name":"operand"}}],[11,"dims","","Returns the list of induction dimensions along with the corresponding increments.",55,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"instid"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"cmp","","",40,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"ordering"}}],[11,"hash","","",40,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new instruction and type-check the operands.",56,{"inputs":[{"name":"operator"},{"name":"instid"},{"generics":["id"],"name":"hashset"},{"name":"device"}],"output":{"name":"instruction"}}],[11,"operands","","Returns the list of operands of an `Instruction`.",56,{"inputs":[{"name":"self"}],"output":{"generics":["operand"],"name":"vec"}}],[11,"t","","Returns the type of the value produced by an instruction.",56,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"operator","","Returns the operator of the instruction.",56,{"inputs":[{"name":"self"}],"output":{"name":"operator"}}],[11,"id","","Returns the `InstId` representing the instruction.",56,{"inputs":[{"name":"self"}],"output":{"name":"instid"}}],[11,"has_side_effects","","Returns true if the instruction has side effects.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lower_layout","","Applies the lowering of a layout to the instruction.",56,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"accesspattern"},{"name":"operand"},{"name":"accesspattern"}],"output":null}],[11,"lower_dim_map","","Lowers the `DimMap` of an operand into an access to a temporary memory.",56,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"instid"},{"name":"dimmap"}],"output":null}],[11,"dim_maps_to_lower","","Indicates the operands for wich a `DimMap` must be lowered if lhs and rhs are not mapped.",56,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"generics":["usize"],"name":"vec"}}],[11,"as_mem_inst","","Returns 'self' if it is a memory instruction.",56,{"inputs":[{"name":"self"}],"output":{"generics":["instruction"],"name":"option"}}],[11,"as_reduction","","Indicates if the instruction performs a reduction.",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_reduction_common_dim","","Returns 'true' if `self` is a reduction initialized by init, and if 'dim' should have the same nesting with 'init' that with 'self'.",56,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"merge_dims","","Rename a dimension to another ID.",56,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"iteration_dims","","The list of dimensions the instruction must be nested in.",56,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"add_iteration_dimension","","Adds a new iteration dimension. Indicates if the dimension was not already an iteration dimension.",56,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"bb_id","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bbid"}}],[11,"as_inst","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["instruction"],"name":"option"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"hash","","",56,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"dimmapscope"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"dimmapscope"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"operand"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"t","","Returns the type of the `Operand`.",47,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"new_inst","","Create an operand from an instruction.",47,{"inputs":[{"name":"instruction"},{"name":"dimmap"},{"name":"dimmapscope"}],"output":{"name":"operand"}}],[11,"new_reduce","","Creates a reduce operand from an instruction and a set of dimensions to reduce on.",47,{"inputs":[{"name":"instruction"},{"name":"dimmap"},{"generics":["id"],"name":"vec"}],"output":{"name":"operand"}}],[11,"new_int","","Creates a new Int operand and checks its number of bits.",47,{"inputs":[{"name":"bigint"},{"name":"u16"}],"output":{"name":"operand"}}],[11,"new_float","","Creates a new Float operand.",47,{"inputs":[{"generics":["bigint"],"name":"ratio"},{"name":"u16"}],"output":{"name":"operand"}}],[11,"merge_dims","","Renames a basic block id.",47,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"should_lower_map","","Indicates if a `DimMap` should be lowered if lhs and rhs are not mapped.",47,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"as_reduction","","If the operand is a reduction, returns the instruction initializing the reduction.",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_constant","","Indicates if the operand stays constant during the execution.",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"operator"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"type_check","","Ensures the types of the operands are valid.",50,{"inputs":[{"name":"self"},{"name":"device"}],"output":null}],[11,"t","","Returns the type of the value produced.",50,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"operands","","Retruns the list of operands.",50,{"inputs":[{"name":"self"}],"output":{"generics":["operand"],"name":"vec"}}],[11,"operands_mut","","Retruns the list of mutable references to operands.",50,{"inputs":[{"name":"self"}],"output":{"generics":["operand"],"name":"vec"}}],[11,"has_side_effects","","Returns true if the operator has side effects.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_dims","","Renames a basic block.",50,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"mem_access_pattern","","Returns the pattern of access to the memory by the instruction, if any.",50,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"mem_used","","Returns the memory blocks referenced by the instruction.",50,{"inputs":[{"name":"self"}],"output":{"generics":["id"],"name":"option"}}],[11,"supports_nc_access","","Indicates if the operator supports non-coherent memory accesses.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 'Size'.",57,{"inputs":[{"name":"u32"},{"generics":["parameter"],"name":"vec"},{"name":"u32"}],"output":{"name":"self"}}],[11,"as_int","","Returns the size of a dimension if it is staticaly known.",57,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"is_constant","","Indicates if the size is constant.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dividend","","Returns the dividends.",57,null],[11,"divisor","","Returns the divisor.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"factor","","Returns the factor.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mul_divisor","","Multiplies the divisor by the given factor.",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"mul_assign","","",57,{"inputs":[{"name":"self"},{"name":"size"}],"output":null}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_integer","","Returns true if the type is an integer.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_float","","Returns true if the type is a float.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len_byte","","Returns the number of bytes of the type.",51,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"mem","","A module for handling accesses to the device memory.",null,null],[3,"InternalId","telamon::ir::mem","",null,null],[12,"0","","",58,null],[3,"InternalBlock","","A block of memory allocated on the device by the kernel.",null,null],[3,"ExternalBlock","","A memory block allocated by the user.",null,null],[3,"BlockMap","","Holds the blocks of memory to allocate on the device.",null,null],[4,"Id","","Uniquely identifies a block.",null,null],[13,"Internal","","",59,null],[13,"External","","",59,null],[8,"Block","","Represents a memory block.",null,null],[10,"mem_id","","The ID of the block.",60,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"as_internal","","Returns self if it is an internal memory block.",60,{"inputs":[{"name":"self"}],"output":{"generics":["internalblock"],"name":"option"}}],[10,"uses","","The list of instructions referencing the memory block.",60,null],[10,"add_use","","Add a use to the block.",60,{"inputs":[{"name":"self"},{"name":"instid"}],"output":null}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"internalid"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",59,{"inputs":[{"name":"internalid"}],"output":{"name":"self"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"internalblock"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"internalblock"}],"output":{"name":"bool"}}],[11,"hash","","",61,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"externalblock"}}],[11,"id","","Returns the unique identifer of the memory block.",61,{"inputs":[{"name":"self"}],"output":{"name":"internalid"}}],[11,"size","","The size of the dimensions of the memory block.",61,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"maps_dims","","Indicates if two dimensions are mapped by a temporary memory block.",61,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"mapped_dims","","Returns the list of mapped dimensions.",61,null],[11,"is_private","","Indicates if the block is privatised per block of thread.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"base_size","","Return the base size of the block, if it is statically known.",61,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"mem_id","","",61,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"as_internal","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["internalblock"],"name":"option"}}],[11,"uses","","",61,null],[11,"add_use","","",61,{"inputs":[{"name":"self"},{"name":"instid"}],"output":null}],[11,"mem_id","","",62,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"uses","","",62,null],[11,"add_use","","",62,{"inputs":[{"name":"self"},{"name":"instid"}],"output":null}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"blockmap"}}],[11,"new","","Creates a new `BlocksMap`.",63,{"inputs":[{"name":"u32"}],"output":{"name":"blockmap"}}],[11,"alloc_block","","Allocates a new `Block` with the given type and sizes. Must call not merged on the dimensions that cannot be merged upon creation.",63,{"inputs":[{"name":"self"},{"name":"size"},{"name":"bool"},{"generics":["dimmap"],"name":"option"}],"output":{"name":"internalid"}}],[11,"new_tmp","","Inserts a new temporary memory. Must be inserted before not_merged is called on dimensions.",63,{"inputs":[{"name":"self"},{"name":"type"},{"name":"it"}],"output":{"name":"internalid"}}],[11,"register_use","","Registers a use of a memory block by an instruction.",63,{"inputs":[{"name":"self"},{"name":"id"},{"name":"instid"}],"output":null}],[11,"block","","Returns a block given its Id.",63,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"block"}}],[11,"block_mut","","Returns a block given its Id.",63,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"block"}}],[11,"internal_block","","Returns the internal block given its ID.",63,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"internalblock"}}],[11,"internal_blocks","","Retuns the list of internal blocks.",63,null],[11,"blocks","","Returns the list of memory blocks.",63,null],[11,"merge_dims","","Rename a basic block. Returns the lyaouts to lower.",63,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"generics":["internalid"],"name":"vec"}}],[11,"not_merged","","Registers that two dimensions may not be merged. Returns a list of dimensions removed from the memory blocks and a list of layouts to lower.",63,{"inputs":[{"name":"self"},{"name":"dimension"},{"name":"id"}],"output":{"generics":["internalid"],"name":"vec"}}],[11,"lower_layout","","Lowers a fully defined layout. Returns the mapping of dimensions.",63,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"vec"}}],[0,"dim","telamon::ir","Defines iteration dimensions properties.",null,null],[3,"Id","telamon::ir::dim","Provides a unique identifier for iteration dimensions.",null,null],[12,"0","","",64,null],[3,"Map","","Represents a mapping between dimenions.",null,null],[0,"op","telamon::ir","Defines operators.",null,null],[4,"Rounding","telamon::ir::op","The rounding mode of an arithmetic operation.",null,null],[13,"Exact","","No rounding occurs.",65,null],[13,"Nearest","","Rounds toward the nearest number.",65,null],[13,"Zero","","Rounds toward zero.",65,null],[13,"Positive","","Rounds toward positive infinite.",65,null],[13,"Negative","","Rounds toward negative infinite.",65,null],[0,"prelude","telamon::ir","Defines traits to import in the environment to use the IR.",null,null],[8,"BasicBlock","telamon::ir::prelude","Represents a basic block in an Exhaust function.",null,null],[10,"bb_id","","Returns the unique identifier of the `BasicBlock`.",66,{"inputs":[{"name":"self"}],"output":{"name":"bbid"}}],[11,"as_inst","","Returns 'self' if it is an instruction.",66,{"inputs":[{"name":"self"}],"output":{"generics":["instruction"],"name":"option"}}],[11,"as_dim","","Returns 'self' if it is a dimension",66,{"inputs":[{"name":"self"}],"output":{"generics":["dimension"],"name":"option"}}],[8,"BasicBlock","telamon::ir","Represents a basic block in an Exhaust function.",null,null],[10,"bb_id","","Returns the unique identifier of the `BasicBlock`.",66,{"inputs":[{"name":"self"}],"output":{"name":"bbid"}}],[11,"as_inst","telamon::ir::prelude","Returns 'self' if it is an instruction.",66,{"inputs":[{"name":"self"}],"output":{"generics":["instruction"],"name":"option"}}],[11,"as_dim","","Returns 'self' if it is a dimension",66,{"inputs":[{"name":"self"}],"output":{"generics":["dimension"],"name":"option"}}],[11,"default","telamon::ir","",42,{"inputs":[],"output":{"name":"newobjs"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add_instruction","","Registers a new instruction.",42,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":null}],[11,"add_mem_instruction","","Registers a new memory instruction.",42,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":null}],[11,"add_dimension","","Registers a new dimension.",42,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":null}],[11,"add_bb","","Registers a new basic block.",42,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":null}],[11,"add_iteration_dim","","Sets a dimension as a new iteration dimension.",42,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":null}],[11,"add_thread_dim","","Sets a dimension as a new thread dimension.",42,{"inputs":[{"name":"self"},{"name":"id"}],"output":null}],[11,"add_mem_block","","Registers a new memory block.",42,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":null}],[0,"model","telamon","Building Blocks for lower bound performance models.",null,null],[3,"HwPressure","telamon::model","The pressure on the hardware induced by a computation.",null,null],[3,"Nesting","","Nesting of an object.",null,null],[12,"inner_dims","","Dimensions nested inside the current BB.",67,null],[12,"inner_bbs","","Basic blocks nested inside the current BB.",67,null],[12,"outer_dims","","Dimensions nested outsidethe current BB.",67,null],[12,"before_self","","Dimensions to be processed before the current BB.",67,null],[12,"after_self","","Dimensions that should not take the current BB into account when processed.",67,null],[12,"bigger_merged_dims","","The dimensions that can be merged to this one and have a bigger ID.",67,null],[12,"num_unmapped_threads","","Number of threads that are not represented in the active dimensions of the block.",67,null],[12,"max_threads_per_block","","Maximal number of threads this block can be in, considering only outer and mapped out dimensions.",67,null],[4,"BottleneckLevel","","The level at which a bottleneck is computed.",null,null],[13,"Global","","",68,null],[13,"Block","","",68,null],[13,"Thread","","",68,null],[5,"bound","","Returns a lower bound on the execution time of all the implementation candidates in `space`, when executed in `context`.",null,{"inputs":[{"name":"searchspace"},{"name":"context"}],"output":{"name":"bound"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bottlenecklevel"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"bottlenecklevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"bottlenecklevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"bottlenecklevel"}],"output":{"name":"ordering"}}],[11,"accounts_for_dim","","Indicates if a dimension should be taken into account for the bottleneck level.",68,{"inputs":[{"name":"self"},{"name":"dimkind"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"hwpressure"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Pressure`",69,{"inputs":[{"name":"f64"},{"generics":["f64"],"name":"vec"}],"output":{"name":"self"}}],[11,"zero","","Creates a null `Pressure` for the given device.",69,{"inputs":[{"name":"device"}],"output":{"name":"self"}}],[11,"bound","","Derive a bound on the execution time from the pressure on the hardware.",69,{"inputs":[{"name":"self"},{"name":"bottlenecklevel"},{"name":"hwpressure"}],"output":{"generics":["rc"],"name":"explainedbound"}}],[11,"add_parallel","","Adds the pressure of another computation, performed in parallel.",69,{"inputs":[{"name":"self"},{"name":"hwpressure"}],"output":null}],[11,"add_sequential","","Adds the pressure of another computation, performed sequentially.",69,{"inputs":[{"name":"self"},{"name":"hwpressure"}],"output":null}],[11,"repeat_parallel","","Computes the pressure obtained by duplicating this one in parallel.",69,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"repeat_and_add_bottlenecks","","Adds the pressure of another computation, repeated in parallel. Ignores the latency.",69,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"hwpressure"}],"output":null}],[11,"repeat_sequential","","Computes the pressure obtained by repeating this one sequentially.",69,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"minimize","","Take the minimum of `self` and `other` for each bottleneck.",69,{"inputs":[{"name":"self"},{"name":"hwpressure"}],"output":null}],[11,"min","","Returns the pointwise minimum of a serie of `HwPressure`",69,{"inputs":[{"name":"it"}],"output":{"name":"option"}}],[11,"multiply","","Pointwise multiplication of the pressure on each resource.",69,{"inputs":[{"name":"self"},{"name":"hwpressure"}],"output":null}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Bound","","A lower bound on the execution time, with a detailed explanation of the origin of the bound.",null,null],[0,"search_space","telamon","Search space datastructures and constraint propagation.",null,null],[3,"Bool","telamon::search_space","",null,null],[3,"DimKind","","Specifies how iteration dimensions are implemented.",null,null],[3,"DomainStore","","Stores the domains of each variable.",null,null],[3,"InstFlag","","Specifies the version of an instruction to use.",null,null],[3,"Order","","Defines how two basic blocks are ordered.",null,null],[3,"MemSpace","","Indicates where a memory block is located.",null,null],[3,"ThreadMapping","","Indicates how are thread dimensions mapped on the GPU.",null,null],[3,"SearchSpace","","A partially specified implementation.",null,null],[4,"Action","","A decision to apply to the domain.",null,null],[13,"DimKind","","",70,null],[13,"DimMapping","","",70,null],[13,"IncrementMemSize","","",70,null],[13,"IncrementNumBlockDims","","",70,null],[13,"IncrementUnrollFactor","","",70,null],[13,"InstFlag","","",70,null],[13,"IsIterationDim","","",70,null],[13,"IsIterationDimClassCounter","","",70,null],[13,"IsThreadDim","","",70,null],[13,"IsThreadDimClassCounter","","",70,null],[13,"MemSize","","",70,null],[13,"MemSpace","","",70,null],[13,"NumBlockDims","","",70,null],[13,"NumNestedInst","","",70,null],[13,"NumThreadDims","","",70,null],[13,"NumThreads","","",70,null],[13,"Order","","",70,null],[13,"SharedMemUsed","","",70,null],[13,"ThreadMapping","","",70,null],[13,"UnrollFactor","","",70,null],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"domainstore"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"domainstore"}}],[11,"new","","Creates a new domain store and allocates the variables for the given BBMap.",71,{"inputs":[{"name":"function"}],"output":{"name":"self"}}],[11,"alloc","","Allocates the choices when new objects are created.",71,{"inputs":[{"name":"self"},{"name":"function"},{"name":"newobjs"}],"output":null}],[11,"get_dim_kind","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"dimkind"}}],[11,"get_old_dim_kind","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"dimkind"}}],[11,"set_dim_kind","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"dimkind"}],"output":null}],[11,"restrict_dim_kind","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"dimkind"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_dim_mapping","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"dimmapping"}}],[11,"get_old_dim_mapping","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"dimmapping"}}],[11,"set_dim_mapping","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"dimmapping"}],"output":null}],[11,"restrict_dim_mapping","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"dimmapping"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_increment_mem_size","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"get_old_increment_mem_size","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"id"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"bool"}}],[11,"set_increment_mem_size","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"id"},{"name":"id"},{"name":"bool"}],"output":null}],[11,"restrict_increment_mem_size","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"id"},{"name":"id"},{"name":"bool"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_increment_num_block_dims","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"get_old_increment_num_block_dims","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"bool"}}],[11,"set_increment_num_block_dims","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"}],"output":null}],[11,"restrict_increment_num_block_dims","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_increment_unroll_factor","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"get_old_increment_unroll_factor","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"bool"}}],[11,"set_increment_unroll_factor","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"}],"output":null}],[11,"restrict_increment_unroll_factor","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_inst_flag","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"instflag"}}],[11,"get_old_inst_flag","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"domaindiff"}],"output":{"name":"instflag"}}],[11,"set_inst_flag","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"instflag"}],"output":null}],[11,"restrict_inst_flag","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"instflag"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_is_iteration_dim","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"get_old_is_iteration_dim","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"bool"}}],[11,"set_is_iteration_dim","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"}],"output":null}],[11,"restrict_is_iteration_dim","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_is_iteration_dim_class_counter","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"range"}}],[11,"get_old_is_iteration_dim_class_counter","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"range"}}],[11,"set_is_iteration_dim_class_counter","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"range"}],"output":null}],[11,"restrict_is_iteration_dim_class_counter","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"range"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_is_thread_dim","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"get_old_is_thread_dim","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"bool"}}],[11,"set_is_thread_dim","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"bool"}],"output":null}],[11,"restrict_is_thread_dim","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"bool"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_is_thread_dim_class_counter","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"range"}}],[11,"get_old_is_thread_dim_class_counter","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"range"}}],[11,"set_is_thread_dim_class_counter","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"range"}],"output":null}],[11,"restrict_is_thread_dim_class_counter","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"range"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_mem_size","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"halfrange"}}],[11,"get_old_mem_size","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_mem_size","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"halfrange"}],"output":null}],[11,"restrict_mem_size","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_mem_space","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"memspace"}}],[11,"get_old_mem_space","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"memspace"}}],[11,"set_mem_space","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"memspace"}],"output":null}],[11,"restrict_mem_space","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"memspace"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_num_block_dims","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"halfrange"}}],[11,"get_old_num_block_dims","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_num_block_dims","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"halfrange"}],"output":null}],[11,"restrict_num_block_dims","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_num_nested_inst","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"halfrange"}}],[11,"get_old_num_nested_inst","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_num_nested_inst","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"halfrange"}],"output":null}],[11,"restrict_num_nested_inst","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_num_thread_dims","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"}],"output":{"name":"halfrange"}}],[11,"get_old_num_thread_dims","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_num_thread_dims","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"halfrange"}],"output":null}],[11,"restrict_num_thread_dims","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_num_threads","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"}],"output":{"name":"halfrange"}}],[11,"get_old_num_threads","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_num_threads","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"halfrange"}],"output":null}],[11,"restrict_num_threads","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_order","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"bbid"},{"name":"bbid"}],"output":{"name":"order"}}],[11,"get_old_order","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"bbid"},{"name":"bbid"},{"name":"domaindiff"}],"output":{"name":"order"}}],[11,"set_order","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"bbid"},{"name":"bbid"},{"name":"order"}],"output":null}],[11,"restrict_order","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"bbid"},{"name":"bbid"},{"name":"order"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_shared_mem_used","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"}],"output":{"name":"halfrange"}}],[11,"get_old_shared_mem_used","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_shared_mem_used","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"halfrange"}],"output":null}],[11,"restrict_shared_mem_used","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_thread_mapping","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"threadmapping"}}],[11,"get_old_thread_mapping","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"threadmapping"}}],[11,"set_thread_mapping","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"threadmapping"}],"output":null}],[11,"restrict_thread_mapping","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"threadmapping"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_unroll_factor","","Returns the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"halfrange"}}],[11,"get_old_unroll_factor","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_unroll_factor","","Sets the domain of {name} for the given arguments.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"halfrange"}],"output":null}],[11,"restrict_unroll_factor","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",71,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[18,"FALSE","","",72,null],[18,"TRUE","","",72,null],[11,"list","","Lists the alternatives contained in the domain.",72,null],[11,"is_failed","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",72,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",72,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",72,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"insert","","",72,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",72,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",72,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",72,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",72,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",72,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",72,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"dimkind"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"dimkind"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"dimkind"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[18,"VECTOR","","The dimension is implemented by using a vector instruction.",73,null],[18,"BLOCK","","The dimension is mapped to a block dimension on the device.",73,null],[18,"THREAD","","The dimension is mapped to a thread dimension on the device.",73,null],[18,"LOOP","","The dimension is implemented as a regular loop.",73,null],[18,"UNROLL","","The dimension is fully unrolled.",73,null],[18,"SEQUENTIAL","","The dimension is sequential.",73,null],[18,"PARALLEL","","The dimension is parallel.",73,null],[11,"list","","Lists the alternatives contained in the domain.",73,null],[11,"is_failed","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",73,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",73,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",73,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"insert","","",73,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",73,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",73,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",73,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",73,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",73,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",73,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"threadmapping"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"threadmapping"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"threadmapping"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[18,"MAPPED_OUT","","The two dimensions are threads, but `lhs` is mapped to a dimension outside of `rhs`.",74,null],[18,"MAPPED_IN","","The two dimensions are threads, but `lhs` is mapped to a dimension inside of `rhs`.",74,null],[18,"NOT_THREADS","","One of the dimensions is a not thread.",74,null],[18,"MAPPED","","The two dimensions are threads mapped to the same dimension on the GPU.",74,null],[11,"list","","Lists the alternatives contained in the domain.",74,null],[11,"inverse","","",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_failed","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",74,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",74,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",74,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"insert","","",74,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",74,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",74,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",74,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",74,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",74,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"instflag"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"instflag"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"instflag"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[18,"MEM_NC","","Access the global memory using the read-only cache. Coherence is not guaranteed.",75,null],[18,"MEM_SHARED","","Access the shared memory.",75,null],[18,"MEM_CS","","Access the global memory without using caches.",75,null],[18,"MEM_CA","","Access the global memory using both L1 and L2 cache. Coherence is not guaranteed between blocks.",75,null],[18,"MEM_CG","","Access the global memory using the L2 cache.",75,null],[18,"MEM_BLOCK_COHERENT","","Ensure coherency within a block between memory accesses.",75,null],[18,"MEM_COHERENT","","Ensure coherency between memory accesses.",75,null],[18,"MEM_GLOBAL","","Access the global memory.",75,null],[11,"list","","Lists the alternatives contained in the domain.",75,null],[11,"is_failed","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"insert","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",75,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"memspace"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"memspace"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"memspace"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[18,"GLOBAL","","The block is in the device RAM.",76,null],[18,"SHARED","","The block is in the memory shared between the threads of a block.",76,null],[11,"list","","Lists the alternatives contained in the domain.",76,null],[11,"is_failed","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"insert","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",76,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"order"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"order"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"order"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[18,"BEFORE","","$lhs is executed before $rhs.",77,null],[18,"AFTER","","$lhs is executed after $rhs.",77,null],[18,"INNER","","$lhs is nested inside $rhs.",77,null],[18,"OUTER","","$rhs is nested outside $rhs.",77,null],[18,"MERGED","","$lhs and $rhs are merged.",77,null],[18,"ORDERED","","$lhs and $rhs are sequentially ordered.",77,null],[18,"NESTED","","$lhs and $rhs are nested.",77,null],[11,"list","","Lists the alternatives contained in the domain.",77,null],[11,"inverse","","",77,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_failed","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"insert","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",77,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"action"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"action"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"action"}}],[8,"Domain","","",null,null],[18,"FAILED","","",78,null],[18,"ALL","","",78,null],[10,"is_failed","","Indicates if the domain is empty.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_constrained","","Indicates if the domain contains a single alternative.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"contains","","Indicates if the domain contains another.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"restrict","","Restricts the domain to the intersection with `other`.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[10,"insert","","Inserts alternatives into the domain.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"intersects","","Indicates if the domain has an alternatve in common with `other`.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is","","Indicates if the domain is equal to another domain.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"trivalent"}}],[11,"eq","","Indicates if two choices will have the same value.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"neq","","Indicates if two choices cannot be equal.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"searchspace"}}],[11,"new","","Creates a new `SearchSpace` for the given `ir_instance`.",79,{"inputs":[{"name":"function"},{"generics":["action"],"name":"vec"}],"output":{"name":"result"}}],[11,"ir_instance","","Returns the underlying ir instance.",79,{"inputs":[{"name":"self"}],"output":{"name":"function"}}],[11,"domain","","Returns the domain of choices.",79,{"inputs":[{"name":"self"}],"output":{"name":"domainstore"}}],[11,"domain_mut","","Allows rewritting the domain.",79,{"inputs":[{"name":"self"}],"output":{"name":"domainstore"}}],[11,"apply_decisions","","Applies a list of decisions to the domain and propagate constraints.",79,{"inputs":[{"name":"self"},{"generics":["action"],"name":"vec"}],"output":{"name":"result"}}],[11,"lower_layout","","Triggers a layout lowering.",79,{"inputs":[{"name":"self"},{"name":"internalid"},{"generics":["id"],"name":"vec"},{"generics":["id"],"name":"vec"}],"output":{"name":"result"}}],[11,"get","telamon::ir","",47,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"get","","",40,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"get","telamon::ir::mem","",58,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"get","telamon::ir::dim","",64,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"get","telamon::ir","",41,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"ids","telamon::ir::dim","",64,{"inputs":[{"name":"self"}],"output":{"generics":["doubleendediterator"],"name":"box"}}],[11,"ids","telamon::ir","",46,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"ids","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"as_size","telamon::device","Returns the argument interpreted as an iteration dimension size, if applicable.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"eval_size","","Evaluate a size.",27,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"u32"}}],[11,"as_inst","telamon::ir::prelude","Returns 'self' if it is an instruction.",66,{"inputs":[{"name":"self"}],"output":{"generics":["instruction"],"name":"option"}}],[11,"as_dim","","Returns 'self' if it is a dimension",66,{"inputs":[{"name":"self"}],"output":{"generics":["dimension"],"name":"option"}}],[11,"clone","telamon::ir::dim","",64,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"hash","","",64,null],[11,"partial_cmp","","",64,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",64,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"le","","",64,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"gt","","",64,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ge","","",64,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"cmp","","",64,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"ordering"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","telamon::ir::op","",65,{"inputs":[{"name":"self"}],"output":{"name":"rounding"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"rounding"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","telamon::model","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FAILED","telamon::search_space","",78,null],[18,"ALL","","",78,null],[11,"intersects","","Indicates if the domain has an alternatve in common with `other`.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is","","Indicates if the domain is equal to another domain.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"trivalent"}}],[11,"eq","","Indicates if two choices will have the same value.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"neq","","Indicates if two choices cannot be equal.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"InductionLevel"],[3,"InductionVar"],[4,"Cfg"],[4,"ParamVal"],[4,"ParamValKey"],[4,"AllocationScheme"],[4,"Value"],[3,"Dimension"],[3,"Function"],[3,"InternalMemBlock"],[3,"Instruction"],[3,"NameMap"],[8,"Namer"],[3,"Reduce"],[3,"TmpArray"],[3,"Builder"],[3,"SignatureBuilder"],[4,"DimSize"],[3,"Tensor"],[3,"VirtualTensor"],[8,"AutoOperand"],[8,"MetaDimension"],[8,"MetaBasicBlock"],[3,"DimGroup"],[4,"EvalMode"],[8,"ScalarArgument"],[8,"ArrayArgument"],[8,"Context"],[8,"ArgMap"],[8,"AsyncEvaluator"],[8,"Device"],[3,"Candidate"],[3,"Config"],[3,"BanditConfig"],[4,"SearchAlgorithm"],[4,"NewNodeOrder"],[4,"OldNodeOrder"],[4,"ActionEx"],[3,"Signature"],[3,"Parameter"],[3,"InstId"],[3,"IndVarId"],[3,"NewObjs"],[3,"LoweredDimMap"],[4,"Stride"],[4,"AccessPattern"],[4,"BBId"],[4,"Operand"],[4,"DimMapScope"],[4,"BinOp"],[4,"Operator"],[4,"Type"],[3,"Dimension"],[3,"DimMap"],[3,"Function"],[3,"InductionVar"],[3,"Instruction"],[3,"Size"],[3,"InternalId"],[4,"Id"],[8,"Block"],[3,"InternalBlock"],[3,"ExternalBlock"],[3,"BlockMap"],[3,"Id"],[4,"Rounding"],[8,"BasicBlock"],[3,"Nesting"],[4,"BottleneckLevel"],[3,"HwPressure"],[4,"Action"],[3,"DomainStore"],[3,"Bool"],[3,"DimKind"],[3,"ThreadMapping"],[3,"InstFlag"],[3,"MemSpace"],[3,"Order"],[8,"Domain"],[3,"SearchSpace"],[6,"Bound"]]};
searchIndex["telamon_gen"] = {"doc":"","items":[[5,"process_file","telamon_gen","Process a file and stores the result in an other file.",null,{"inputs":[{"name":"path"},{"name":"path"},{"name":"bool"}],"output":{"generics":["processerror"],"name":"result"}}],[5,"process","","Parses a constraint description file.",null,{"inputs":[{"name":"read"},{"name":"t"},{"name":"bool"},{"name":"path"}],"output":{"generics":["processerror"],"name":"result"}}],[0,"ir","","The constraint description for the ir.",null,null],[3,"Choice","telamon_gen::ir","A decision to specify.",null,null],[3,"FilterCall","","A call to a filter.",null,null],[12,"forall_vars","","",0,null],[12,"filter_ref","","",0,null],[3,"OnChangeAction","","An action to perform when the choice is restricted.",null,null],[12,"forall_vars","","",1,null],[12,"set_constraints","","",1,null],[12,"action","","",1,null],[3,"ChoiceCondition","","A condition from the point of view of a choice.",null,null],[12,"inputs","","",2,null],[12,"self_condition","","",2,null],[12,"others_conditions","","",2,null],[3,"FilterAction","","Restricts the set of valid values.",null,null],[12,"set_constraints","","",3,null],[12,"filter","","",3,null],[3,"Filter","","Filters the set valid values.",null,null],[12,"arguments","","The variables on which the filter depends.",4,null],[12,"inputs","","The choices that the filter depends on.",4,null],[12,"rules","","The filter rules.",4,null],[3,"Rule","","Specifies a conditional restriction on the set of valid values.",null,null],[12,"conditions","","The conditions that must be true for the rule to trigger.",5,null],[12,"alternatives","","The values allowed for the enum if the rule is triggered.",5,null],[12,"set_constraints","","The condition on subsets for the rule to apply.",5,null],[3,"SetConstraints","","A list of constraints on the set each variable belongs to. It must be built using `SetConstraints::new` so the constraints are in the right order.",null,null],[3,"ChoiceInstance","","An choice instantiated with the given variables.",null,null],[12,"choice","","",6,null],[12,"vars","","",6,null],[3,"Code","","A piece of rust code.",null,null],[12,"code","","",7,null],[12,"vars","","",7,null],[3,"Set","","References a set of objects.",null,null],[3,"SetRefImpl","","",null,null],[3,"SetDef","","Defines a set of objects.",null,null],[3,"Adaptator","","Represent a transformation to apply to a rule to fir it in a new context.",null,null],[3,"IrDesc","","Describes the choices that constitute the IR.",null,null],[3,"Enum","","A choice that can take a few predefined values.",null,null],[3,"Trigger","","A piece of host code called when a list of conditions are met.",null,null],[12,"foralls","","",8,null],[12,"inputs","","",8,null],[12,"conditions","","",8,null],[12,"code","","",8,null],[4,"ChoiceArguments","","Defines the parameters for which the `Choice` is defined.",null,null],[13,"Plain","","The `Choice` is defined for all comibnation of variables of the given sets Each variable can only appear once.",9,null],[12,"vars","telamon_gen::ir::ChoiceArguments","",9,null],[13,"Symmetric","telamon_gen::ir","The `Choice` is defined on a triangular space. The rests is obtained by symmetry.",9,null],[12,"names","telamon_gen::ir::ChoiceArguments","",9,null],[12,"t","","",9,null],[12,"inverse","","",9,null],[4,"ChoiceDef","telamon_gen::ir","Specifies how the `Choice` is defined.",null,null],[13,"Enum","","The `Choice` can take a small set of predefined values.",10,null],[13,"Counter","","An integer abstracted by an interval.",10,null],[12,"kind","telamon_gen::ir::ChoiceDef","",10,null],[12,"value","","",10,null],[12,"incr_iter","","",10,null],[12,"incr","","",10,null],[12,"incr_condition","","",10,null],[12,"visibility","","",10,null],[12,"base","","",10,null],[4,"CounterVisibility","telamon_gen::ir","Indicates how a counter exposes how its maximum value. The variants are ordered by increasing amount of information available.",null,null],[13,"NoMax","","Only the minimal value is computed and stored.",11,null],[13,"HiddenMax","","Both the min and max are stored, but only the min is exposed.",11,null],[13,"Full","","Both the min and the max value are exposed.",11,null],[4,"CounterVal","","The value of the increments of a counter.",null,null],[13,"Code","","",12,null],[13,"Counter","","",12,null],[4,"ValueType","","Specifies the type of the values a choice can take.",null,null],[13,"Enum","","",13,null],[13,"Range","","",13,null],[13,"HalfRange","","",13,null],[4,"FilterRef","","References a filter to call.",null,null],[13,"Inline","","",14,null],[13,"Local","","",14,null],[12,"id","telamon_gen::ir::FilterRef","",14,null],[12,"args","","",14,null],[13,"Remote","telamon_gen::ir","",14,null],[12,"choice","telamon_gen::ir::FilterRef","",14,null],[12,"id","","",14,null],[12,"args","","",14,null],[4,"ChoiceAction","telamon_gen::ir","An action to perform,",null,null],[13,"FilterSelf","","",15,null],[13,"Filter","","",15,null],[12,"choice","telamon_gen::ir::ChoiceAction","",15,null],[12,"filter","","",15,null],[13,"IncrCounter","telamon_gen::ir","",15,null],[12,"choice","telamon_gen::ir::ChoiceAction","",15,null],[12,"value","","",15,null],[13,"UpdateCounter","telamon_gen::ir","",15,null],[12,"counter","telamon_gen::ir::ChoiceAction","",15,null],[12,"incr","","",15,null],[12,"to_half","","",15,null],[13,"Trigger","telamon_gen::ir","",15,null],[12,"id","telamon_gen::ir::ChoiceAction","",15,null],[12,"condition","","",15,null],[12,"code","","",15,null],[12,"inverse_self_cond","","",15,null],[4,"SubFilter","telamon_gen::ir","Filters the set of valid values, given some inputs.",null,null],[13,"Switch","","Enumerate the possible values that a input can take, and lists the possible values for each.",16,null],[12,"switch","telamon_gen::ir::SubFilter","",16,null],[12,"cases","","",16,null],[13,"Rules","telamon_gen::ir","Applies a set of negative rules to filter the possible values.",16,null],[4,"Variable","","",null,null],[13,"Arg","","",17,null],[13,"Forall","","",17,null],[4,"Condition","","A condition producing a boolean.",null,null],[13,"Code","","Triggers if the given piece of code returns `true`, given the mapping of variables.",18,null],[12,"code","telamon_gen::ir::Condition","",18,null],[12,"negate","","",18,null],[13,"Enum","telamon_gen::ir","Triggers if the choice can only take the given values.",18,null],[12,"input","telamon_gen::ir::Condition","",18,null],[12,"values","","",18,null],[12,"negate","","",18,null],[12,"inverse","","",18,null],[13,"Bool","telamon_gen::ir","Always or never triggers.",18,null],[13,"CmpCode","","Triggers if the one inputs respects the comparison operator with some rust code.",18,null],[12,"lhs","telamon_gen::ir::Condition","",18,null],[12,"rhs","","",18,null],[12,"op","","",18,null],[13,"CmpInput","telamon_gen::ir","Triggers if the two inputs respects the comparison operator.",18,null],[12,"lhs","telamon_gen::ir::Condition","",18,null],[12,"rhs","","",18,null],[12,"op","","",18,null],[12,"inverse","","",18,null],[4,"CmpOp","telamon_gen::ir","A compariason operator.",null,null],[13,"Lt","","",19,null],[13,"Gt","","",19,null],[13,"Leq","","",19,null],[13,"Geq","","",19,null],[13,"Eq","","",19,null],[13,"Neq","","",19,null],[4,"ValueSet","","Represents a set of values a choice can take.",null,null],[13,"Enum","","",20,null],[12,"enum_name","telamon_gen::ir::ValueSet","The enum type.",20,null],[12,"values","","A fixed set of values. Does not contains aliases.",20,null],[12,"inputs","","A set of inputs whose values can be take by the choice. Two flags indicate if the value should be negated or inversed.",20,null],[13,"Range","telamon_gen::ir","",20,null],[12,"is_full","telamon_gen::ir::ValueSet","",20,null],[12,"cmp_inputs","","",20,null],[12,"cmp_code","","",20,null],[4,"SetDefKey","telamon_gen::ir","",null,null],[13,"ItemType","","",21,null],[13,"IdType","","",21,null],[13,"ItemGetter","","",21,null],[13,"IdGetter","","",21,null],[13,"Iter","","",21,null],[13,"FromSuperset","","",21,null],[13,"Prefix","","",21,null],[13,"NewObjs","","",21,null],[13,"Reverse","","",21,null],[13,"AddToSet","","",21,null],[4,"CounterKind","","Indicates whether a counter sums or adds.",null,null],[13,"Add","","",22,null],[13,"Mul","","",22,null],[5,"dummy_choice","","",null,{"inputs":[],"output":{"name":"choice"}}],[5,"normalized_enum_set","","Creates a `ValueSet` from the list of enum values.",null,{"inputs":[{"name":"it"},{"name":"bool"},{"name":"bool"},{"name":"enum"}],"output":{"name":"valueset"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"adaptator"}}],[11,"variable","","Adapts a variable.",23,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"variable"}}],[11,"input","","Returns the new ID of an input and indicates if it is inversed.",23,null],[11,"set_variable","","Sets the mapping of a variable. Returns the previous mapping.",23,{"inputs":[{"name":"self"},{"name":"variable"},{"name":"variable"}],"output":{"generics":["variable"],"name":"option"}}],[11,"set_input","","Sets the mapping of an input.",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"set_inversed","","Sets an input as inversed.",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Choice`.",24,{"inputs":[{"name":"rcstr"},{"generics":["rcstr"],"name":"option"},{"name":"choicearguments"},{"name":"choicedef"}],"output":{"name":"self"}}],[11,"name","","Returns the name of the choice, in snake_case.",24,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"doc","","Returns the documentation associated with the `Choice`.",24,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"arguments","","Returns the parameters for which the `Choice` is defined.",24,{"inputs":[{"name":"self"}],"output":{"name":"choicearguments"}}],[11,"value_type","","Returns the type representing the values the `Choice` can take.",24,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"choice_def","","Returns the definition of the `Choice.",24,{"inputs":[{"name":"self"}],"output":{"name":"choicedef"}}],[11,"on_change","","Returns the actions to perform when the `Choice` is constrained.",24,{"inputs":[{"name":"self"}],"output":{"generics":["onchangeaction"],"name":"iter"}}],[11,"filter_actions","","Returns the actions to run to get the valid alternatives of the choice.",24,{"inputs":[{"name":"self"}],"output":{"generics":["filteraction"],"name":"iter"}}],[11,"filters","","Returns the filters operating on the `Choice`.",24,{"inputs":[{"name":"self"}],"output":{"generics":["filter"],"name":"iter"}}],[11,"add_filter_action","","Adds a filter to run on initialization.",24,{"inputs":[{"name":"self"},{"name":"filteraction"}],"output":null}],[11,"add_onchange","","Adds an action to perform when the `Choice` is constrained.",24,{"inputs":[{"name":"self"},{"name":"onchangeaction"}],"output":null}],[11,"add_filter","","Adds a filter to the `Choice`, returns an ID to indentify it.",24,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"usize"}}],[11,"fragile_values","","Returns the values that should not be automatically restricted by filters.",24,{"inputs":[{"name":"self"}],"output":{"name":"valueset"}}],[11,"add_fragile_values","","Extends the list of values that should not be automatically propagated by filters.",24,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `ChoiceArguments`.",9,{"inputs":[{"name":"vec"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"names","","Returns the name of the arguments.",9,null],[11,"sets","","Returns the sets of the arguments.",9,null],[11,"get","","Returns the name and set of the argument at the given position.",9,null],[11,"iter","","Iterates over the arguments, with their sets and names.",9,null],[11,"is_symmetric","","Indicates if the arguments iteration domain is triangular.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of arguments.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"choicedef"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"countervisibility"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"countervisibility"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"countervisibility"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"countervisibility"}],"output":{"name":"ordering"}}],[11,"value_type","","Returns the underlying value type.",10,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"is_counter","","Indicates if the choice is a counter.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_enum","","Returns the name of the `Enum` the `Choice` is based on.",10,{"inputs":[{"name":"self"}],"output":{"generics":["rcstr"],"name":"option"}}],[11,"is_valid_operator","","Indicates the comparison operators that can be applied to the decision.",10,{"inputs":[{"name":"self"},{"name":"cmpop"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"counterval"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"adapt","","",12,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"full_type","","Returns the full type, instead of a the trimmed one.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"filtercall"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"adapt","","",0,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"filterref"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"adapt","","",14,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"onchangeaction"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"adapt","","",1,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"choiceaction"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"variables","","Returns the list of variables to allocate.",15,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"inputs","","Returns the list of inputs used by the action.",15,null],[11,"inverse_self","","Inverse references to the value of the choice the action is registered in.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"adapt","","",15,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"choicecondition"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Adapt the list of conditions to be from the point of view of the given choice.",2,null],[11,"adapt","","",2,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"filteraction"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"subfilter"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rule"}}],[11,"instantiate","","Instantiates the rule for a given assignment of the inputs.",5,null],[11,"normalize","","Normalizes the `Rule`.",5,null],[11,"adapt","","",5,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"setconstraints"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"setconstraints"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"setconstraints"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"setconstraints"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"new","","Create a new list of set constraints. The constraints are put in a normalized and legal order.",25,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"constraints","","Returns the constraints in a legal order.",25,null],[11,"is_empty","","Indicates if the set of constraints is empty.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find_set","","Returns the set the given variable is constrained to, if any.",25,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"generics":["set"],"name":"option"}}],[11,"adapt","","",25,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"into_iter","","",25,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"variable"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"ordering"}}],[11,"adapt","","",17,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"choiceinstance"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"choiceinstance"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"choiceinstance"}],"output":{"name":"bool"}}],[11,"normalize","","Normalizes the `ChoiceInstance` and indicates if the corresponding input should be inversed.",6,{"inputs":[{"name":"self"},{"name":"irdesc"}],"output":{"name":"bool"}}],[11,"adapt","","",6,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"ordering"}}],[11,"normalize","","Normalizes the `Code.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"adapt","","",7,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"condition"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"ordering"}}],[11,"negate","","Negates the condition.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"alternatives_of","","Returns allowed alternatives for the given input. Returns None if the condition is not on the given input.",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"choice"},{"name":"irdesc"}],"output":{"generics":["valueset"],"name":"option"}}],[11,"instantiate","","Instantiate the condition in the given context.",18,null],[11,"evaluate","","Evaluates the condition. Requires the mapping to be instantiated.",18,null],[11,"normalize","","Normalizes the condition to make it easier to apply equality on it.",18,null],[11,"adapt","","",18,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"cmpop"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"cmpop"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"cmpop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"cmpop"}],"output":{"name":"ordering"}}],[11,"hash","","",19,null],[11,"negate","","Negates the operator.",19,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse","","Returns the equivalent operator for when the operator are inversed.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"allows_eq","","Indicates if the operator returns true when both operands are equals.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"evaluate","","Evaluates the operator on the given `ValueSet`s.",19,{"inputs":[{"name":"self"},{"name":"valueset"},{"name":"valueset"}],"output":{"name":"trivalent"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"valueset"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"ordering"}}],[11,"empty","","Creates an enmpty `ValueSet` of the given type.",20,{"inputs":[{"name":"valuetype"}],"output":{"name":"self"}}],[11,"from_properties","","Computes a `ValueSet` from the properties it must respect.",20,{"inputs":[{"name":"valuetype"},{"name":"bool"},{"name":"bool"},{"name":"irdesc"}],"output":{"name":"self"}}],[11,"enum_values","","Creates a `ValueSet` from a normalized set of values.",20,{"inputs":[{"name":"rcstr"},{"generics":["rcstr"],"name":"btreeset"}],"output":{"name":"self"}}],[11,"from_input","","Creates a `ValueSet` from the given input.",20,{"inputs":[{"name":"valuetype"},{"name":"usize"},{"name":"cmpop"},{"name":"bool"}],"output":{"name":"self"}}],[11,"is_empty","","Indicates if the set of values is empty.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","Indicates if the set contains all the values. This functions is pessimistic: the set may contain all the values and the function still return false.",20,{"inputs":[{"name":"self"},{"name":"irdesc"}],"output":{"name":"bool"}}],[11,"is_constrained","","Indicates if the set contains a single value.",20,{"inputs":[{"name":"self"}],"output":{"name":"trivalent"}}],[11,"extend","","Extends the `ValueSet` with the values of anther set.",20,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":null}],[11,"intersect","","Intersects the `ValueSet` with the given values. Indicates if the intersection was successful or if the sets should be kept separate.",20,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"bool"}}],[11,"instantiate","","Instantiates the `ValueSet` for a given input assignment.",20,{"inputs":[{"name":"self"},{"name":"hashmap"},{"name":"irdesc"}],"output":{"name":"self"}}],[11,"inverse","","Inverse the `ValueSet`. The choice must be antisymmetric.",20,{"inputs":[{"name":"self"},{"name":"irdesc"}],"output":null}],[11,"is","","Indicates if the `ValueSet` will be contained into anoter after instantiation. Requires both `self` and `other` to be instantiated.",20,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"trivalent"}}],[11,"t","","Returns the type of the values.",20,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"adapt","","",20,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"set"}}],[11,"hash","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new set instance.",26,{"inputs":[{"name":"rc"},{"generics":["variable"],"name":"option"}],"output":{"name":"self"}}],[11,"is_subset_of_def","","Indicates if the first set is a sub-set of the second, without matching argument names.",26,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"get_collision_level","","Returns the common superset where the two set might have an object in common.",26,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"generics":["setdef"],"name":"option"}}],[11,"reverse","","Returns a superset of this set and a set parametrized by elements of the superset that iterates on the possible parameters of this set given a variable of the superset.",26,{"inputs":[{"name":"self"},{"name":"variable"},{"name":"set"}],"output":{"name":"option"}}],[11,"adapt","","",26,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"setrefimpl"}}],[11,"hash","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"setrefimpl"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"setrefimpl"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"def","","",27,{"inputs":[{"name":"self"}],"output":{"name":"setdef"}}],[11,"arg","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["variable"],"name":"option"}}],[11,"reverse_constraint","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["setrefimpl"],"name":"option"}}],[11,"new","","Creates a new set definition.",28,{"inputs":[{"name":"string"},{"generics":["set"],"name":"option"},{"generics":["set"],"name":"option"},{"name":"option"},{"generics":["setdefkey","string"],"name":"hashmap"},{"generics":["string"],"name":"vec"}],"output":{"name":"rc"}}],[11,"name","","The name of the set.",28,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"arg","","Returns the argument of the set, if any.",28,{"inputs":[{"name":"self"}],"output":{"generics":["set"],"name":"option"}}],[11,"superset","","Returns the superset of the set, if any.",28,{"inputs":[{"name":"self"}],"output":{"generics":["set"],"name":"option"}}],[11,"attributes","","The attributes of the set.",28,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"prefix","","Suggest a prefix for variables in the set.",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"def_order","","Returns an integer that indicates an order in which variables can be defined to always be defined before any argument of the set they belong into.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_subset_of_def","","Indicates if the first set is a sub-set of the second.",28,{"inputs":[{"name":"self"},{"name":"setdef"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"setdef"}],"output":{"name":"bool"}}],[11,"hash","","",28,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"setdef"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"setdef"}],"output":{"name":"ordering"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"setdefkey"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setdefkey"}}],[11,"env","","Returns the variables defined for the key.",21,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"vec"}}],[11,"is_arg_in_env","","Indicates if the environement contains the set argument.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[18,"REQUIRED","","The list of required keys.",21,null],[8,"SetRef","","Generic trait for sets.",null,null],[10,"def","","Returns the set definition.",29,{"inputs":[{"name":"self"}],"output":{"name":"setdef"}}],[10,"arg","","Returns the argument of the set, if any.",29,{"inputs":[{"name":"self"}],"output":{"generics":["variable"],"name":"option"}}],[10,"reverse_constraint","","A constraint on the variables to iterate on, issued from a set reversal.",29,{"inputs":[{"name":"self"}],"output":{"generics":["setrefimpl"],"name":"option"}}],[11,"without_reverse_constraints","","Returns the same set but without reverse constraints.",29,{"inputs":[{"name":"self"}],"output":{"name":"setrefimpl"}}],[11,"superset","","Returns the direct superset of this set, if any.",29,{"inputs":[{"name":"self"}],"output":{"generics":["setrefimpl"],"name":"option"}}],[11,"path_to_superset","","Returns the path of sets to access a super-set.",29,{"inputs":[{"name":"self"},{"name":"setref"}],"output":{"generics":["setrefimpl"],"name":"vec"}}],[11,"is_subset_of","","Indicates if the first set is a sub-set of the second.",29,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"as_ref","","Returns the `SetRefImpl` corresponding to this set.",29,{"inputs":[{"name":"self"}],"output":{"name":"setrefimpl"}}],[8,"Adaptable","","",null,null],[10,"adapt","","Adapts the object to the new environement.",30,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"add_choice","","Adds a `Choice` to the IR description.",31,{"inputs":[{"name":"self"},{"name":"choice"}],"output":null}],[11,"add_enum","","Adds an `Enum` to the IR desctiption.",31,{"inputs":[{"name":"self"},{"name":"enum"}],"output":null}],[11,"choices","","List the choice definitions.",31,null],[11,"enums","","List the enum definitions.",31,null],[11,"get_enum","","Returns the enum with the given name.",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enum"}}],[11,"get_choice","","Returns the choice with the given name.",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"choice"}}],[11,"set_defs","","Iterates over all the sets.",31,null],[11,"add_set_def","","Register a set definition.",31,{"inputs":[{"name":"self"},{"generics":["setdef"],"name":"rc"}],"output":null}],[11,"get_set_def","","Returns the set definition associated with a name.",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"rc"}}],[11,"add_filter","","Adds a filter to a choice.",31,{"inputs":[{"name":"self"},{"name":"rcstr"},{"name":"filter"},{"generics":["set"],"name":"vec"},{"name":"setconstraints"}],"output":null}],[11,"add_onchange","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"onchangeaction"}],"output":null}],[11,"add_trigger","","Adds a trigger to a choice.",31,{"inputs":[{"name":"self"},{"name":"trigger"}],"output":{"name":"usize"}}],[11,"triggers","","Iterates on the triggers.",31,null],[11,"adapt_env","","Generates the list of sets to iterate and to constraints to iterate on the given context, but from the point of view of the given choice instance.",31,null],[11,"adapt_env_ext","","Generates the list of sets to iterate and to constraints to iterate on the given environement, but from the point of view of the given choice instance. The new foralls iterating on current arguments are returned in a separate list than the ones issued from foralls.",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"counterkind"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"counterkind"}],"output":{"name":"bool"}}],[11,"zero","","Returns the neutral element of the operand.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new enum definition.",32,{"inputs":[{"name":"rcstr"},{"generics":["rcstr"],"name":"option"},{"generics":["vec"],"name":"option"}],"output":{"name":"self"}}],[11,"name","","Returns the name of the enum.",32,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"add_value","","Adds a possible value to the enum.",32,{"inputs":[{"name":"self"},{"name":"rcstr"},{"generics":["string"],"name":"option"}],"output":null}],[11,"add_alias","","Adds an alias to the enum possible values.",32,{"inputs":[{"name":"self"},{"name":"rcstr"},{"generics":["rcstr"],"name":"hashset"},{"generics":["string"],"name":"option"}],"output":null}],[11,"aliases","","Lists the aliases.",32,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"doc","","Returns the documentation associated with the enum.",32,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"values","","Returns the values the enum can take, and their associated comment.",32,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"expand","","Replaces aliases by the corresponding values.",32,{"inputs":[{"name":"self"},{"name":"it"}],"output":{"generics":["rcstr"],"name":"hashset"}}],[11,"inverse","","Inverse an antisymmetric value.",32,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"rcstr"}}],[11,"inverse_mapping","","Returns the mapping to apply to obtain the symmetric of a value.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"lexer","telamon_gen","",null,null],[3,"Position","telamon_gen::lexer","A sequence's row/column position",null,null],[12,"line","","",33,null],[12,"column","","",33,null],[3,"Span","","A double sequence's row/column position",null,null],[12,"leg","","",34,null],[12,"end","","",34,null],[3,"Lexer","","",null,null],[4,"Token","","",null,null],[13,"InvalidToken","","",35,null],[13,"ValueIdent","","",35,null],[13,"ChoiceIdent","","",35,null],[13,"Var","","",35,null],[13,"Doc","","",35,null],[13,"CmpOp","","",35,null],[13,"Code","","",35,null],[13,"CounterKind","","",35,null],[13,"Bool","","",35,null],[13,"CounterVisibility","","",35,null],[13,"And","","",35,null],[13,"Trigger","","",35,null],[13,"When","","",35,null],[13,"Alias","","",35,null],[13,"Counter","","",35,null],[13,"Define","","",35,null],[13,"Enum","","",35,null],[13,"Equal","","",35,null],[13,"Forall","","",35,null],[13,"In","","",35,null],[13,"Is","","",35,null],[13,"Not","","",35,null],[13,"Require","","",35,null],[13,"Requires","","",35,null],[13,"Value","","",35,null],[13,"End","","",35,null],[13,"Symmetric","","",35,null],[13,"AntiSymmetric","","",35,null],[13,"Arrow","","",35,null],[13,"Colon","","",35,null],[13,"Comma","","",35,null],[13,"LParen","","",35,null],[13,"RParen","","",35,null],[13,"BitOr","","",35,null],[13,"Or","","",35,null],[13,"SetDefKey","","",35,null],[13,"Set","","",35,null],[13,"SubsetOf","","",35,null],[13,"SetIdent","","",35,null],[13,"Base","","",35,null],[13,"Disjoint","","",35,null],[13,"Quotient","","",35,null],[13,"Of","","",35,null],[13,"Divide","","",35,null],[4,"LexicalError","","",null,null],[13,"InvalidToken","","",36,null],[13,"UnexpectedToken","","",36,null],[11,"default","","",33,{"inputs":[],"output":{"name":"position"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"span"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Spanned","","The alias Spanned is a definition of the stream format. The parser will accept an iterator where each item in the stream has the following structure.",null,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"lexicalerror"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"lexicalerror"}],"output":{"name":"bool"}}],[11,"description","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",37,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"from","","",37,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"drop","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"parser","telamon_gen","",null,null],[5,"parse_ast","telamon_gen::parser","",null,{"inputs":[{"name":"__tokens"}],"output":{"generics":["ast","parseerror"],"name":"result"}}],[8,"__ToTriple","","",null,null],[16,"Error","","",38,null],[10,"to_triple","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","telamon_gen::ir","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","telamon_gen","",null,null],[3,"ProcessError","telamon_gen::error","",null,null],[12,"path","","Display of filename.",39,null],[12,"span","","Position of lexeme.",39,null],[4,"Cause","","",null,null],[13,"Parse","","Lalrpop",40,null],[13,"Other","","Will be remplaced by field for Ast [...]",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"without_reverse_constraints","telamon_gen::ir","Returns the same set but without reverse constraints.",29,{"inputs":[{"name":"self"}],"output":{"name":"setrefimpl"}}],[11,"superset","","Returns the direct superset of this set, if any.",29,{"inputs":[{"name":"self"}],"output":{"generics":["setrefimpl"],"name":"option"}}],[11,"path_to_superset","","Returns the path of sets to access a super-set.",29,{"inputs":[{"name":"self"},{"name":"setref"}],"output":{"generics":["setrefimpl"],"name":"vec"}}],[11,"is_subset_of","","Indicates if the first set is a sub-set of the second.",29,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"as_ref","","Returns the `SetRefImpl` corresponding to this set.",29,{"inputs":[{"name":"self"}],"output":{"name":"setrefimpl"}}]],"paths":[[3,"FilterCall"],[3,"OnChangeAction"],[3,"ChoiceCondition"],[3,"FilterAction"],[3,"Filter"],[3,"Rule"],[3,"ChoiceInstance"],[3,"Code"],[3,"Trigger"],[4,"ChoiceArguments"],[4,"ChoiceDef"],[4,"CounterVisibility"],[4,"CounterVal"],[4,"ValueType"],[4,"FilterRef"],[4,"ChoiceAction"],[4,"SubFilter"],[4,"Variable"],[4,"Condition"],[4,"CmpOp"],[4,"ValueSet"],[4,"SetDefKey"],[4,"CounterKind"],[3,"Adaptator"],[3,"Choice"],[3,"SetConstraints"],[3,"Set"],[3,"SetRefImpl"],[3,"SetDef"],[8,"SetRef"],[8,"Adaptable"],[3,"IrDesc"],[3,"Enum"],[3,"Position"],[3,"Span"],[4,"Token"],[4,"LexicalError"],[3,"Lexer"],[8,"__ToTriple"],[3,"ProcessError"],[4,"Cause"]]};
searchIndex["telamon_gen_test"] = {"doc":"","items":[],"paths":[]};
searchIndex["telamon_kernels"] = {"doc":"Defines common kernels used to test and benchmark Telamon.","items":[[5,"analyze_bounds","telamon_kernels","Prints an analysis of the bounds computed by the lower bound model.",null,{"inputs":[{"generics":["boundsample"],"name":"vec"}],"output":null}],[0,"linalg","","Linera algebra kernels.",null,null],[3,"Axpy","telamon_kernels::linalg","Computes `z = alpha*x+y`.",null,null],[3,"MatVec","","Computes `y = A.x`.",null,null],[3,"Gesummv","","Computes `y = (alpha*A + beta*B).x`.",null,null],[3,"MatMul","","Computes `C = A.B`.",null,null],[12,"m","","",0,null],[12,"n","","",0,null],[12,"k","","",0,null],[3,"Tbmm","","Batch transposed matrix-matrix multiplication.",null,null],[3,"TbmmParams","","",null,null],[11,"name","","",1,{"inputs":[],"output":{"name":"str"}}],[11,"build_signature","","",1,{"inputs":[{"name":"i32"},{"name":"bool"},{"name":"signaturebuilder"}],"output":{"name":"self"}}],[11,"build_body","","",1,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"device"}],"output":{"generics":["searchspace"],"name":"vec"}}],[11,"get_expected_output","","",1,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"arrayd"}}],[11,"check_result","","",1,null],[11,"name","","",2,{"inputs":[],"output":{"name":"str"}}],[11,"build_signature","","",2,null],[11,"build_body","","",2,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"device"}],"output":{"generics":["searchspace"],"name":"vec"}}],[11,"get_expected_output","","",2,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"array1"}}],[11,"check_result","","",2,null],[11,"name","","",3,{"inputs":[],"output":{"name":"str"}}],[11,"build_signature","","",3,null],[11,"build_body","","",3,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"device"}],"output":{"generics":["searchspace"],"name":"vec"}}],[11,"get_expected_output","","",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"array1"}}],[11,"check_result","","",3,null],[11,"name","","",0,{"inputs":[],"output":{"name":"str"}}],[11,"build_signature","","",0,null],[11,"build_body","","",0,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"device"}],"output":{"generics":["searchspace"],"name":"vec"}}],[11,"get_expected_output","","",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"array2"}}],[11,"check_result","","",0,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tbmmparams"}}],[11,"name","","",5,{"inputs":[],"output":{"name":"str"}}],[11,"build_signature","","",5,{"inputs":[{"name":"tbmmparams"},{"name":"bool"},{"name":"signaturebuilder"}],"output":{"name":"self"}}],[11,"build_body","","",5,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"device"}],"output":{"generics":["searchspace"],"name":"vec"}}],[11,"get_expected_output","","",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"array3"}}],[11,"check_result","","",5,null],[0,"statistics","telamon_kernels","Statistical analysis for benchmarking.",null,null],[3,"Estimate","telamon_kernels::statistics","Estimates a mean within a confidence interval.",null,null],[12,"unit","","",6,null],[12,"value","","",6,null],[12,"interval","","",6,null],[12,"confidence","","",6,null],[5,"mean","","Computes the mean of a data set.",null,null],[5,"estimate_mean","","Computes the mean and the confidence interval of the data set. The requested degree of confidence must be between 0 and 1.",null,{"inputs":[{"generics":["f64"],"name":"vec"},{"name":"f64"},{"name":"str"}],"output":{"name":"estimate"}}],[5,"estimate_ratio","","Computes the error margin of a ratio between answer of a binary choice given the number of samples with a 95% confidence interval.",null,{"inputs":[{"name":"f64"},{"name":"usize"}],"output":{"name":"estimate"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Kernel","telamon_kernels","A kernel that can be compiled, benchmarked and used for correctness tests.",null,null],[16,"Parameters","","The input parameters of the kernel.",7,null],[16,"ExpectedOutput","","The values to expect as output.",7,null],[10,"name","","The name of the function computed by the kernel.",7,{"inputs":[],"output":{"name":"str"}}],[10,"build_signature","","Builds the signature of the kernel in the builder and returns an object that stores enough information to later build the kernel body and check its result. The `is_generic` flag indicates if th sizes should be instantiated.",7,null],[10,"build_body","","Builder the kernel body in the given builder. This builder should be based on the signature created by `build_signature`.",7,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"device"}],"output":{"generics":["searchspace"],"name":"vec"}}],[10,"get_expected_output","","Computes the expected output.",7,null],[10,"check_result","","Ensures the generated code performs the correct operation.",7,null],[11,"test_correctness","","Generates, executes and tests the output of candidates for the kernel.",7,null],[11,"test_bound","","Tests the correctness of the bound of kernels and returns the list of tested leafs along with the actual evaluation time.",7,null],[11,"benchmark","","Runs the search and benchmarks the resulting candidate.",7,null],[11,"deadend_ratio","","Computes the probability of encountering a dead-end when descending in the search tree.",7,null],[8,"Scalar","","A scalar that can be used as the data type for tests.",null,null],[11,"epsilon","","Returns the amount of allowed error in tests.",8,{"inputs":[],"output":{"name":"self"}}],[11,"is_err_ok","","Indicates if the scalar can be considered as zero in the context of error checking.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"test_correctness","","Generates, executes and tests the output of candidates for the kernel.",7,null],[11,"test_bound","","Tests the correctness of the bound of kernels and returns the list of tested leafs along with the actual evaluation time.",7,null],[11,"benchmark","","Runs the search and benchmarks the resulting candidate.",7,null],[11,"deadend_ratio","","Computes the probability of encountering a dead-end when descending in the search tree.",7,null]],"paths":[[3,"MatMul"],[3,"Axpy"],[3,"MatVec"],[3,"Gesummv"],[3,"TbmmParams"],[3,"Tbmm"],[3,"Estimate"],[8,"Kernel"],[8,"Scalar"]]};
searchIndex["telamon_utils"] = {"doc":"Generic helper functions.","items":[[3,"Cache","telamon_utils","A thread-safe LRU Cache.",null,null],[3,"Dag","","A directed acyclic graph given by adjacency list.",null,null],[3,"FilterList","","Iterates over a linked list while removing some items.",null,null],[3,"ZipCopy","","Zip copies of an object with an iterator.",null,null],[3,"PartialPermutations","","",null,null],[3,"VecSet","","A set backed by an ordered vector.",null,null],[3,"RcStr","","A reference counted string, compatible with `&str`.",null,null],[4,"Trivalent","","Booleans enhanced with a third `Maybe` value.",null,null],[13,"False","","",0,null],[13,"Maybe","","",0,null],[13,"True","","",0,null],[5,"filter_list","","Iterates over a linked list while removing some items.",null,{"inputs":[{"name":"linkedlist"},{"name":"f"}],"output":{"name":"filterlist"}}],[5,"zip_copy","","Zip copies of an object with an iterator.",null,{"inputs":[{"name":"i"},{"name":"t"}],"output":{"name":"zipcopy"}}],[5,"at_most_one","","Ensures an iterator has at most one element.",null,{"inputs":[{"name":"it"}],"output":{"name":"option"}}],[5,"to_map","","Transforms an iterator into an `HashMap`. Redundant nodes are merged using `merge`.",null,{"inputs":[{"name":"it"},{"name":"m"}],"output":{"name":"hashmap"}}],[5,"div_ceil","","Performs an integer divison rounded to the upper number.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"log2_u32","","Returns the log2 of a power of 2.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[5,"clone_pair","","Clones a pair of reference.",null,null],[5,"cmp_f64","","Compare two f64, panic if one of them is nan",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new `Cache` that can store `capacity` elements.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"get","","Returns the element associated to `key` in the cache. Generates the element with `gen` and store it in the cache if it is not already present.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"arc"}}],[11,"clear","","Removes all elements from the `Cache`.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_order","","Computes a minimal DAG from a partial order.",2,{"inputs":[{"name":"vec"},{"name":"c"}],"output":{"name":"dag"}}],[11,"nodes","","Returns the list of nodes, in increasing order.",2,null],[11,"before","","Returns the predecessors of the given node.",2,null],[11,"after","","Returns the successors of the given node.",2,null],[11,"minima","","Returns the id of nodes without predecessors.",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"vec"}}],[11,"predecessors","","Returns all the predecessors of a node.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"vec"}}],[0,"ndarray","","An array with a variable number of dimensions.",null,null],[3,"NDArray","telamon_utils::ndarray","An array with a variable number of dimensions.",null,null],[12,"dims","","",3,null],[3,"NDRange","","A N-dimentional range.",null,null],[3,"ViewMut","","A mutable view on a `NDArray`, with some dimensions fixed.",null,null],[3,"ViewMutIter","","Iterator over the elements in a mutable view.",null,null],[3,"ViewIterMut","","Mutable iterator over the elements in a mutable view.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a NDArray and initializes it with the generator.",3,{"inputs":[{"generics":["usize"],"name":"vec"},{"name":"vec"}],"output":{"name":"ndarray"}}],[11,"init_default","","Initializes an NDArray with default values.",3,{"inputs":[{"generics":["usize"],"name":"vec"}],"output":{"name":"self"}}],[11,"num_dims","","Returns the number of dimensions in the array.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"view_mut","","Returns a mutable view on the NDArray.",3,{"inputs":[{"name":"self"}],"output":{"name":"viewmut"}}],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"new","","Creates a ND range with the given bounds.",4,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_dims","","Returns the number of non-fixed dimensions in the view.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split","","Splits the view on the given dimension.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["viewmut"],"name":"vec"}}],[11,"enumerate","","Enumerates the elements with their indexes.",5,null],[11,"enumerate_mut","","Produces mutable references to the elements, with their indexes.",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","telamon_utils","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Returns an iterator of the partial permuations of size `k` of values. Permutations are returned in lexicographical order.",10,{"inputs":[{"name":"it"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[0,"multimap","","A `HashMap` with mutiple values for each key.",null,null],[3,"MultiHashMap","telamon_utils::multimap","A `HashMap` with mutiple values for each key.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"multihashmap"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `MultiHashMap`.",11,{"inputs":[],"output":{"generics":["randomstate"],"name":"multihashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",11,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"multihashmap"}}],[11,"with_hasher","","Creates an empty `MultiHashMap` which will use the given hash builder to hash keys.",11,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty `MultiHashMap` with space for at least `capacity`  elements, using `hasher` to hash the keys.",11,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `MultiHashMap`. The collection may reserve more space to avoid frequent reallocations.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"keys","","An iterator visiting all keys in arbitrary order.",11,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.",11,null],[11,"values_mut","","An iterator visitinf all values mutably in arbitrary order.",11,null],[11,"iter","","Iterates over all the keys and returns the associated values.",11,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"iter"}}],[11,"num_keys","","Returns the number of keys.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Indicates if the map contains no elements.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",11,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"drain"}}],[11,"clear","","Clears the map, removing all keys and values.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns the values mapped to the key.",11,null],[11,"contains_key","","Indicates if the map contains a value for the specified key.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns an iterator over mutable reference to the values mapped to the key.",11,null],[11,"insert","","Inserts new value to the map.",11,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"insert_many","","Inserts new value to the map.",11,{"inputs":[{"name":"self"},{"name":"k"},{"name":"vec"}],"output":null}],[11,"remove","","Removes all the elements bound to a key.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"vec"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",11,null],[11,"into_iter","","",11,null],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","telamon_utils","",12,{"inputs":[{"name":"self"}],"output":{"name":"vecset"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"new","","Creates a new `VecSet` with the given data.",12,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"is_empty","","Indicates if the `VecSet` is empty.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Iterates over the set, in order.",12,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Returns the elements in self but not in other.",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"name":"difference"}}],[11,"intersection","","Returns a set containing the elements present in both `self` and `other`.",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"name":"intersection"}}],[11,"intersect","","In-place intersection with another `VecSet`.",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":null}],[11,"union","","Returns a set containing the elements present in either self`or`other`.",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"name":"vecset"}}],[11,"filter","","Returns a new `VecSet` with only the elements for which the predicate returned `true`.",12,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"retain","","Filters out elements for wich the predicate returns false.",12,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"insert","","Inserts an element in the `VecSet`. This operation has a complexity in O(n). Returns `false` if the item was already present.",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"into_iter","","",12,null],[11,"from_iter","","",12,{"inputs":[{"name":"it"}],"output":{"name":"self"}}],[11,"deref","","",12,null],[0,"unwrap","","A macro to help debug unwraps.",null,null],[8,"Unwrap","telamon_utils::unwrap","",null,null],[16,"Output","","The type retruned by unwraping.",13,null],[10,"unwrap","","Unwraps the value or panics with the given message.",13,null],[6,"DefaultHasher","telamon_utils","A fast but not secure `Hasher`.",null,null],[6,"HashSet","","An `HashSet` based on `DefaultHasher`.",null,null],[6,"HashMap","","An `HashMap` based on `DefaultHasher`.",null,null],[6,"MultiHashMap","","A `HashMap` based on `DefaultHasher`.",null,null],[11,"default","","",14,{"inputs":[],"output":{"name":"rcstr"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new reference-counted string.",14,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",14,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"serialize","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"borrow","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"trivalent"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trivalent"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_bool","","Returns the boolean represented.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"maybe_true","","Returns `true` if the underlying boolean might be `true`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"maybe_false","","Returns `true` if the underlying boolean might be `false`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_true","","Returns `true` if the underlying boolean is `true`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_false","","Returns `true` if the underlying boolean is `false`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_maybe","","Returns `true` if the underlying boolean might be `true` and `false`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"trivalent"}],"output":{"name":"trivalent"}}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"trivalent"}],"output":{"name":"trivalent"}}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trivalent"}}],[14,"unwrap","","Panics after if the value cannot be unwraped.",null,null],[14,"generated_file","","Includes a generates file into the current file.",null,null],[14,"eq_from_key","","Defines equality from a key.",null,null],[14,"hash_from_key","","Defines equality and hash from a key.",null,null]],"paths":[[4,"Trivalent"],[3,"Cache"],[3,"Dag"],[3,"NDArray"],[3,"NDRange"],[3,"ViewMut"],[3,"ViewMutIter"],[3,"ViewIterMut"],[3,"FilterList"],[3,"ZipCopy"],[3,"PartialPermutations"],[3,"MultiHashMap"],[3,"VecSet"],[8,"Unwrap"],[3,"RcStr"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[4,"Error","","An error arising from interacting with the terminal.",null,null],[13,"Io","","Indicates an error from any underlying IO",1,null],[13,"TerminfoParsing","","Indicates an error during terminfo parsing",1,null],[13,"ParameterizedExpansion","","Indicates an error expanding a parameterized string from the terminfo database",1,null],[13,"NotSupported","","Indicates that the terminal does not support the requested operation.",1,null],[13,"TermUnset","","Indicates that the `TERM` environment variable was unset, and thus we were unable to detect which terminal we should be using.",1,null],[13,"TerminfoEntryNotFound","","Indicates that we were unable to find a terminfo entry for the requested terminal.",1,null],[13,"CursorDestinationInvalid","","Indicates that the cursor could not be moved to the requested position.",1,null],[13,"ColorOutOfRange","","Indicates that the terminal does not support displaying the requested color.",1,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"generics":["box"],"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"generics":["box"],"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",2,null],[12,"bools","","Map of capability name to boolean value",2,null],[12,"numbers","","Map of capability name to numeric value",2,null],[12,"strings","","Map of capability name to raw (unexpanded) string",2,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its parsed Terminfo database record.",null,null],[4,"Error","","An error from parsing a terminfo entry",null,null],[13,"BadMagic","","The \"magic\" number at the start of the file was wrong.",3,null],[13,"NotUtf8","","The names in the file were not valid UTF-8.",3,null],[13,"ShortNames","","The names section of the file was empty",3,null],[13,"TooManyBools","","More boolean parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyNumbers","","More number parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyStrings","","More string parameters are present in the file than this crate knows how to interpret.",3,null],[13,"InvalidLength","","The length of some field was not >= -1.",3,null],[13,"NamesMissingNull","","The names table was missing a trailing null terminator.",3,null],[13,"StringsMissingNull","","The strings table was missing a trailing null terminator.",3,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"generics":["pathbuf"],"name":"option"}}],[0,"parser","term::terminfo","`TermInfo` format parsing. ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames` is true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"generics":["terminfo"],"name":"result"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Number","","",4,null],[13,"Words","","",4,null],[4,"Error","","An error from interpreting a parameterized string.",null,null],[13,"StackUnderflow","","Data was requested from the stack, but the stack didn't have enough elements.",5,null],[13,"TypeMismatch","","The type of the element(s) on top of the stack did not match the type that the operator wanted.",5,null],[13,"UnrecognizedFormatOption","","An unrecognized format option was used.",5,null],[13,"InvalidVariableName","","An invalid variable name was used.",5,null],[13,"InvalidParameterIndex","","An invalid parameter index was used.",5,null],[13,"MalformedCharacterConstant","","A malformed character constant was used.",5,null],[13,"IntegerConstantOverflow","","An integer constant was too large (overflowed an i32)",5,null],[13,"MalformedIntegerConstant","","A malformed integer constant was used.",5,null],[13,"FormatWidthOverflow","","A format width constant was too large (overflowed a usize)",5,null],[13,"FormatPrecisionOverflow","","A format precision constant was too large (overflowed a usize)",5,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"param"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"variables"}}],[11,"new","","Return a new zero-initialized Variables",6,{"inputs":[],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"terminfo"}}],[11,"from_env","","Create a `TermInfo` based on current environment.",2,{"inputs":[],"output":{"generics":["terminfo"],"name":"result"}}],[11,"from_name","","Create a `TermInfo` for the named terminal.",2,{"inputs":[{"name":"str"}],"output":{"generics":["terminfo"],"name":"result"}}],[11,"from_path","","Parse the given `TermInfo`.",2,{"inputs":[{"name":"p"}],"output":{"generics":["terminfo"],"name":"result"}}],[11,"apply_cap","","Retrieve a capability `cmd` and expand it with `params`, writing result to `out`.",2,null],[11,"reset","","Write the reset string to `out`.",2,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"terminfoterminal"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fg","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",7,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",7,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_reset","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"supports_color","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cursor_up","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_line","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"carriage_return","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",7,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",7,{"inputs":[{"name":"t"}],"output":{"generics":["terminfoterminal"],"name":"option"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[6,"Result","","The canonical `Result` type using this crate's Error type.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal (foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",8,null],[10,"fg","","Sets the foreground color to the given color.",8,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",8,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(())` if the attribute is supported and was sent to the terminal, or `Err(e)` if there was an error or the attribute wasn't supported.",8,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",8,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"supports_reset","","Returns true if reset is supported.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_color","","Returns true if color is fully supported.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cursor_up","","Moves the cursor up one line.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",8,null],[10,"get_mut","","Gets a mutable reference to the stream inside",8,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",8,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"Attr"],[4,"Error"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[4,"Error"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex["termcolor"] = {"doc":"This crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.","items":[[3,"StandardStream","termcolor","Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.",null,null],[3,"StandardStreamLock","","`StandardStreamLock` is a locked reference to a `StandardStream`.",null,null],[3,"BufferWriter","","Writes colored buffers to stdout or stderr.",null,null],[3,"Buffer","","Write colored text to memory.",null,null],[3,"NoColor","","Satisfies `WriteColor` but ignores all color options.",null,null],[3,"Ansi","","Satisfies `WriteColor` using standard ANSI escape sequences.",null,null],[3,"ColorSpec","","A color specification.",null,null],[3,"ParseColorError","","An error from parsing an invalid color specification.",null,null],[4,"ColorChoice","","ColorChoice represents the color preferences of an end user.",null,null],[13,"Always","","Try very hard to emit colors. This includes emitting ANSI colors on Windows if the console API is unavailable.",0,null],[13,"AlwaysAnsi","","AlwaysAnsi is like Always, except it never tries to use anything other than emitting ANSI color codes.",0,null],[13,"Auto","","Try to use colors, but don't force the issue. If the console isn't available on Windows, or if TERM=dumb, for example, then don't use colors.",0,null],[13,"Never","","Never emit colors.",0,null],[4,"Color","","The set of available colors for the terminal foreground/background.",null,null],[13,"Black","","",1,null],[13,"Blue","","",1,null],[13,"Green","","",1,null],[13,"Red","","",1,null],[13,"Cyan","","",1,null],[13,"Magenta","","",1,null],[13,"Yellow","","",1,null],[13,"White","","",1,null],[13,"Ansi256","","",1,null],[13,"Rgb","","",1,null],[8,"WriteColor","","This trait describes the behavior of writers that support colored output.",null,null],[10,"supports_color","","Returns true if and only if the underlying writer supports colors.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_color","","Set the color settings of the writer.",2,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[10,"reset","","Reset the current color settings to their original settings.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"colorchoice"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"colorchoice"}],"output":{"name":"bool"}}],[11,"stdout","","Create a new `StandardStream` with the given color preferences that writes to standard output.",3,{"inputs":[{"name":"colorchoice"}],"output":{"name":"standardstream"}}],[11,"stderr","","Create a new `StandardStream` with the given color preferences that writes to standard error.",3,{"inputs":[{"name":"colorchoice"}],"output":{"name":"standardstream"}}],[11,"lock","","Lock the underlying writer.",3,{"inputs":[{"name":"self"}],"output":{"name":"standardstreamlock"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",3,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",4,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"stdout","","Create a new `BufferWriter` that writes to stdout with the given color preferences.",5,{"inputs":[{"name":"colorchoice"}],"output":{"name":"bufferwriter"}}],[11,"stderr","","Create a new `BufferWriter` that writes to stderr with the given color preferences.",5,{"inputs":[{"name":"colorchoice"}],"output":{"name":"bufferwriter"}}],[11,"separator","","If set, the separator given is printed between buffers. By default, no separator is printed.",5,{"inputs":[{"name":"self"},{"generics":["vec"],"name":"option"}],"output":null}],[11,"buffer","","Creates a new `Buffer` with the current color preferences.",5,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"print","","Prints the contents of the given buffer.",5,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"no_color","","Create a buffer that drops all color information.",6,{"inputs":[],"output":{"name":"buffer"}}],[11,"ansi","","Create a buffer that uses ANSI escape sequences.",6,{"inputs":[],"output":{"name":"buffer"}}],[11,"is_empty","","Returns true if and only if this buffer is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of this buffer in bytes.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Clears this buffer.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"into_inner","","Consume this buffer and return the underlying raw data.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_slice","","Return the underlying data of the buffer.",6,null],[11,"as_mut_slice","","Return the underlying data of the buffer as a mutable slice.",6,null],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",6,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new writer that satisfies `WriteColor` but drops all color information.",7,{"inputs":[{"name":"w"}],"output":{"name":"nocolor"}}],[11,"into_inner","","Consume this `NoColor` value and return the inner writer.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_ref","","Return a reference to the inner writer.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Return a mutable reference to the inner writer.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",7,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new writer that satisfies `WriteColor` using standard ANSI escape sequences.",8,{"inputs":[{"name":"w"}],"output":{"name":"ansi"}}],[11,"into_inner","","Consume this `Ansi` value and return the inner writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_ref","","Return a reference to the inner writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Return a mutable reference to the inner writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",8,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"colorspec"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"colorspec"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"bool"}}],[11,"new","","Create a new color specification that has no colors or styles.",9,{"inputs":[],"output":{"name":"colorspec"}}],[11,"fg","","Get the foreground color.",9,{"inputs":[{"name":"self"}],"output":{"generics":["color"],"name":"option"}}],[11,"set_fg","","Set the foreground color.",9,{"inputs":[{"name":"self"},{"generics":["color"],"name":"option"}],"output":{"name":"colorspec"}}],[11,"bg","","Get the background color.",9,{"inputs":[{"name":"self"}],"output":{"generics":["color"],"name":"option"}}],[11,"set_bg","","Set the background color.",9,{"inputs":[{"name":"self"},{"generics":["color"],"name":"option"}],"output":{"name":"colorspec"}}],[11,"bold","","Get whether this is bold or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_bold","","Set whether the text is bolded or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"colorspec"}}],[11,"underline","","Get whether this is underline or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_underline","","Set whether the text is underlined or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"colorspec"}}],[11,"intense","","Get whether this is intense or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_intense","","Set whether the text is intense or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"colorspec"}}],[11,"is_none","","Returns true if this color specification has no colors or styles.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears this color specification so that it has no color/style settings.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"parsecolorerror"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"parsecolorerror"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"parsecolorerror"}],"output":{"name":"bool"}}],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["color","parsecolorerror"],"name":"result"}}]],"paths":[[4,"ColorChoice"],[4,"Color"],[8,"WriteColor"],[3,"StandardStream"],[3,"StandardStreamLock"],[3,"BufferWriter"],[3,"Buffer"],[3,"NoColor"],[3,"Ansi"],[3,"ColorSpec"],[3,"ParseColorError"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["tm","parseerror"],"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"generics":["stdduration","outofrangeerror"],"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["tmfmt","parseerror"],"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["tokio_timer"] = {"doc":"Timer facilities for Tokio","items":[[3,"Interval","tokio_timer","A stream representing notifications at fixed interval",null,null],[3,"Sleep","","A `Future` that does nothing and completes after the requested duration",null,null],[3,"Timer","","A facility for scheduling timeouts",null,null],[3,"Timeout","","Allows a given `Future` to execute for a max duration",null,null],[3,"TimeoutStream","","Allows a given `Stream` to take a max duration to yield the next value.",null,null],[3,"Builder","","Configures and builds a `Timer`",null,null],[4,"TimerError","","The error type for timer operations.",null,null],[13,"TooLong","","The requested timeout exceeds the timer's `max_timeout` setting.",0,null],[13,"NoCapacity","","The timer has reached capacity and cannot support new timeouts.",0,null],[4,"TimeoutError","","The error type for timeout operations.",null,null],[13,"Timer","","An error caused by the timer",1,null],[13,"TimedOut","","The operation timed out",1,null],[5,"wheel","","Configure and build a `Timer` backed by a hashed wheel.",null,{"inputs":[],"output":{"name":"builder"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_next","","",2,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option","timererror"],"name":"poll"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timer"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timererror"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timererror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"timeouterror"}}],[11,"sleep","","Returns a future that completes once the given instant has been reached",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"sleep"}}],[11,"timeout","","Allow the given future to execute for at most `duration` time.",3,{"inputs":[{"name":"self"},{"name":"f"},{"name":"duration"}],"output":{"name":"timeout"}}],[11,"timeout_stream","","Allow the given stream to execute for at most `duration` time per yielded value.",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"duration"}],"output":{"name":"timeoutstream"}}],[11,"interval","","Creates a new interval which will fire at `dur` time into the future, and will repeat every `dur` interval after",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"interval_at","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",3,{"inputs":[{"name":"self"},{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"timer"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_expired","","Returns true if the `Sleep` is expired.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","Returns the duration remaining",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"timer","","Returns a ref to the timer backing this `Sleep`",4,{"inputs":[{"name":"self"}],"output":{"name":"timer"}}],[11,"poll","","",4,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["timererror"],"name":"poll"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"get_ref","","Gets a reference to the underlying future in this timeout.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying future in this timeout.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this timeout, returning the underlying future.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"get_ref","","Gets a reference to the underlying stream in this timeout.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying stream in this timeout.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this timeout, returning the underlying stream.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_next","","",6,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"tick_duration","","Set the timer tick duration.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"num_slots","","Set the number of slots in the timer wheel.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"initial_capacity","","Set the initial capacity of the timer",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_capacity","","Set the max capacity of the timer",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_timeout","","Set the max timeout duration that can be requested",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"channel_capacity","","Set the timer communication channel capacity",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"thread_name","","Set the name for the spawned thread.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"build","","Build the configured `Timer` and return a handle to it.",7,{"inputs":[{"name":"self"}],"output":{"name":"timer"}}]],"paths":[[4,"TimerError"],[4,"TimeoutError"],[3,"Interval"],[3,"Timer"],[3,"Sleep"],[3,"Timeout"],[3,"TimeoutStream"],[3,"Builder"]]};
searchIndex["toml"] = {"doc":"A [TOML]-parsing library","items":[[0,"value","toml","Definition of a TOML value",null,null],[3,"Datetime","toml::value","A parsed TOML datetime value",null,null],[3,"DatetimeParseError","","Error returned from parsing a `Datetime` in the `FromStr` implementation.",null,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","Represents a TOML string",0,null],[13,"Integer","","Represents a TOML integer",0,null],[13,"Float","","Represents a TOML float",0,null],[13,"Boolean","","Represents a TOML boolean",0,null],[13,"Datetime","","Represents a TOML datetime",0,null],[13,"Array","","Represents a TOML array",0,null],[13,"Table","","Represents a TOML table",0,null],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",null,null],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",null,null],[8,"Index","","Types that can be used to index a `toml::Value`",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_from","","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",0,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"as_integer","","Extracts the integer value if it is an integer.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"is_integer","","Tests whether this value is an integer.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_float","","Extracts the float value if it is a float.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_float","","Tests whether this value is a float.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","Extracts the boolean value if it is a boolean.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_bool","","Tests whether this value is a boolean.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","Extracts the string of this value if it is a string.",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_str","","Tests if this value is a string.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",0,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"is_datetime","","Tests whether this value is a datetime.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","Extracts the array value if it is an array.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","Extracts the array value if it is an array.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_array","","Tests whether this value is an array.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_table","","Extracts the table value if it is a table.",0,{"inputs":[{"name":"self"}],"output":{"generics":["table"],"name":"option"}}],[11,"as_table_mut","","Extracts the table value if it is a table.",0,{"inputs":[{"name":"self"}],"output":{"generics":["table"],"name":"option"}}],[11,"is_table","","Tests whether this value is a table.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"same_type","","Tests whether this and another value have the same type.",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"type_str","","Returns a human-readable representation of the type of this value.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"btreemap"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"hashmap"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"bool"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"datetime"}],"output":{"name":"value"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["value"],"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"datetimeparseerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","datetimeparseerror"],"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"ser","toml","Serializing Rust structures into TOML.",null,null],[3,"Serializer","toml::ser","Serialization implementation for TOML.",null,null],[4,"Error","","Errors that can occur when serializing a type.",null,null],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized but it was not supported.",3,null],[13,"KeyNotString","","The key of all TOML maps must be strings, but serialization was attempted where the key of a map was not a string.",3,null],[13,"ArrayMixedType","","Arrays in TOML must have a homogenous type, but a heterogeneous array was emitted.",3,null],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further tables are emitted. If a value is emitted after a table then this error is generated.",3,null],[13,"DateInvalid","","A serialized date was invalid.",3,null],[13,"NumberInvalid","","A serialized number was invalid.",3,null],[13,"UnsupportedNone","","None was attempted to be serialized, but it's not supported.",3,null],[13,"Custom","","A custom error which could be generated when serializing a particular type.",3,null],[5,"to_vec","","Serialize the given data structure as a TOML byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of TOML.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string","error"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a \"pretty\" String of TOML.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string","error"],"name":"result"}}],[5,"tables_last","","Convenience function to serialize items in a map in an order valid with TOML.",null,{"inputs":[{"name":"i"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"new","","Creates a new serializer which will emit TOML into the buffer provided.",4,{"inputs":[{"name":"string"}],"output":{"name":"serializer"}}],[11,"pretty","","Instantiate a \"pretty\" formatter",4,{"inputs":[{"name":"string"}],"output":{"name":"serializer"}}],[11,"pretty_string","","Enable or Disable pretty strings",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"pretty_array","","Enable or Disable pretty arrays",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"pretty_array_indent","","Set the indent for pretty arrays",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing pretty arrays",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"custom","","",3,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"de","toml","Deserializing TOML into Rust structures.",null,null],[3,"Error","toml::de","Errors that can occur when deserializing a type.",null,null],[3,"Deserializer","","Deserialization implementation for TOML.",null,null],[5,"from_slice","","Deserializes a byte slice into a type.",null,null],[5,"from_str","","Deserializes a string into a type.",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"new","","Creates a new deserializer which will be deserializing the string provided.",6,{"inputs":[{"name":"str"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.  This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace/comments.",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a table definition, but the TOML spec requires a newline after a table definition header.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"line_col","","Produces a (line, column) pair of the position of the error if available",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[14,"toml","toml","Construct a [`toml::Value`] from TOML syntax.",null,null]],"paths":[[4,"Value"],[3,"Datetime"],[3,"DatetimeParseError"],[4,"Error"],[3,"Serializer"],[3,"Error"],[3,"Deserializer"]]};
searchIndex["topological_sort"] = {"doc":"Performs topological sorting.","items":[[3,"TopologicalSort","topological_sort","Performs topological sorting.",null,null],[3,"DependencyLink","","A link between two items in a sort.",null,null],[12,"prec","","The element which is depened upon by `succ`.",0,null],[12,"succ","","The element which depends on `prec`.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"topologicalsort"}}],[11,"new","","Creates new empty `TopologicalSort`.",1,{"inputs":[],"output":{"name":"topologicalsort"}}],[11,"len","","Returns the number of elements in the `TopologicalSort`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `TopologicalSort` contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add_dependency","","Registers the two elements' dependency.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"s"}],"output":null}],[11,"add_link","","Registers a dependency link.",1,{"inputs":[{"name":"self"},{"name":"dependencylink"}],"output":null}],[11,"insert","","Inserts an element, without adding any dependencies from or to it.",1,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"pop","","Removes the item that is not depended on by any other items and returns it, or `None` if there is no such item.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_all","","Removes all items that are not depended on by any other items and returns it, or empty vector if there are no such items.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"peek","","Return a reference to the first item that does not depend on any other items, or `None` if there is no such item.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_all","","Return a vector of references to all items that do not depend on any other items, or an empty vector if there are no such items.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"topologicalsort"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"dependencylink"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,null],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"topologicalsort"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"DependencyLink"],[3,"TopologicalSort"]]};
searchIndex["ucd_util"] = {"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",null,{"inputs":[{"name":"propertytable"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[5,"property_values","","Find the set of possible property values for a given property.",null,{"inputs":[{"name":"propertyvaluetable"},{"name":"str"}],"output":{"generics":["propertyvalues"],"name":"option"}}],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",null,{"inputs":[{"name":"propertyvalues"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[6,"PropertyTable","","The type of a property name table.",null,null],[6,"PropertyValueTable","","Type of a property value table.",null,null],[6,"PropertyValues","","A mapping of property values for a specific property.",null,null],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",null,null],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",null,null]],"paths":[]};
searchIndex["unicode_segmentation"] = {"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29 rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string's grapheme clusters.",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",null,null],[3,"UWordBounds","","External iterator for a string's word boundaries.",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",null,null],[4,"GraphemeIncomplete","","An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.",null,null],[13,"PreContext","","More pre-context is needed. The caller should call `provide_context` with a chunk ending at the offset given, then retry the query. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"PrevChunk","","When requesting `prev_boundary`, the cursor is moving past the beginning of the current chunk, so the chunk before that is requested. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"NextChunk","","When requesting `next_boundary`, the cursor is moving past the end of the current chunk, so the chunk after that is requested. This will only be returned if the chunk ends before the `len` parameter provided on creation of the cursor.",0,null],[13,"InvalidOffset","","An error returned when the chunk given does not contain the cursor position.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"graphemeindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"graphemes"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"size_hint","","",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"graphemecursor"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new cursor. The string and initial offset are given at creation time, but the contents of the string are not. The `is_extended` parameter controls whether extended grapheme clusters are selected.",3,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"graphemecursor"}}],[11,"set_cursor","","Set the cursor to a new location in the same string.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value provided to `new()` or `set_cursor()`, or returned from `next_boundary()` or `prev_boundary()`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"provide_context","","Provide additional pre-context when it is needed to decide a boundary. The end of the chunk must coincide with the value given in the `GraphemeIncomplete::PreContext` request.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":null}],[11,"is_boundary","","Determine whether the current cursor location is a grapheme cluster boundary. Only a part of the string need be supplied. If `chunk_start` is nonzero or the length of `chunk` is not equal to `len` on creation, then this method may return `GraphemeIncomplete::PreContext`. The caller should then call `provide_context` with the requested chunk, then retry calling this method.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["bool","graphemeincomplete"],"name":"result"}}],[11,"next_boundary","","Find the next boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::NextChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk following the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["option","graphemeincomplete"],"name":"result"}}],[11,"prev_boundary","","Find the previous boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::PrevChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk preceding the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["option","graphemeincomplete"],"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[17,"UNICODE_VERSION","","The version of Unicode that this version of unicode-segmentation is based on.",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode Standard Annex #29.",null,null],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemes"}}],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See `graphemes()` for more information.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemeindices"}}],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"unicodewords"}}],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries, and their offsets. See `split_word_bounds()` for more information.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}]],"paths":[[4,"GraphemeIncomplete"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["uuid"] = {"doc":"Generate and parse UUIDs.","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID).",null,null],[3,"Simple","","An adaptor for formatting a `Uuid` as a simple string.",null,null],[3,"Hyphenated","","An adaptor for formatting a `Uuid` as a hyphenated string.",null,null],[3,"Urn","","An adaptor for formatting a `Uuid` as a URN string.",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures.",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[0,"prelude","","The [`uuid`] prelude.",null,null],[3,"Uuid","uuid::prelude","A Universally Unique Identifier (UUID).",null,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"description","uuid","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID.",null,null],[17,"NAMESPACE_DNS","","A UUID of the namespace of fully-qualified domain names",null,null],[17,"NAMESPACE_URL","","A UUID of the namespace of URLs",null,null],[17,"NAMESPACE_OID","","A UUID of the namespace of ISO OIDs",null,null],[17,"NAMESPACE_X500","","A UUID of the namespace of X.500 DNs (in DER or a text output format)",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"uuidversion"}}],[11,"clone","uuid::prelude","",1,{"inputs":[{"name":"self"}],"output":{"name":"uuidvariant"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"eq","uuid","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nil","uuid::prelude","The 'nil UUID'.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",3,{"inputs":[{"name":"uuidversion"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",3,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",3,null],[11,"from_uuid_bytes","","Creates a `Uuid` using the supplied bytes.",3,{"inputs":[{"name":"uuidbytes"}],"output":{"name":"uuid"}}],[11,"from_random_bytes","","Creates a v4 Uuid from random bytes (e.g. bytes supplied from `Rand` crate)",3,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",3,{"inputs":[{"name":"self"}],"output":{"generics":["uuidvariant"],"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"generics":["uuidversion"],"name":"option"}}],[11,"as_fields","","Returns the four field values of the UUID.",3,null],[11,"as_bytes","","Returns an array of 16 octets containing the UUID data.",3,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",3,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",3,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",3,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and counter portion of a V1 UUID.  If the supplied UUID is not V1, this will return None",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",3,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","uuid","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["yaml_rust"] = {"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",null,null],[3,"YamlLoader","yaml_rust::yaml","",null,null],[3,"YamlIter","","",null,null],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `LinkedHashMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",0,null],[6,"Array","","",null,null],[6,"Hash","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"yaml"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"on_event","","",1,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["vec","scanerror"],"name":"result"}}],[11,"as_bool","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_hash","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["hash"],"name":"option"}}],[11,"as_vec","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_bool","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_i64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"into_hash","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["hash"],"name":"option"}}],[11,"into_vec","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_null","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_array","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_f64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"yaml"}}],[11,"into_iter","","",0,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["yaml"],"name":"option"}}],[0,"scanner","yaml_rust","",null,null],[3,"Marker","yaml_rust::scanner","",null,null],[3,"ScanError","","",null,null],[3,"Token","","",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[3,"Scanner","","",null,null],[4,"TEncoding","","",null,null],[13,"Utf8","","",4,null],[4,"TScalarStyle","","",null,null],[13,"Any","","",5,null],[13,"Plain","","",5,null],[13,"SingleQuoted","","",5,null],[13,"DoubleQuoted","","",5,null],[13,"Literal","","",5,null],[13,"Foled","","",5,null],[4,"TokenType","","",null,null],[13,"NoToken","","",6,null],[13,"StreamStart","","",6,null],[13,"StreamEnd","","",6,null],[13,"VersionDirective","","major, minor",6,null],[13,"TagDirective","","handle, prefix",6,null],[13,"DocumentStart","","",6,null],[13,"DocumentEnd","","",6,null],[13,"BlockSequenceStart","","",6,null],[13,"BlockMappingStart","","",6,null],[13,"BlockEnd","","",6,null],[13,"FlowSequenceStart","","",6,null],[13,"FlowSequenceEnd","","",6,null],[13,"FlowMappingStart","","",6,null],[13,"FlowMappingEnd","","",6,null],[13,"BlockEntry","","",6,null],[13,"FlowEntry","","",6,null],[13,"Key","","",6,null],[13,"Value","","",6,null],[13,"Alias","","",6,null],[13,"Anchor","","",6,null],[13,"Tag","","handle, suffix",6,null],[13,"Scalar","","",6,null],[6,"ScanResult","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tencoding"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tscalarstyle"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"line","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"scanerror"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"marker","","",8,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"new","","Creates the YAML tokenizer.",9,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["scanerror"],"name":"option"}}],[11,"stream_started","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stream_ended","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mark","","",9,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"fetch_next_token","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"next_token","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option","scanerror"],"name":"result"}}],[11,"fetch_more_tokens","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[0,"parser","yaml_rust","",null,null],[3,"Parser","yaml_rust::parser","",null,null],[4,"Event","","`Event` is used with the low-level event base parsing API, see `EventReceiver` trait.",null,null],[13,"Nothing","","Reserved for internal use",10,null],[13,"StreamStart","","",10,null],[13,"StreamEnd","","",10,null],[13,"DocumentStart","","",10,null],[13,"DocumentEnd","","",10,null],[13,"Alias","","Refer to an anchor ID",10,null],[13,"Scalar","","Value, style, anchor_id, tag",10,null],[13,"SequenceStart","","Anchor ID",10,null],[13,"SequenceEnd","","",10,null],[13,"MappingStart","","Anchor ID",10,null],[13,"MappingEnd","","",10,null],[6,"ParseResult","","",null,null],[8,"EventReceiver","","",null,null],[10,"on_event","","",11,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[8,"MarkedEventReceiver","","",null,null],[10,"on_event","","",12,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"peek","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["scanerror"],"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"load","","",13,{"inputs":[{"name":"self"},{"name":"r"},{"name":"bool"}],"output":{"generics":["scanerror"],"name":"result"}}],[0,"emitter","yaml_rust","",null,null],[3,"YamlEmitter","yaml_rust::emitter","",null,null],[4,"EmitError","","",null,null],[13,"FmtError","","",14,null],[13,"BadHashmapKey","","",14,null],[6,"EmitResult","","",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"emiterror"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",15,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"compact","","Set 'compact inline notation' on or off, as described for block sequences and mappings.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_compact","","Determine if this emitter is using 'compact inline notation'.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dump","","",15,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"emitresult"}}]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"YamlIter"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[8,"MarkedEventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
initSearch(searchIndex);
